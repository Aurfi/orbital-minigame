{"version":3,"file":"index-DS902wvm.js","sources":["../../src/physics/PhysicsIntegrator.ts","../../src/physics/Vector2.ts","../../src/rendering/BackgroundSystem.ts","../../src/rendering/CanvasRenderer.ts","../../src/rendering/CloudSystem.ts","../../src/rendering/PlanetShapes.ts","../../src/rendering/PlanetTextureGen.ts","../../src/rendering/PlanetRenderer.ts","../../src/rendering/RocketRenderer.ts","../../src/ui/AtmosphereUI.ts","../../src/ui/FactBubbles.ts","../../src/physics/AtmosphericPhysics.ts","../../src/ui/HUDSystem.ts","../../src/core/AtmosphereLimiter.ts","../../src/core/Autopilot.ts","../../src/core/CommandExecutor.ts","../../src/rendering/StagingVisuals.ts","../../src/core/EffectsSystem.ts","../../src/physics/RigidBody.ts","../../src/physics/WorldParameters.ts","../../src/physics/OrbitalMechanics.ts","../../src/core/Navigator.ts","../../src/core/RocketConfiguration.ts","../../src/core/GameStateManager.ts","../../src/core/GuidanceSystem.ts","../../src/core/InputController.ts","../../src/core/PhysicsSimulation.ts","../../src/core/SimpleSoundSystem.ts","../../src/core/StageManager.ts","../../src/core/GameEngine.ts","../../src/ui/AutopilotConsole.ts","../../src/core/Settings.ts","../../src/ui/HowToPlay.ts","../../src/ui/IntroMenu.ts","../../src/ui/ReadmeOverlay.ts","../../src/ui/SpeedControls.ts","../../src/main.ts"],"sourcesContent":["import type { Vector2 } from './Vector2.js';\n\n// Semi-implicit Euler integrator for stable physics simulation\nexport class PhysicsIntegrator {\n  private readonly fixedTimestep: number = 1 / 60; // 60 Hz physics\n  private readonly maxSubsteps: number = 10;\n  private accumulator = 0;\n\n  /**\n   * Update physics with variable timestep using fixed substeps\n   * @param deltaTime Frame time (seconds)\n   * @param updateCallback Function to call for each physics substep\n   */\n  // Runs fixed substeps even if frame time varies. Prevents \"spiral of death\".\n  update(deltaTime: number, updateCallback: (dt: number) => void): void {\n    // Clamp deltaTime to prevent spiral of death\n    const clampedDeltaTime = Math.min(deltaTime, 0.25);\n    this.accumulator += clampedDeltaTime;\n\n    let substeps = 0;\n    while (this.accumulator >= this.fixedTimestep && substeps < this.maxSubsteps) {\n      updateCallback(this.fixedTimestep);\n      this.accumulator -= this.fixedTimestep;\n      substeps++;\n    }\n\n    // If we hit max substeps, consume remaining time to prevent accumulation\n    if (substeps >= this.maxSubsteps) {\n      this.accumulator = 0;\n    }\n  }\n\n  /**\n   * Semi-implicit Euler integration step\n   * More stable than explicit Euler for orbital mechanics\n   * @param position Current position (modified in place)\n   * @param velocity Current velocity (modified in place)\n   * @param acceleration Current acceleration\n   * @param deltaTime Integration timestep\n   */\n  // Semi-implicit Euler: stable for forces like gravity + thrust\n  static integrateMotion(\n    position: Vector2,\n    velocity: Vector2,\n    acceleration: Vector2,\n    deltaTime: number\n  ): void {\n    // Store initial velocity for position update\n    const initialVelocity = velocity.clone();\n\n    // Update velocity: v(t+dt) = v(t) + a(t) * dt\n    velocity.x += acceleration.x * deltaTime;\n    velocity.y += acceleration.y * deltaTime;\n\n    // Update position using average velocity for better accuracy\n    const avgVelocity = initialVelocity.add(velocity).multiply(0.5);\n    position.x += avgVelocity.x * deltaTime;\n    position.y += avgVelocity.y * deltaTime;\n  }\n\n  /**\n   * Verlet integration (alternative, more accurate for conservative forces)\n   * @param position Current position (modified in place)\n   * @param velocity Current velocity (modified in place)\n   * @param acceleration Current acceleration\n   * @param previousAcceleration Previous frame acceleration\n   * @param deltaTime Integration timestep\n   */\n  // Verlet alternative (not used by default). Better for conservative forces,\n  // but needs previous acceleration.\n  static integrateVerlet(\n    position: Vector2,\n    velocity: Vector2,\n    acceleration: Vector2,\n    previousAcceleration: Vector2,\n    deltaTime: number\n  ): void {\n    const dt2 = deltaTime * deltaTime;\n\n    // Position: x(t+dt) = x(t) + v(t)*dt + 0.5*a(t)*dt²\n    position.x += velocity.x * deltaTime + 0.5 * acceleration.x * dt2;\n    position.y += velocity.y * deltaTime + 0.5 * acceleration.y * dt2;\n\n    // Velocity: v(t+dt) = v(t) + 0.5*(a(t) + a(t+dt))*dt\n    // Note: This requires acceleration at t+dt, so we approximate with current\n    velocity.x += 0.5 * (previousAcceleration.x + acceleration.x) * deltaTime;\n    velocity.y += 0.5 * (previousAcceleration.y + acceleration.y) * deltaTime;\n  }\n\n  /**\n   * Check integration stability\n   * @param velocity Current velocity\n   * @param acceleration Current acceleration\n   * @param deltaTime Integration timestep\n   * @returns True if integration is stable\n   */\n  // Quick guard rails for extreme numbers. Helps avoid explosions in state.\n  static isStable(velocity: Vector2, acceleration: Vector2, deltaTime: number): boolean {\n    const maxVelocity = 50_000; // 50 km/s max velocity\n    const maxAcceleration = 1000; // 1000 m/s² max acceleration\n\n    return (\n      velocity.magnitude() < maxVelocity &&\n      acceleration.magnitude() < maxAcceleration &&\n      deltaTime > 0 &&\n      deltaTime < 1\n    );\n  }\n\n  /**\n   * Get recommended timestep for given conditions\n   * @param velocity Current velocity\n   * @param acceleration Current acceleration\n   * @returns Recommended timestep (seconds)\n   */\n  static getRecommendedTimestep(velocity: Vector2, acceleration: Vector2): number {\n    const baseTimestep = 1 / 60;\n    const velocityMag = velocity.magnitude();\n    const accelMag = acceleration.magnitude();\n\n    // Reduce timestep for high velocities or accelerations\n    if (velocityMag > 10_000 || accelMag > 100) {\n      return baseTimestep * 0.5;\n    }\n\n    return baseTimestep;\n  }\n}\n","// Lightweight 2D vector. Small and readable, enough for this game.\nexport class Vector2 {\n  constructor(\n    public x = 0,\n    public y = 0\n  ) {}\n\n  // Static factory methods\n  static zero(): Vector2 {\n    return new Vector2(0, 0);\n  }\n\n  static one(): Vector2 {\n    return new Vector2(1, 1);\n  }\n\n  static up(): Vector2 {\n    return new Vector2(0, 1);\n  }\n\n  static right(): Vector2 {\n    return new Vector2(1, 0);\n  }\n\n  // Unit vector from angle (radians). Magnitude can be scaled.\n  static fromAngle(angle: number, magnitude = 1): Vector2 {\n    return new Vector2(Math.cos(angle) * magnitude, Math.sin(angle) * magnitude);\n  }\n\n  // Basic immutable operations (return new vectors)\n  add(other: Vector2): Vector2 {\n    return new Vector2(this.x + other.x, this.y + other.y);\n  }\n\n  subtract(other: Vector2): Vector2 {\n    return new Vector2(this.x - other.x, this.y - other.y);\n  }\n\n  multiply(scalar: number): Vector2 {\n    return new Vector2(this.x * scalar, this.y * scalar);\n  }\n\n  divide(scalar: number): Vector2 {\n    return new Vector2(this.x / scalar, this.y / scalar);\n  }\n\n  // Vector operations\n  dot(other: Vector2): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  cross(other: Vector2): number {\n    return this.x * other.y - this.y * other.x;\n  }\n\n  magnitude(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  magnitudeSquared(): number {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  // Safe normalize: returns (0,0) when magnitude is 0\n  normalized(): Vector2 {\n    const mag = this.magnitude();\n    return mag > 0 ? this.divide(mag) : Vector2.zero();\n  }\n\n  angle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  distanceTo(other: Vector2): number {\n    return this.subtract(other).magnitude();\n  }\n\n  distanceSquaredTo(other: Vector2): number {\n    return this.subtract(other).magnitudeSquared();\n  }\n\n  // Angle between two vectors (0..π)\n  angleTo(other: Vector2): number {\n    const dot = this.dot(other);\n    const mag1 = this.magnitude();\n    const mag2 = other.magnitude();\n\n    if (mag1 === 0 || mag2 === 0) return 0;\n\n    const cosAngle = dot / (mag1 * mag2);\n    return Math.acos(Math.max(-1, Math.min(1, cosAngle)));\n  }\n\n  // Approximate equality with tolerance (useful for tests)\n  equals(other: Vector2, tolerance = 1e-10): boolean {\n    return Math.abs(this.x - other.x) < tolerance && Math.abs(this.y - other.y) < tolerance;\n  }\n\n  // Mutating operations (use carefully to avoid hidden aliasing)\n  set(x: number, y: number): Vector2 {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  copy(other: Vector2): Vector2 {\n    this.x = other.x;\n    this.y = other.y;\n    return this;\n  }\n\n  clone(): Vector2 {\n    return new Vector2(this.x, this.y);\n  }\n\n  // Utility\n  toString(): string {\n    return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)})`;\n  }\n}\n","import type { GameState } from '../core/types.js';\nimport { Vector2 } from '../physics/Vector2.js';\nimport type { CanvasRenderer } from './CanvasRenderer.js';\n\ninterface Building {\n  position: Vector2;\n  width: number;\n  height: number;\n  type: 'skyscraper' | 'mid' | 'low' | 'box';\n  color: string;\n}\n\ninterface TreeDef {\n  offset: number; // lateral offset along tangent (meters)\n  height: number; // meters\n  width: number; // meters\n  type: 'pine' | 'broadleaf';\n}\n\nexport class BackgroundSystem {\n  private buildings: Building[] = [];\n  private buildingDefs: Array<{\n    offset: number;\n    width: number;\n    height: number;\n    type: Building['type'];\n    color: string;\n  }> = [];\n  private buildingSprites: Array<{\n    image: HTMLCanvasElement;\n    offset: number;\n    width: number;\n    height: number;\n  }> = [];\n  private treeDefs: TreeDef[] = [];\n  private treeSprites: Array<{\n    image: HTMLCanvasElement;\n    offset: number;\n    width: number;\n    height: number;\n  }> = [];\n  private spritesReady = false;\n  private padBaseAngle: number | null = null; // world pad angle at t=0 (radians)\n\n  constructor() {\n    this.initializeBackground();\n  }\n\n  // Update only tracks pad base angle for building rotation\n  update(gameState: GameState, deltaTime: number): void {\n    // Seed pad base angle once, deriving the reference world angle for buildings.\n    if (this.padBaseAngle === null) {\n      const angleNow = Math.atan2(gameState.rocket.position.y, gameState.rocket.position.x);\n      const omega = gameState.world.earthRotationRate || 0;\n      this.padBaseAngle = angleNow - omega * gameState.currentTime;\n    }\n  }\n\n  /**\n   * Initialize static background elements\n   */\n  private initializeBackground(): void {\n    // Create Kennedy Space Center style buildings (defs used relative to rocket)\n    this.createLaunchFacilities();\n    // Plant trees near the pad area (far enough not to overlap launch structures)\n    this.createTrees();\n\n    // Pre-render sprite atlases for buildings\n    this.prepareSprites();\n  }\n\n  private prepareSprites(): void {\n    // Building sprites from defs\n    this.buildingSprites = [];\n    for (const def of this.buildingDefs) {\n      const img = document.createElement('canvas');\n      const scale = 2; // pixels per world unit in sprite\n      img.width = Math.max(2, Math.floor(def.width * scale));\n      img.height = Math.max(2, Math.floor(def.height * scale));\n      const ctx = img.getContext('2d');\n      if (!ctx) {\n        this.spritesReady = false;\n        return;\n      }\n      // draw body\n      ctx.fillStyle = def.color;\n      ctx.fillRect(0, 0, img.width, img.height);\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = '#556';\n      ctx.strokeRect(0.5, 0.5, img.width - 1, img.height - 1);\n      // details using same patterns as runtime but on offscreen context\n      this.drawBuildingDetailsToCtx(ctx, def.width, def.height, def.type, scale);\n      this.buildingSprites.push({\n        image: img,\n        offset: def.offset,\n        width: def.width,\n        height: def.height,\n      });\n    }\n\n    this.spritesReady = true;\n  }\n\n  private createTrees(): void {\n    this.treeDefs = [];\n    const rng = () => Math.random();\n    // Populate a few rows of trees left/right of the pad out to ~1 km\n    const bands = [220, 320, 450, 620, 800, 1000];\n    for (const band of bands) {\n      const count = 6 + Math.floor(rng() * 6);\n      for (let i = 0; i < count; i++) {\n        const side = rng() < 0.5 ? -1 : 1;\n        const jitter = (rng() - 0.5) * 60; // small offset so they aren't perfectly aligned\n        const offset = side * (band + jitter);\n        if (Math.abs(offset) < 180) continue; // keep clear zone around pad\n        const type: TreeDef['type'] = rng() < 0.6 ? 'pine' : 'broadleaf';\n        const height = type === 'pine' ? 30 + rng() * 18 : 22 + rng() * 14;\n        const width = type === 'pine' ? height * 0.35 : height * 0.6;\n        this.treeDefs.push({ offset, height, width, type });\n      }\n    }\n\n    // Pre-render simple tree sprites (vector look kept coherent with buildings)\n    this.treeSprites = this.treeDefs.map((t) => {\n      const scale = 2;\n      const w = Math.max(4, Math.floor(t.width * scale));\n      const h = Math.max(6, Math.floor(t.height * scale));\n      const c = document.createElement('canvas');\n      c.width = w;\n      c.height = h;\n      const ctx = c.getContext('2d');\n      if (!ctx) return { image: c, offset: t.offset, width: t.width, height: t.height };\n      ctx.clearRect(0, 0, w, h);\n      if (t.type === 'pine') {\n        // Trunk\n        ctx.fillStyle = '#6d4c41';\n        ctx.fillRect(\n          w / 2 - Math.max(2, Math.floor(w * 0.06)),\n          h * 0.75,\n          Math.max(4, w * 0.12),\n          h * 0.25\n        );\n        // Conical foliage\n        ctx.fillStyle = '#2e7d32';\n        ctx.beginPath();\n        ctx.moveTo(w / 2, 0);\n        ctx.lineTo(w * 0.1, h * 0.8);\n        ctx.lineTo(w * 0.9, h * 0.8);\n        ctx.closePath();\n        ctx.fill();\n      } else {\n        // Trunk\n        ctx.fillStyle = '#6d4c41';\n        ctx.fillRect(\n          w / 2 - Math.max(2, Math.floor(w * 0.06)),\n          h * 0.7,\n          Math.max(4, w * 0.12),\n          h * 0.3\n        );\n        // Round canopy\n        ctx.fillStyle = '#388e3c';\n        ctx.beginPath();\n        ctx.ellipse(w / 2, h * 0.55, w * 0.45, h * 0.35, 0, 0, Math.PI * 2);\n        ctx.fill();\n      }\n      return { image: c, offset: t.offset, width: t.width, height: t.height };\n    });\n  }\n\n  private drawBuildingDetailsToCtx(\n    ctx: CanvasRenderingContext2D,\n    w: number,\n    h: number,\n    type: Building['type'],\n    scale: number\n  ): void {\n    const toPx = (x: number) => x * scale;\n    switch (type) {\n      case 'skyscraper': {\n        ctx.fillStyle = '#c9dcf8';\n        const stripeW = toPx(w * 0.22);\n        const leftX = toPx(w * 0.18);\n        const rightX = toPx(w - w * 0.18 - w * 0.22);\n        ctx.fillRect(leftX, 0, stripeW, toPx(h));\n        ctx.fillRect(rightX, 0, stripeW, toPx(h));\n        // antenna\n        ctx.strokeStyle = '#9aa7b7';\n        ctx.lineWidth = 3;\n        ctx.beginPath();\n        ctx.moveTo(toPx(w / 2), toPx(h));\n        ctx.lineTo(toPx(w / 2), toPx(h) + toPx(h * 0.12));\n        ctx.stroke();\n        break;\n      }\n      case 'mid': {\n        const cols = Math.max(4, Math.floor(w / 26));\n        const rows = Math.max(3, Math.floor(h / 32));\n        const winW = toPx(8);\n        const winH = toPx(16);\n        const gapX = (toPx(w) - cols * winW) / (cols + 1);\n        const gapY = (toPx(h) - rows * winH) / (rows + 1);\n        const baseX = gapX;\n        const baseY = gapY;\n        ctx.fillStyle = '#96b6ff';\n        for (let r = 0; r < rows; r++) {\n          for (let c = 0; c < cols; c++) {\n            const wx = baseX + c * (winW + gapX);\n            const wy = baseY + r * (winH + gapY);\n            ctx.fillRect(wx, wy, winW, winH);\n          }\n        }\n        break;\n      }\n      case 'low': {\n        const vents = Math.max(3, Math.floor(w / 50));\n        const vw = toPx(16);\n        const vh = toPx(10);\n        const gap = toPx(12);\n        const total = vents * vw + (vents - 1) * gap;\n        let x = (toPx(w) - total) / 2;\n        const y = toPx(h) / 2 - vh / 2;\n        ctx.fillStyle = '#9aa7b7';\n        for (let i = 0; i < vents; i++) {\n          ctx.fillRect(x, y, vw, vh);\n          x += vw + gap;\n        }\n        break;\n      }\n      case 'box': {\n        const cols = Math.max(3, Math.floor(w / 50));\n        const winW = toPx(10);\n        const winH = toPx(14);\n        const gap = (toPx(w) - cols * winW) / (cols + 1);\n        const baseX = gap;\n        const baseY = toPx(h) / 2 - winH / 2;\n        ctx.fillStyle = '#9fc3ff';\n        for (let c = 0; c < cols; c++) {\n          const wx = baseX + c * (winW + gap);\n          ctx.fillRect(wx, baseY, winW, winH);\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Create launch pad facilities\n   */\n  private createLaunchFacilities(): void {\n    // Offsets are lateral along local ground tangent at the pad\n    const add = (\n      offset: number,\n      width: number,\n      height: number,\n      type: Building['type'],\n      color: string\n    ) => {\n      // Avoid drawing anything too close to the rocket/pad area\n      if (Math.abs(offset) < 160) return;\n      this.buildingDefs.push({ offset, width, height, type, color });\n    };\n    // Skyline inspired by the mock: bluish/white boxes with windows\n    // Tall slender skyscraper with antenna\n    add(-350, 100, 360, 'skyscraper', '#8fb7e9');\n    // Light mid-rise with many windows\n    add(-540, 220, 220, 'mid', '#e9eef6');\n    // Small low box (vents)\n    add(-240, 160, 70, 'low', '#bdbdbd');\n    // White mid-rise on right with grid windows\n    add(260, 260, 200, 'mid', '#f2f5fa');\n    // Darker blue block behind\n    add(430, 200, 230, 'mid', '#79a3e6');\n    // Small light box\n    add(560, 160, 90, 'low', '#cfd8dc');\n    // Short framed box\n    add(320, 180, 90, 'box', '#cfd8dc');\n  }\n\n  /**\n   * Render all background elements\n   */\n  render(renderer: CanvasRenderer, gameState: GameState): void {\n    if (!gameState || !gameState.rocket) return;\n    const altitude = gameState.world.getAltitude(gameState.rocket.position.magnitude());\n\n    // Render buildings\n    if (altitude < 20000) {\n      this.renderBuildings(renderer, gameState);\n    }\n  }\n\n  /**\n   * Render launch facilities and buildings\n   */\n  private renderBuildings(renderer: CanvasRenderer, gameState: GameState): void {\n    // Base ground point at the fixed pad angle rotating with the planet\n    const R = gameState.world.planetRadius;\n    const omega = gameState.world.earthRotationRate || 0;\n    const ang = (this.padBaseAngle ?? 0) + omega * gameState.currentTime;\n    const u = new Vector2(Math.cos(ang), Math.sin(ang));\n    const t = new Vector2(-Math.sin(ang), Math.cos(ang));\n    const base = u.multiply(R + 1);\n\n    if (this.spritesReady) {\n      for (const sprite of this.buildingSprites) {\n        if (Math.abs(sprite.offset) < 160) continue; // safety: skip near-pad\n        const center = base.add(t.multiply(sprite.offset)).add(u.multiply(sprite.height / 2));\n        renderer.drawSprite(sprite.image, center, sprite.width, sprite.height);\n      }\n      // Draw trees after buildings so they sit in front of the pad horizon line\n      for (const sprite of this.treeSprites) {\n        if (Math.abs(sprite.offset) < 160) continue;\n        const center = base.add(t.multiply(sprite.offset)).add(u.multiply(sprite.height / 2));\n        renderer.drawSprite(sprite.image, center, sprite.width, sprite.height);\n      }\n    } else {\n      // Fallback vector drawing in test environments\n      for (const def of this.buildingDefs) {\n        if (Math.abs(def.offset) < 160) continue;\n        const center = base.add(t.multiply(def.offset)).add(u.multiply(def.height / 2));\n        const topLeft = new Vector2(center.x - def.width / 2, center.y - def.height / 2);\n        renderer.drawRectangle(topLeft, def.width, def.height, def.color, '#556', 2);\n        const b: Building = {\n          position: new Vector2(topLeft.x + def.width / 2, topLeft.y),\n          width: def.width,\n          height: def.height,\n          type: def.type,\n          color: def.color,\n        };\n        this.addBuildingDetails(renderer, b);\n      }\n      // Simple fallback trees as triangles/caps\n      for (const tre of this.treeDefs) {\n        if (Math.abs(tre.offset) < 160) continue;\n        const center = base.add(t.multiply(tre.offset)).add(u.multiply(tre.height / 2));\n        if (tre.type === 'pine') {\n          // Trunk\n          renderer.drawRectangle(\n            new Vector2(center.x - tre.width * 0.05, center.y + tre.height * 0.25),\n            tre.width * 0.1,\n            tre.height * 0.25,\n            '#6d4c41'\n          );\n          // Canopy\n          renderer.drawRotated(center, 0, () => {\n            const p1 = new Vector2(0, tre.height * 0.5);\n            const p2 = new Vector2(-tre.width * 0.45, -tre.height * 0.3);\n            const p3 = new Vector2(tre.width * 0.45, -tre.height * 0.3);\n            renderer.drawLine(center.add(p1), center.add(p2), '#2e7d32', 3);\n            renderer.drawLine(center.add(p1), center.add(p3), '#2e7d32', 3);\n            renderer.drawLine(center.add(p2), center.add(p3), '#2e7d32', 3);\n          });\n        } else {\n          renderer.drawRectangle(\n            new Vector2(center.x - tre.width * 0.05, center.y + tre.height * 0.2),\n            tre.width * 0.1,\n            tre.height * 0.3,\n            '#6d4c41'\n          );\n          renderer.drawCircle(center, Math.max(3, tre.width * 0.4), '#388e3c');\n        }\n      }\n    }\n  }\n\n  /**\n   * Add details to buildings\n   */\n  private addBuildingDetails(renderer: CanvasRenderer, building: Building): void {\n    const pos = building.position;\n\n    switch (building.type) {\n      case 'skyscraper': {\n        // Vertical pale stripes\n        const stripeW = building.width * 0.22;\n        const leftX = pos.x - building.width / 2 + building.width * 0.18;\n        const rightX = pos.x + building.width / 2 - building.width * 0.18 - stripeW;\n        const pale = '#c9dcf8';\n        renderer.drawRectangle(new Vector2(leftX, pos.y), stripeW, building.height, pale);\n        renderer.drawRectangle(new Vector2(rightX, pos.y), stripeW, building.height, pale);\n        // Antenna\n        const top = new Vector2(pos.x, pos.y + building.height);\n        renderer.drawLine(\n          new Vector2(top.x, top.y),\n          new Vector2(top.x, top.y + building.height * 0.12),\n          '#9aa7b7',\n          3\n        );\n        break;\n      }\n      case 'mid': {\n        // Grid windows\n        const cols = Math.max(4, Math.floor(building.width / 26));\n        const rows = Math.max(3, Math.floor(building.height / 32));\n        const winW = 8;\n        const winH = 16;\n        const gapX = (building.width - cols * winW) / (cols + 1);\n        const gapY = (building.height - rows * winH) / (rows + 1);\n        const baseX = pos.x - building.width / 2 + gapX;\n        const baseY = pos.y + gapY;\n        for (let r = 0; r < rows; r++) {\n          for (let c = 0; c < cols; c++) {\n            const wx = baseX + c * (winW + gapX);\n            const wy = baseY + r * (winH + gapY);\n            renderer.drawRectangle(new Vector2(wx, wy), winW, winH, '#96b6ff');\n          }\n        }\n        break;\n      }\n      case 'low': {\n        // Few vents/windows (deterministic)\n        const vents = Math.max(3, Math.floor(building.width / 50));\n        const w = 16;\n        const h = 10;\n        const gap = 12;\n        const total = vents * w + (vents - 1) * gap;\n        let x = pos.x - total / 2;\n        const y = pos.y + building.height / 2 - h / 2;\n        for (let i = 0; i < vents; i++) {\n          renderer.drawRectangle(new Vector2(x, y), w, h, '#9aa7b7');\n          x += w + gap;\n        }\n        break;\n      }\n      case 'box': {\n        // Framed short building (already drawn outline in render)\n        const cols = Math.max(3, Math.floor(building.width / 50));\n        const w = 10;\n        const h = 14;\n        const gap = (building.width - cols * w) / (cols + 1);\n        const baseX = pos.x - building.width / 2 + gap;\n        const baseY = pos.y + building.height / 2 - h / 2;\n        for (let c = 0; c < cols; c++) {\n          const wx = baseX + c * (w + gap);\n          renderer.drawRectangle(new Vector2(wx, baseY), w, h, '#9fc3ff');\n        }\n        break;\n      }\n    }\n  }\n}\n","import { Vector2 } from '../physics/Vector2.js';\n\n// Canvas 2D renderer for the game. Keeps world units and handles camera\n// transforms so drawing code stays simple.\nexport class CanvasRenderer {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private camera: Camera | null = null;\n  private pixelRatio: number;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Could not get 2D rendering context');\n    }\n    this.context = ctx;\n    this.pixelRatio = window.devicePixelRatio || 1;\n    this.setupCanvas();\n  }\n\n  /**\n   * Initialize canvas with proper sizing and pixel ratio\n   */\n  private setupCanvas(): void {\n    const rect = this.canvas.getBoundingClientRect();\n\n    // Refresh DPR every time (browser zoom can change it)\n    this.pixelRatio = window.devicePixelRatio || 1;\n\n    // Set backing store size in device pixels\n    const w = Math.max(1, Math.floor(rect.width * this.pixelRatio));\n    const h = Math.max(1, Math.floor(rect.height * this.pixelRatio));\n    if (this.canvas.width !== w) this.canvas.width = w;\n    if (this.canvas.height !== h) this.canvas.height = h;\n\n    // Reset then scale to avoid compounding on repeated setup\n    this.context.setTransform(1, 0, 0, 1, 0, 0);\n    this.context.scale(this.pixelRatio, this.pixelRatio); // device-pixel aware\n\n    // Set CSS size (logical pixels)\n    this.canvas.style.width = `${rect.width}px`;\n    this.canvas.style.height = `${rect.height}px`;\n  }\n\n  // Detect browser zoom (DPR) changes even when no resize fires\n  private refreshDprIfNeeded(): void {\n    const dpr = window.devicePixelRatio || 1;\n    if (Math.abs(dpr - this.pixelRatio) > 1e-3) {\n      this.pixelRatio = dpr;\n      this.setupCanvas();\n    }\n  }\n\n  /**\n   * Set the camera for world-to-screen transformations\n   * @param camera Camera instance\n   */\n  setCamera(camera: Camera): void {\n    this.camera = camera;\n  }\n\n  /**\n   * Clear the canvas\n   */\n  clear(): void {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  /**\n   * Begin rendering frame\n   */\n  beginFrame(): void {\n    // Keep canvas backing store in sync with DPR changes\n    this.refreshDprIfNeeded();\n    this.context.save();\n\n    if (this.camera) {\n      // Apply camera transformation\n      const centerX = this.canvas.width / (2 * this.pixelRatio);\n      const centerY = this.canvas.height / (2 * this.pixelRatio);\n\n      this.context.translate(centerX, centerY);\n      this.context.scale(this.camera.zoom, -this.camera.zoom); // Flip Y axis\n      // Rotate world so that local \"+Y\" (up from planet) stays at screen top when requested\n      const rot = this.camera.rotation || 0;\n      if (rot !== 0) this.context.rotate(-rot);\n      this.context.translate(-this.camera.position.x, -this.camera.position.y);\n    }\n  }\n\n  /**\n   * End rendering frame\n   */\n  endFrame(): void {\n    this.context.restore();\n  }\n\n  /**\n   * Draw a circle\n   * @param center Center position\n   * @param radius Radius\n   * @param fillColor Fill color (optional)\n   * @param strokeColor Stroke color (optional)\n   * @param lineWidth Line width (optional)\n   */\n  drawCircle(\n    center: Vector2,\n    radius: number,\n    fillColor?: string,\n    strokeColor?: string,\n    lineWidth = 1\n  ): void {\n    this.context.beginPath();\n    this.context.arc(center.x, center.y, radius, 0, 2 * Math.PI);\n\n    if (fillColor) {\n      this.context.fillStyle = fillColor;\n      this.context.fill();\n    }\n\n    if (strokeColor) {\n      this.context.strokeStyle = strokeColor;\n      this.context.lineWidth = lineWidth;\n      this.context.stroke();\n    }\n  }\n\n  /**\n   * Draw a rectangle\n   * @param position Top-left position\n   * @param width Width\n   * @param height Height\n   * @param fillColor Fill color (optional)\n   * @param strokeColor Stroke color (optional)\n   * @param lineWidth Line width (optional)\n   */\n  drawRectangle(\n    position: Vector2,\n    width: number,\n    height: number,\n    fillColor?: string,\n    strokeColor?: string,\n    lineWidth = 1\n  ): void {\n    if (fillColor) {\n      this.context.fillStyle = fillColor;\n      this.context.fillRect(position.x, position.y, width, height);\n    }\n\n    if (strokeColor) {\n      this.context.strokeStyle = strokeColor;\n      this.context.lineWidth = lineWidth;\n      this.context.strokeRect(position.x, position.y, width, height);\n    }\n  }\n\n  /**\n   * Draw a line\n   * @param start Start position\n   * @param end End position\n   * @param color Line color\n   * @param lineWidth Line width\n   */\n  drawLine(start: Vector2, end: Vector2, color: string, lineWidth = 1): void {\n    this.context.beginPath();\n    this.context.moveTo(start.x, start.y);\n    this.context.lineTo(end.x, end.y);\n    this.context.strokeStyle = color;\n    this.context.lineWidth = lineWidth;\n    this.context.stroke();\n  }\n\n  /**\n   * Draw text\n   * @param text Text to draw\n   * @param position Position\n   * @param color Text color\n   * @param font Font specification\n   * @param align Text alignment\n   */\n  drawText(\n    text: string,\n    position: Vector2,\n    color = '#ffffff',\n    font = '16px monospace',\n    align: CanvasTextAlign = 'left'\n  ): void {\n    this.context.fillStyle = color;\n    this.context.font = font;\n    this.context.textAlign = align;\n    this.context.fillText(text, position.x, position.y);\n  }\n\n  /**\n   * Draw a rotated sprite/shape\n   * @param position Center position\n   * @param rotation Rotation in radians\n   * @param drawFunction Function to draw the shape\n   */\n  drawRotated(position: Vector2, rotation: number, drawFunction: () => void): void {\n    this.context.save();\n    this.context.translate(position.x, position.y);\n    this.context.rotate(rotation);\n    drawFunction();\n    this.context.restore();\n  }\n\n  /**\n   * Draw a sprite (image) with rotation and scaling\n   * @param image Image or canvas to draw\n   * @param position Center position\n   * @param width Width to draw (optional, uses image width if not specified)\n   * @param height Height to draw (optional, uses image height if not specified)\n   * @param rotation Rotation in radians (optional)\n   * @param scaleX Horizontal scale factor (optional, default 1)\n   * @param scaleY Vertical scale factor (optional, default 1)\n   */\n  drawSprite(\n    image: HTMLImageElement | HTMLCanvasElement,\n    position: Vector2,\n    width?: number,\n    height?: number,\n    rotation = 0,\n    scaleX = 1,\n    scaleY = 1\n  ): void {\n    const drawWidth = width ?? image.width;\n    const drawHeight = height ?? image.height;\n\n    this.context.save();\n\n    // Enable high-quality image smoothing for better appearance when zoomed\n    this.context.imageSmoothingEnabled = true;\n    this.context.imageSmoothingQuality = 'high';\n\n    // Move to position and apply transformations\n    this.context.translate(position.x, position.y);\n    if (rotation !== 0) {\n      this.context.rotate(rotation);\n    }\n    if (scaleX !== 1 || scaleY !== 1) {\n      this.context.scale(scaleX, scaleY);\n    }\n    // Compensate the world Y-up transform (camera flips Y). Without this,\n    // bitmaps would render upside down compared to vector shapes.\n    this.context.scale(1, -1);\n\n    // Draw image centered at the transformed origin\n    this.context.drawImage(image, -drawWidth / 2, -drawHeight / 2, drawWidth, drawHeight);\n\n    this.context.restore();\n  }\n\n  /**\n   * Convert world coordinates to screen coordinates\n   * @param worldPos World position\n   * @returns Screen position\n   */\n  worldToScreen(worldPos: Vector2): Vector2 {\n    if (!this.camera) return worldPos.clone();\n\n    const centerX = this.canvas.width / (2 * this.pixelRatio);\n    const centerY = this.canvas.height / (2 * this.pixelRatio);\n\n    const relativePos = worldPos.subtract(this.camera.position);\n    const screenX = centerX + relativePos.x * this.camera.zoom;\n    const screenY = centerY - relativePos.y * this.camera.zoom; // Flip Y\n\n    return new Vector2(screenX, screenY);\n  }\n\n  /**\n   * Fill screen with a radial gradient defined in world coordinates.\n   * Center and radii are mapped to screen space using the current camera.\n   */\n  fillRadialGradientWorld(\n    centerWorld: Vector2,\n    innerRadiusWorld: number,\n    outerRadiusWorld: number,\n    innerColor: string,\n    outerColor: string\n  ): void {\n    const ctx = this.context;\n    const centerScreen = this.worldToScreen(centerWorld);\n    const zoom = this.camera ? this.camera.zoom : 1;\n    const r0 = Math.max(0, innerRadiusWorld * zoom);\n    const r1 = Math.max(r0 + 1, outerRadiusWorld * zoom);\n\n    ctx.save();\n    // Draw in screen space\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    const grad = ctx.createRadialGradient(\n      centerScreen.x,\n      centerScreen.y,\n      r0,\n      centerScreen.x,\n      centerScreen.y,\n      r1\n    );\n    grad.addColorStop(0, innerColor);\n    grad.addColorStop(1, outerColor);\n    ctx.fillStyle = grad;\n    // Fill the visible canvas (CSS pixels)\n    const w = this.canvas.width / this.pixelRatio;\n    const h = this.canvas.height / this.pixelRatio;\n    ctx.fillRect(0, 0, w, h);\n    ctx.restore();\n  }\n\n  /**\n   * Convert screen coordinates to world coordinates\n   * @param screenPos Screen position\n   * @returns World position\n   */\n  screenToWorld(screenPos: Vector2): Vector2 {\n    if (!this.camera) return screenPos.clone();\n\n    const centerX = this.canvas.width / (2 * this.pixelRatio);\n    const centerY = this.canvas.height / (2 * this.pixelRatio);\n\n    const relativeX = (screenPos.x - centerX) / this.camera.zoom;\n    const relativeY = -(screenPos.y - centerY) / this.camera.zoom; // Flip Y\n\n    return this.camera.position.add(new Vector2(relativeX, relativeY));\n  }\n\n  /**\n   * Handle canvas resize\n   */\n  handleResize(): void {\n    this.setupCanvas();\n  }\n\n  /**\n   * Get canvas dimensions\n   * @returns Canvas size\n   */\n  getSize(): Vector2 {\n    return new Vector2(this.canvas.width / this.pixelRatio, this.canvas.height / this.pixelRatio);\n  }\n\n  /**\n   * Access the underlying 2D context (screen space)\n   */\n  getContext2D(): CanvasRenderingContext2D {\n    return this.context;\n  }\n}\n\n// Camera class for view management\nexport class Camera {\n  public position: Vector2;\n  public zoom: number;\n  public target: Vector2 | null = null;\n  public rotation = 0; // radians; positive rotates world counter‑clockwise\n\n  private followSpeed = 2.0;\n  private zoomSpeed = 1.0;\n\n  constructor(position: Vector2 = Vector2.zero(), zoom = 1.0) {\n    this.position = position.clone();\n    this.zoom = zoom;\n  }\n\n  /**\n   * Update camera position and zoom\n   * @param deltaTime Frame time\n   */\n  update(deltaTime: number): void {\n    if (this.target) {\n      // Smooth follow target\n      const direction = this.target.subtract(this.position);\n      const distance = direction.magnitude();\n\n      if (distance > 1) {\n        const moveAmount = this.followSpeed * deltaTime;\n        const movement = direction.normalized().multiply(Math.min(moveAmount * distance, distance));\n        this.position = this.position.add(movement);\n      }\n    }\n  }\n\n  /**\n   * Set camera target to follow\n   * @param target Target position\n   */\n  setTarget(target: Vector2 | null): void {\n    this.target = target?.clone() || null;\n  }\n\n  /**\n   * Set camera zoom with limits\n   * @param zoom New zoom level\n   */\n  setZoom(zoom: number): void {\n    this.zoom = Math.max(0.0007, Math.min(2.0, zoom));\n  }\n\n  /**\n   * Move camera by offset\n   * @param offset Movement offset\n   */\n  move(offset: Vector2): void {\n    this.position = this.position.add(offset);\n  }\n\n  /**\n   * Set camera position directly\n   * @param position New position\n   */\n  setPosition(position: Vector2): void {\n    this.position = position.clone();\n  }\n\n  /** Set camera rotation (radians) */\n  setRotation(radians: number): void {\n    this.rotation = radians;\n  }\n}\n","export class CloudSystem {\n  private cloudTextures: Map<string, HTMLCanvasElement> = new Map();\n  private cloudLayers: CloudLayer[] = [];\n\n  constructor() {\n    this.generateCloudTextures();\n    this.initializeLayers();\n  }\n\n  private generateCloudTextures(): void {\n    // Generate cumulus cloud texture (low altitude, puffy)\n    this.cloudTextures.set('cumulus', this.createCumulusTexture(256));\n  }\n\n  private createCumulusTexture(size: number): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    canvas.width = size;\n    canvas.height = size;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return canvas;\n\n    // Clear with transparency\n    ctx.clearRect(0, 0, size, size);\n\n    // Create puffy cumulus clouds using multiple overlapping circles\n    const numClouds = 3 + Math.random() * 2;\n    for (let i = 0; i < numClouds; i++) {\n      const x = size * (0.2 + Math.random() * 0.6);\n      const y = size * (0.3 + Math.random() * 0.4);\n      const radius = size * (0.15 + Math.random() * 0.1);\n\n      // Create gradient for each cloud puff\n      const grad = ctx.createRadialGradient(x, y, 0, x, y, radius);\n      grad.addColorStop(0, 'rgba(255, 255, 255, 0.9)');\n      grad.addColorStop(0.4, 'rgba(255, 255, 255, 0.7)');\n      grad.addColorStop(0.8, 'rgba(240, 245, 250, 0.4)');\n      grad.addColorStop(1, 'rgba(240, 245, 250, 0)');\n\n      ctx.fillStyle = grad;\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, Math.PI * 2);\n      ctx.fill();\n\n      // Add smaller puffs around main cloud\n      for (let j = 0; j < 4; j++) {\n        const angle = (j / 4) * Math.PI * 2;\n        const puffX = x + Math.cos(angle) * radius * 0.6;\n        const puffY = y + Math.sin(angle) * radius * 0.5;\n        const puffRadius = radius * (0.4 + Math.random() * 0.2);\n\n        const puffGrad = ctx.createRadialGradient(puffX, puffY, 0, puffX, puffY, puffRadius);\n        puffGrad.addColorStop(0, 'rgba(255, 255, 255, 0.8)');\n        puffGrad.addColorStop(0.6, 'rgba(250, 252, 255, 0.5)');\n        puffGrad.addColorStop(1, 'rgba(250, 252, 255, 0)');\n\n        ctx.fillStyle = puffGrad;\n        ctx.beginPath();\n        ctx.arc(puffX, puffY, puffRadius, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    return canvas;\n  }\n\n  private createStratusTexture(size: number): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    canvas.width = size;\n    canvas.height = size;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return canvas;\n\n    ctx.clearRect(0, 0, size, size);\n\n    // Create horizontal layered stratus clouds\n    const numLayers = 2 + Math.random() * 2;\n    for (let i = 0; i < numLayers; i++) {\n      const y = size * (0.3 + i * 0.15 + Math.random() * 0.1);\n      const height = size * (0.08 + Math.random() * 0.04);\n\n      // Horizontal gradient for layer effect\n      const grad = ctx.createLinearGradient(0, y - height / 2, 0, y + height / 2);\n      grad.addColorStop(0, 'rgba(230, 235, 240, 0)');\n      grad.addColorStop(0.2, 'rgba(230, 235, 240, 0.3)');\n      grad.addColorStop(0.5, 'rgba(245, 248, 250, 0.5)');\n      grad.addColorStop(0.8, 'rgba(230, 235, 240, 0.3)');\n      grad.addColorStop(1, 'rgba(230, 235, 240, 0)');\n\n      ctx.fillStyle = grad;\n\n      // Create wavy layer using bezier curves\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      for (let x = 0; x <= size; x += size / 8) {\n        const wave = Math.sin((x / size) * Math.PI * 4) * height * 0.3;\n        ctx.lineTo(x, y + wave);\n      }\n      ctx.lineTo(size, y + height);\n      ctx.lineTo(0, y + height);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    return canvas;\n  }\n\n  private createCirrusTexture(size: number): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    canvas.width = size;\n    canvas.height = size;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return canvas;\n\n    ctx.clearRect(0, 0, size, size);\n\n    // Create wispy cirrus clouds using thin strokes\n    const numWisps = 4 + Math.random() * 3;\n    for (let i = 0; i < numWisps; i++) {\n      ctx.save();\n\n      const startX = Math.random() * size;\n      const startY = size * (0.2 + Math.random() * 0.6);\n      const length = size * (0.3 + Math.random() * 0.4);\n      const angle = -Math.PI / 6 + (Math.random() * Math.PI) / 3;\n\n      ctx.translate(startX, startY);\n      ctx.rotate(angle);\n\n      // Create gradient along the wisp\n      const grad = ctx.createLinearGradient(0, 0, length, 0);\n      grad.addColorStop(0, 'rgba(255, 255, 255, 0)');\n      grad.addColorStop(0.2, 'rgba(255, 255, 255, 0.15)');\n      grad.addColorStop(0.5, 'rgba(255, 255, 255, 0.25)');\n      grad.addColorStop(0.8, 'rgba(255, 255, 255, 0.15)');\n      grad.addColorStop(1, 'rgba(255, 255, 255, 0)');\n\n      ctx.strokeStyle = grad;\n      ctx.lineWidth = 2 + Math.random() * 3;\n      ctx.lineCap = 'round';\n\n      // Draw wispy path\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      const segments = 8;\n      for (let j = 1; j <= segments; j++) {\n        const x = (j / segments) * length;\n        const y = Math.sin((j / segments) * Math.PI * 2) * (3 + Math.random() * 2);\n        ctx.lineTo(x, y);\n      }\n      ctx.stroke();\n\n      ctx.restore();\n    }\n\n    return canvas;\n  }\n\n  private initializeLayers(): void {\n    // Low altitude cumulus clouds (2-4 km) - just a few\n    this.cloudLayers.push({\n      altitude: 3000,\n      rotationSpeed: 0.00001, // Slightly slower than planet\n      clouds: this.generateCloudPositions('cumulus', 6, 0.8),\n    });\n\n    // Another layer slightly higher for depth\n    this.cloudLayers.push({\n      altitude: 5000,\n      rotationSpeed: 0.000008,\n      clouds: this.generateCloudPositions('cumulus', 4, 0.6),\n    });\n  }\n\n  private generateCloudPositions(type: string, count: number, coverage: number): Cloud[] {\n    const clouds: Cloud[] = [];\n\n    // Launch pad is at top (π/2 radians), so avoid angles near that\n    const launchAngle = Math.PI / 2;\n    const exclusionZone = Math.PI / 3; // 60 degrees exclusion zone around launch area\n\n    for (let i = 0; i < count; i++) {\n      // Distribute clouds evenly but skip the launch area\n      let baseAngle = (i / count) * Math.PI * 2;\n\n      // Adjust angles to avoid the launch area at the top\n      if (Math.abs(baseAngle - launchAngle) < exclusionZone) {\n        // Shift cloud away from launch area\n        if (baseAngle < launchAngle) {\n          baseAngle = launchAngle - exclusionZone;\n        } else {\n          baseAngle = launchAngle + exclusionZone;\n        }\n      }\n\n      const angleVariation = (Math.random() - 0.5) * ((Math.PI * 2) / count) * 0.5;\n      let angle = baseAngle + angleVariation;\n\n      // Double-check we're not in the exclusion zone after variation\n      if (Math.abs(angle - launchAngle) < exclusionZone * 0.8) {\n        // Push it further away\n        angle = angle < launchAngle ? launchAngle - exclusionZone : launchAngle + exclusionZone;\n      }\n\n      clouds.push({\n        type,\n        angle,\n        latitudeOffset: 0,\n        scale: 1.2 + Math.random() * 0.6, // Bigger clouds\n        opacity: 0.7 + Math.random() * 0.2, // More opaque\n      });\n    }\n\n    return clouds;\n  }\n\n  public render(\n    ctx: CanvasRenderingContext2D,\n    planetCenter: { x: number; y: number },\n    planetRadius: number,\n    currentTime: number,\n    planetRotation: number\n  ): void {\n    ctx.save();\n\n    // Render each cloud layer\n    for (const layer of this.cloudLayers) {\n      const layerRadius = planetRadius + (layer.altitude / 6371000) * planetRadius;\n      const rotation = planetRotation + layer.rotationSpeed * currentTime;\n\n      for (const cloud of layer.clouds) {\n        const cloudAngle = cloud.angle + rotation;\n\n        // Calculate cloud position around the planet\n        const x = planetCenter.x + Math.cos(cloudAngle) * layerRadius;\n        const y = planetCenter.y + Math.sin(cloudAngle) * layerRadius;\n\n        // Get texture\n        const texture = this.cloudTextures.get(cloud.type);\n        if (!texture) continue;\n\n        // Check if cloud is visible (not behind planet from viewer's perspective)\n        // Simple check: if cloud is within planet radius from center, it might be visible\n        const distFromCenter = Math.sqrt(x * x + y * y);\n        const isNearEdge = Math.abs(distFromCenter - planetRadius) < planetRadius * 0.3;\n\n        // Scale clouds - make them bigger\n        const size = planetRadius * 0.25 * cloud.scale;\n\n        // Set opacity\n        ctx.globalAlpha = cloud.opacity * 0.8;\n\n        // Draw cloud\n        ctx.drawImage(texture, x - size / 2, y - size / 2, size, size);\n      }\n    }\n\n    ctx.restore();\n  }\n}\n\ninterface CloudLayer {\n  altitude: number; // meters above surface\n  rotationSpeed: number; // radians per second\n  clouds: Cloud[];\n}\n\ninterface Cloud {\n  type: string;\n  angle: number; // position around planet\n  latitudeOffset: number; // north/south offset\n  scale: number;\n  opacity: number;\n}\n","export function drawCartoonLand(ctx: CanvasRenderingContext2D, R: number): void {\n  const fill = (fn: () => void, color = '#2f7f3a') => {\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    fn();\n    ctx.fill();\n  };\n\n  // Americas (rough blob)\n  fill(() => {\n    ctx.moveTo(-0.55 * R, 0.1 * R);\n    ctx.bezierCurveTo(-0.7 * R, 0.35 * R, -0.42 * R, 0.5 * R, -0.3 * R, 0.32 * R);\n    ctx.bezierCurveTo(-0.28 * R, 0.18 * R, -0.26 * R, 0.05 * R, -0.24 * R, -0.03 * R);\n    ctx.bezierCurveTo(-0.27 * R, -0.2 * R, -0.38 * R, -0.28 * R, -0.52 * R, -0.36 * R);\n    ctx.bezierCurveTo(-0.62 * R, -0.22 * R, -0.63 * R, -0.04 * R, -0.55 * R, 0.1 * R);\n  });\n\n  // Africa + Europe\n  fill(() => {\n    ctx.moveTo(0.2 * R, 0.2 * R);\n    ctx.bezierCurveTo(0.36 * R, 0.26 * R, 0.42 * R, 0.1 * R, 0.34 * R, -0.02 * R);\n    ctx.bezierCurveTo(0.28 * R, -0.1 * R, 0.22 * R, -0.1 * R, 0.16 * R, -0.12 * R);\n    ctx.bezierCurveTo(0.1 * R, -0.06 * R, 0.06 * R, 0.06 * R, 0.08 * R, 0.16 * R);\n    ctx.bezierCurveTo(0.12 * R, 0.24 * R, 0.16 * R, 0.24 * R, 0.2 * R, 0.2 * R);\n  });\n\n  // Asia extension\n  fill(() => {\n    ctx.moveTo(0.34 * R, -0.02 * R);\n    ctx.bezierCurveTo(0.5 * R, 0.04 * R, 0.54 * R, 0.16 * R, 0.46 * R, 0.28 * R);\n    ctx.bezierCurveTo(0.38 * R, 0.34 * R, 0.3 * R, 0.3 * R, 0.24 * R, 0.26 * R);\n    ctx.bezierCurveTo(0.32 * R, 0.18 * R, 0.34 * R, 0.1 * R, 0.34 * R, -0.02 * R);\n  });\n\n  // Greenland / north islands\n  fill(() => {\n    ctx.moveTo(-0.12 * R, 0.5 * R);\n    ctx.bezierCurveTo(-0.02 * R, 0.56 * R, 0.05 * R, 0.48 * R, 0.02 * R, 0.4 * R);\n    ctx.bezierCurveTo(-0.04 * R, 0.38 * R, -0.08 * R, 0.4 * R, -0.12 * R, 0.5 * R);\n  }, '#2e7f3a');\n\n  // Small Caribbean/med islands\n  const islands: Array<[number, number, number, number]> = [\n    [-0.36, 0.16, 0.06, 0.04],\n    [-0.3, 0.06, 0.04, 0.03],\n    [0.18, 0.05, 0.05, 0.03],\n  ];\n  ctx.fillStyle = '#2f7f3a';\n  for (const [ix, iy, sx, sy] of islands) {\n    ctx.beginPath();\n    ctx.ellipse(ix * R, iy * R, sx * R, sy * R, 0, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\n","import { drawCartoonLand } from './PlanetShapes.js';\n\nconst cache = new Map<number, HTMLCanvasElement>();\n\nexport function getPlanetTexture(size: number): HTMLCanvasElement {\n  const key = Math.max(32, Math.floor(size));\n  const found = cache.get(key);\n  if (found) return found;\n\n  const c = document.createElement('canvas');\n  c.width = key;\n  c.height = key;\n  const ctx = c.getContext('2d');\n  if (!ctx) return c;\n\n  // Enable anti-aliasing for smoother edges\n  ctx.imageSmoothingEnabled = true;\n  ctx.imageSmoothingQuality = 'high';\n\n  const R = key / 2;\n\n  // Ocean base - fully opaque\n  ctx.fillStyle = '#0b3766';\n  ctx.beginPath();\n  ctx.arc(R, R, R, 0, Math.PI * 2);\n  ctx.fill();\n\n  // Clip to disc and translate to center for world-space helpers\n  ctx.save();\n  ctx.beginPath();\n  ctx.arc(R, R, R, 0, Math.PI * 2);\n  ctx.clip();\n  ctx.translate(R, R);\n\n  // Land masses moved away from polar cap\n  ctx.save();\n  ctx.scale(1, 0.82);\n  ctx.translate(0, R * 0.18);\n  drawCartoonLand(ctx, R);\n  ctx.restore();\n\n  // Launchpad continent at the right (0 radians / east)\n  // When the planet rotates by padBaseAngle (π/2) counterclockwise,\n  // the right side (east) will rotate to the top\n  ctx.fillStyle = '#2f7f3a';\n  ctx.beginPath();\n  // Start from the very right edge and create a large continent\n  const rightX = R; // Full radius - at the very edge (east)\n  const rightY = 0;\n  ctx.moveTo(rightX, rightY - R * 0.25);\n  ctx.lineTo(rightX, rightY + R * 0.25);\n  // Create irregular coastline going left (inland)\n  ctx.bezierCurveTo(\n    rightX - R * 0.1,\n    rightY + R * 0.3,\n    rightX - R * 0.2,\n    rightY + R * 0.35,\n    rightX - R * 0.35,\n    rightY + R * 0.3\n  );\n  ctx.bezierCurveTo(\n    rightX - R * 0.45,\n    rightY + R * 0.25,\n    rightX - R * 0.5,\n    rightY + R * 0.15,\n    rightX - R * 0.48,\n    rightY + R * 0.08\n  );\n  ctx.lineTo(rightX - R * 0.48, rightY - R * 0.08);\n  ctx.bezierCurveTo(\n    rightX - R * 0.5,\n    rightY - R * 0.15,\n    rightX - R * 0.45,\n    rightY - R * 0.25,\n    rightX - R * 0.35,\n    rightY - R * 0.3\n  );\n  ctx.bezierCurveTo(\n    rightX - R * 0.2,\n    rightY - R * 0.35,\n    rightX - R * 0.1,\n    rightY - R * 0.3,\n    rightX,\n    rightY - R * 0.25\n  );\n  ctx.closePath();\n  ctx.fill();\n\n  // No additional bulges - keep the continent uniform\n\n  // Polar cap at center with hard edge (no transparency)\n  const capR = R * 0.34;\n\n  // Ice cap base\n  ctx.fillStyle = '#e8f4ff';\n  ctx.beginPath();\n  ctx.arc(0, 0, capR, 0, Math.PI * 2);\n  ctx.fill();\n\n  // Ice cap detail layers\n  ctx.fillStyle = '#f0f8ff';\n  ctx.beginPath();\n  ctx.arc(0, 0, capR * 0.7, 0, Math.PI * 2);\n  ctx.fill();\n\n  ctx.fillStyle = '#f8fcff';\n  ctx.beginPath();\n  ctx.arc(0, 0, capR * 0.4, 0, Math.PI * 2);\n  ctx.fill();\n\n  // Add some irregular ice edges\n  ctx.fillStyle = '#e8f4ff';\n  for (let i = 0; i < 8; i++) {\n    const angle = (i / 8) * Math.PI * 2;\n    const wobble = 0.9 + Math.sin(i * 1.7) * 0.15;\n    const blobR = capR * 0.15 * wobble;\n    const blobX = Math.cos(angle) * capR * 0.85;\n    const blobY = Math.sin(angle) * capR * 0.85;\n    ctx.beginPath();\n    ctx.arc(blobX, blobY, blobR, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  // Atmosphere edge - very subtle, fully opaque gradient\n  const edgeWidth = R * 0.03;\n  const atmGrad = ctx.createRadialGradient(0, 0, R - edgeWidth, 0, 0, R);\n  atmGrad.addColorStop(0, 'rgba(0, 0, 0, 0)');\n  atmGrad.addColorStop(0.7, 'rgba(0, 0, 0, 0)');\n  atmGrad.addColorStop(1, 'rgba(135, 206, 235, 0.15)');\n  ctx.fillStyle = atmGrad;\n  ctx.beginPath();\n  ctx.arc(0, 0, R, 0, Math.PI * 2);\n  ctx.fill();\n\n  ctx.restore();\n  cache.set(key, c);\n  return c;\n}\n","import { Vector2 } from '../physics/Vector2.js';\nimport type { WorldParameters } from '../physics/WorldParameters.js';\nimport type { CanvasRenderer } from './CanvasRenderer.js';\nimport { CloudSystem } from './CloudSystem.js';\nimport { getPlanetTexture } from './PlanetTextureGen.js';\n\n/**\n * Handles all planet-related rendering: texture, clouds, atmosphere, sky gradient\n */\nexport class PlanetRenderer {\n  private planetTexture?: HTMLCanvasElement;\n  private cloudSystem: CloudSystem;\n\n  constructor() {\n    this.cloudSystem = new CloudSystem();\n    this.initializePlanetTexture();\n  }\n\n  private initializePlanetTexture(): void {\n    try {\n      this.planetTexture = getPlanetTexture(2048); // High resolution for zoom\n    } catch (e) {\n      console.warn('Failed to generate planet texture:', e);\n    }\n  }\n\n  /**\n   * Main render method - draws complete planet system\n   */\n  public render(\n    renderer: CanvasRenderer,\n    world: WorldParameters,\n    currentTime: number,\n    rocketPosition: Vector2,\n    padBaseAngle: number\n  ): void {\n    const planetCenter = Vector2.zero();\n    const planetRadius = world.planetRadius;\n    const rocketAltitude = world.getAltitude(rocketPosition.magnitude());\n\n    // 1. Sky gradient background (screen space)\n    this.drawSkyGradient(renderer, rocketAltitude);\n\n    // 2. Planet texture with rotation\n    this.drawPlanetTexture(renderer, planetCenter, planetRadius, world, currentTime, padBaseAngle);\n\n    // 3. Cloud layers\n    this.drawClouds(renderer, planetCenter, planetRadius, world, currentTime, padBaseAngle);\n\n    // 4. Atmosphere layers\n    this.drawAtmosphere(renderer, planetCenter, planetRadius, rocketAltitude);\n  }\n\n  /**\n   * Draw sky gradient that changes with altitude\n   */\n  private drawSkyGradient(renderer: CanvasRenderer, altitude: number): void {\n    const ctx = renderer.getContext2D();\n    if (!ctx) return;\n\n    const wDev = ctx.canvas.width; // device pixels\n    const hDev = ctx.canvas.height; // device pixels\n    const cssW = ctx.canvas.clientWidth || wDev;\n    const cssH = ctx.canvas.clientHeight || hDev;\n\n    // Skip gradient on very small screens\n    const tooSmall = cssW < 480 || cssH < 380;\n    if (tooSmall) return;\n\n    // Skip gradient completely at high altitude (>= 200 km)\n    if (altitude >= 200_000) return;\n\n    // Blend colors based on altitude\n    const maxAlt = 175_000; // Start fading at 175 km\n    const t = Math.min(1, altitude / maxAlt);\n\n    // Interpolate between sky blue and space black\n    const r = Math.round(135 * (1 - t));\n    const g = Math.round(206 * (1 - t));\n    const b = Math.round(235 * (1 - t));\n\n    // Create vertical gradient\n    const grad = ctx.createLinearGradient(0, 0, 0, hDev);\n    const topColor = `rgb(${Math.round(r * 0.15)}, ${Math.round(g * 0.15)}, ${Math.round(b * 0.15)})`;\n    const bottomColor = `rgb(${r}, ${g}, ${b})`;\n\n    grad.addColorStop(0, topColor);\n    grad.addColorStop(1, bottomColor);\n\n    ctx.save();\n    ctx.fillStyle = grad;\n    ctx.fillRect(0, 0, wDev, hDev);\n    ctx.restore();\n  }\n\n  /**\n   * Draw the planet texture with rotation\n   */\n  private drawPlanetTexture(\n    renderer: CanvasRenderer,\n    planetCenter: Vector2,\n    planetRadius: number,\n    world: WorldParameters,\n    currentTime: number,\n    padBaseAngle: number\n  ): void {\n    const omega = world.earthRotationRate || 0;\n    const worldAng = padBaseAngle + omega * currentTime;\n\n    if (this.planetTexture) {\n      const ctx = renderer.getContext2D();\n      ctx.save();\n\n      // Create circular clipping path for smooth edges\n      ctx.beginPath();\n      ctx.arc(planetCenter.x, planetCenter.y, planetRadius, 0, Math.PI * 2);\n      ctx.clip();\n\n      // Draw the planet texture (clipped to circle)\n      renderer.drawSprite(\n        this.planetTexture,\n        planetCenter,\n        planetRadius * 2,\n        planetRadius * 2,\n        worldAng\n      );\n\n      ctx.restore();\n    } else {\n      // Fallback if texture fails\n      renderer.drawCircle(planetCenter, planetRadius, '#0b3766', '#2d3a16', 2);\n    }\n  }\n\n  /**\n   * Draw cloud layers\n   */\n  private drawClouds(\n    renderer: CanvasRenderer,\n    planetCenter: Vector2,\n    planetRadius: number,\n    world: WorldParameters,\n    currentTime: number,\n    padBaseAngle: number\n  ): void {\n    const omega = world.earthRotationRate || 0;\n    const planetRotation = padBaseAngle + omega * currentTime;\n\n    const ctx = renderer.getContext2D();\n\n    // Clouds are rendered in world space, same as planet\n    this.cloudSystem.render(\n      ctx,\n      { x: planetCenter.x, y: planetCenter.y },\n      planetRadius,\n      currentTime,\n      planetRotation\n    );\n  }\n\n  /**\n   * Draw atmosphere layers\n   */\n  private drawAtmosphere(\n    renderer: CanvasRenderer,\n    planetCenter: Vector2,\n    planetRadius: number,\n    altitude: number\n  ): void {\n    // Don't draw atmosphere in space (> 100km)\n    if (altitude > 100_000) return;\n\n    // Atmosphere intensity fades with altitude\n    const atmosphereIntensity = Math.max(0, 1 - altitude / 100_000);\n\n    // Draw multiple atmosphere layers\n    const layers = [\n      { radius: planetRadius * 1.02, alpha: 0.03 * atmosphereIntensity },\n      { radius: planetRadius * 1.04, alpha: 0.02 * atmosphereIntensity },\n      { radius: planetRadius * 1.06, alpha: 0.015 * atmosphereIntensity },\n      { radius: planetRadius * 1.08, alpha: 0.01 * atmosphereIntensity },\n    ];\n\n    const ctx = renderer.getContext2D();\n    ctx.save();\n\n    for (const layer of layers) {\n      const gradient = ctx.createRadialGradient(\n        planetCenter.x,\n        planetCenter.y,\n        planetRadius,\n        planetCenter.x,\n        planetCenter.y,\n        layer.radius\n      );\n\n      gradient.addColorStop(0, 'rgba(135, 206, 235, 0)');\n      gradient.addColorStop(0.7, `rgba(135, 206, 235, ${layer.alpha * 0.5})`);\n      gradient.addColorStop(1, `rgba(135, 206, 235, ${layer.alpha})`);\n\n      ctx.fillStyle = gradient;\n      ctx.beginPath();\n      ctx.arc(planetCenter.x, planetCenter.y, layer.radius, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    ctx.restore();\n  }\n}\n","import type { RocketState } from '../core/types.js';\nimport { Vector2 } from '../physics/Vector2.js';\nimport type { CanvasRenderer } from './CanvasRenderer.js';\n\nexport interface RocketVisualConfig {\n  // Stage dimensions (from bottom to top)\n  stage1Width: number;\n  stage1Height: number;\n  stage2Width: number;\n  stage2Height: number;\n  payloadWidth: number;\n  payloadHeight: number;\n\n  // Colors - cartoonish but realistic\n  stage1Color: string;\n  stage1AccentColor: string;\n  stage2Color: string;\n  stage2AccentColor: string;\n  payloadColor: string;\n  payloadAccentColor: string;\n  exhaustColor: string;\n  exhaustCoreColor: string;\n\n  // Exhaust properties\n  exhaustLength: number;\n  exhaustWidth: number;\n\n  // Visual details\n  windowColor: string;\n  finColor: string;\n  fuelIndicatorBorder: string;\n}\n\n// Simple, stylized rocket drawing. Dimensions are tuned for readability,\n// not strict real-world scale.\nexport class RocketRenderer {\n  private config: RocketVisualConfig;\n  // Optional sprite support: full rocket and upper-stage-only skins\n  private spriteFull: HTMLImageElement | null = null;\n  private spriteUpper: HTMLImageElement | null = null;\n  private spritesLoaded = false;\n\n  constructor(config?: Partial<RocketVisualConfig>) {\n    this.config = {\n      // Better looking rocket design - larger and more detailed\n      stage1Width: 50,\n      stage1Height: 130,\n      stage2Width: 35,\n      stage2Height: 70,\n      payloadWidth: 25,\n      payloadHeight: 35,\n\n      // More realistic and attractive colors\n      stage1Color: '#f0f0f0', // Almost white main body\n      stage1AccentColor: '#2c5aa0', // NASA blue stripes\n      stage2Color: '#ffffff', // Pure white upper stage\n      stage2AccentColor: '#c0392b', // Deep red accent\n      payloadColor: '#e67e22', // Professional orange\n      payloadAccentColor: '#d35400', // Darker orange detail\n      exhaustColor: '#ff4500', // Orange red flame\n      exhaustCoreColor: '#ffff00', // Bright yellow core\n\n      exhaustLength: 25,\n      exhaustWidth: 12,\n\n      // Enhanced visual details\n      windowColor: '#4169e1', // Royal blue windows\n      finColor: '#2c3e50', // Dark metallic fins\n      fuelIndicatorBorder: '#34495e', // Dark border\n\n      ...config,\n    };\n\n    // Try to load optional sprites if present in /assets\n    // - /assets/rocket_full.png    (whole rocket)\n    // - /assets/upper_stage.png    (upper stage only)\n    // These are optional; renderer will fall back to vector shapes if missing.\n    try {\n      const tryLoad = (candidates: string[], set: (img: HTMLImageElement) => void) => {\n        const attempt = (idx: number) => {\n          if (idx >= candidates.length) return;\n          const img = new Image();\n          img.crossOrigin = 'anonymous';\n          img.onload = () => {\n            set(img);\n            this.spritesLoaded = true;\n          };\n          img.onerror = () => attempt(idx + 1);\n          img.src = candidates[idx];\n        };\n        attempt(0);\n      };\n      const meta = import.meta as unknown as { env?: { BASE_URL?: string } };\n      const withBase = (p: string) =>\n        meta.env?.BASE_URL\n          ? `${meta.env.BASE_URL.replace(/\\/+$/, '/')}${p.replace(/^\\/+/, '')}`\n          : `/${p.replace(/^\\/+/, '')}`;\n      tryLoad(\n        [\n          withBase('assets/rocket_full.png'),\n          withBase('assets/rocket_full.jpg'),\n          withBase('assets/rocket_full.jpeg'),\n          withBase('assets/rocket_full.webp'),\n        ],\n        (img) => {\n          this.spriteFull = img;\n        }\n      );\n      tryLoad(\n        [\n          withBase('assets/upper_stage.png'),\n          withBase('assets/upper_stage.jpg'),\n          withBase('assets/upper_stage.jpeg'),\n          withBase('assets/upper_stage.webp'),\n        ],\n        (img) => {\n          this.spriteUpper = img;\n        }\n      );\n    } catch {}\n  }\n\n  /**\n   * Render the rocket with current state. Keeps the rocket centered on its\n   * position to avoid visual snapping while rotating.\n   */\n  render(renderer: CanvasRenderer, rocketState: RocketState): void {\n    const position = rocketState.position;\n    const rotation = rocketState.visualRotation ?? rocketState.rotation;\n    const isEngineOn = rocketState.isEngineIgnited;\n    const throttle = rocketState.throttle;\n\n    // Compute total height to center the rocket around its position to avoid visual snapping\n    const totalDims = this.getRocketBounds(rocketState);\n    const yOffset = -totalDims.height / 2; // center vertically on position\n\n    // 0 rotation = rocket points up visually; use same sign as physics\n    renderer.drawRotated(position, rotation, () => {\n      const useSprites = !!(this.spriteFull && this.spriteUpper);\n      if (useSprites) {\n        const spriteFull = this.spriteFull as HTMLImageElement;\n        const spriteUpper = this.spriteUpper as HTMLImageElement;\n        // When using sprites, draw the exhaust first so it appears behind the\n        // sprite and only shows through transparent areas.\n        const currentStage = rocketState.currentStage ?? 0;\n        const exLift = currentStage === 0 ? 10 : 14; // start plume lower for stage 2\n        rocketState.exhaustY = yOffset + exLift;\n        if (isEngineOn && throttle > 0) {\n          this.drawExhaust(renderer, throttle, rocketState);\n        }\n        // Now draw sprite slightly larger and nudged upward so hitbox sits lower\n        const img = currentStage === 0 ? spriteFull : spriteUpper;\n        const totalDims = this.getRocketBounds(rocketState);\n        // Per‑stage sprite scaling. Upper stage should be shorter and slightly wider.\n        const fullW = totalDims.width * 1.15;\n        const fullH = totalDims.height * 1.15;\n        const upperW = totalDims.width * 1.35; // a bit wider\n        const upperH = totalDims.height * 0.65; // still shorter, but less extreme\n        const drawW = currentStage === 0 ? fullW : upperW;\n        const drawH = currentStage === 0 ? fullH : upperH;\n        const spriteYOffset = currentStage === 0 ? 8 : 0;\n        renderer.drawSprite(\n          img,\n          new Vector2(0, yOffset + totalDims.height / 2 + spriteYOffset),\n          drawW,\n          drawH\n        );\n      } else {\n        // Fallback vector rocket: draw body first (sets exhaust anchor), then exhaust\n        this.drawRocketBody(renderer, rocketState, yOffset);\n        if (isEngineOn && throttle > 0) {\n          this.drawExhaust(renderer, throttle, rocketState);\n        }\n      }\n      // Draw separated stages (visual decoupling)\n      this.drawSeparatedStages(renderer, rocketState);\n    });\n\n    // Compute and expose engine base world position for other systems (smoke/speed effects)\n    const exY = rocketState.exhaustY ?? 0; // local Y of stage bottom\n    // Account for visible nozzle drop below stage bottom (stage-dependent)\n    const currentStage = rocketState.currentStage ?? 0;\n    const nozzleDrop = currentStage === 0 ? 6 : 4; // px below stage bottom in local space\n    const engineLocalY = exY - nozzleDrop;\n    // Convert local (0, engineLocalY) to world using rotation (y-up): (dx,dy)=(-sin r * y, cos r * y)\n    const enginePos = new Vector2(\n      position.x + -Math.sin(rotation) * engineLocalY,\n      position.y + Math.cos(rotation) * engineLocalY\n    );\n    rocketState.engineWorldPos = enginePos;\n    // Local down vector (0,-1) -> world (sin r, -cos r)\n    rocketState.engineDownDir = new Vector2(Math.sin(rotation), -Math.cos(rotation));\n  }\n\n  /**\n   * Draw the main rocket body with stages (only active and above). Lower\n   * stages are considered separated and are drawn elsewhere.\n   */\n  private drawRocketBody(\n    renderer: CanvasRenderer,\n    rocketState: RocketState,\n    baseYOffset = 0\n  ): void {\n    let currentY = baseYOffset; // start centered to reduce rotation snapping\n\n    // Draw only active and higher stages (lower stages are decoupled)\n    const stages = rocketState.stages || [];\n    const currentStageIndex = rocketState.currentStage;\n\n    // Store active stage bottom position for exhaust positioning\n    let activeStageBottomY = 0;\n\n    for (let i = currentStageIndex; i < stages.length; i++) {\n      const stage = stages[i];\n      const isActiveStage = i === currentStageIndex;\n\n      // Determine stage visual properties\n      let width: number;\n      let height: number;\n      let color: string;\n\n      if (i === 0) {\n        // First stage (booster)\n        width = this.config.stage1Width;\n        height = this.config.stage1Height;\n        color = this.config.stage1Color;\n      } else if (i === 1) {\n        // Second stage\n        width = this.config.stage2Width;\n        height = this.config.stage2Height;\n        color = this.config.stage2Color;\n      } else {\n        // Additional stages (smaller)\n        width = this.config.payloadWidth;\n        height = this.config.payloadHeight;\n        color = this.config.payloadColor;\n      }\n\n      // Draw stage body (rounded effect via stroke)\n      const stagePos = new Vector2(-width / 2, currentY);\n      renderer.drawRectangle(stagePos, width, height, color, '#000000', 2);\n\n      // Add visual details for each stage\n      if (i === 0) {\n        // First stage details\n        this.drawStage1Details(renderer, stagePos, width, height);\n      } else if (i === 1) {\n        // Second stage details\n        this.drawStage2Details(renderer, stagePos, width, height);\n      }\n\n      // Store active stage bottom position for exhaust\n      if (isActiveStage) {\n        activeStageBottomY = currentY;\n      }\n\n      currentY += height;\n    }\n\n    // Store exhaust position for later use (world conversion happens after rotate)\n    rocketState.exhaustY = activeStageBottomY;\n\n    // Draw payload/nose cone\n    const nosePos = new Vector2(-this.config.payloadWidth / 2, currentY);\n    renderer.drawRectangle(\n      nosePos,\n      this.config.payloadWidth,\n      this.config.payloadHeight,\n      this.config.payloadColor,\n      '#000000',\n      1\n    );\n\n    // Draw nose cone tip (triangle)\n    const tipHeight = 4;\n    const tipPos = new Vector2(0, currentY + this.config.payloadHeight);\n    this.drawTriangle(\n      renderer,\n      tipPos,\n      this.config.payloadWidth / 2,\n      tipHeight,\n      this.config.payloadColor\n    );\n  }\n\n  /**\n   * Draw exhaust plume - scaled by active stage\n   */\n  private drawExhaust(renderer: CanvasRenderer, throttle: number, rocketState: RocketState): void {\n    const exhaustIntensity = throttle;\n\n    // Scale exhaust based on current stage (bigger for first stage)\n    const currentStage = rocketState.currentStage || 0;\n    let exhaustScale = 1.0;\n\n    if (currentStage === 0) {\n      // First stage - large exhaust\n      exhaustScale = 1.5;\n    } else if (currentStage === 1) {\n      // Second stage - make plume smaller (narrower & shorter)\n      exhaustScale = 0.45;\n    } else {\n      // Upper stages - smaller exhaust\n      exhaustScale = 0.7;\n    }\n\n    // Allow stage-specific shaping (length vs width)\n    let exhaustLength = this.config.exhaustLength * exhaustIntensity * exhaustScale;\n    let exhaustWidth = this.config.exhaustWidth * exhaustIntensity * exhaustScale;\n    if (currentStage === 1) {\n      exhaustLength *= 0.8; // even shorter for stage 2\n      exhaustWidth *= 0.85; // slightly narrower\n    }\n    // Expose current exhaust dimensions for external effects anchoring\n    rocketState.exhaustLength = exhaustLength;\n    rocketState.exhaustWidth = exhaustWidth;\n\n    // Get exhaust position from active stage bottom (stored in rocketState)\n    const exhaustY = rocketState.exhaustY || 0;\n\n    // Main exhaust flame (positioned at active stage bottom)\n    // Shift slightly to the right for stage 2 to align with nozzle in art\n    // (previously 5px; adjusted to 2px per feedback)\n    const xShift = currentStage === 1 ? 2 : 0;\n    const exhaustPos = new Vector2(-exhaustWidth / 2 + xShift, exhaustY - exhaustLength);\n    renderer.drawRectangle(exhaustPos, exhaustWidth, exhaustLength, this.config.exhaustColor);\n\n    // Inner core (brighter)\n    const coreWidth = exhaustWidth * 0.6;\n    const coreLength = exhaustLength * 0.8;\n    const corePos = new Vector2(-coreWidth / 2 + xShift, exhaustY - coreLength);\n    renderer.drawRectangle(corePos, coreWidth, coreLength, this.config.exhaustCoreColor);\n\n    // Exhaust particles (simple effect)\n    this.drawExhaustParticles(renderer, throttle, exhaustScale, exhaustY);\n  }\n\n  /**\n   * Draw simple exhaust particle effect\n   */\n  private drawExhaustParticles(\n    renderer: CanvasRenderer,\n    throttle: number,\n    exhaustScale = 1.0,\n    exhaustY = 0\n  ): void {\n    const particleCount = Math.floor(throttle * 8 * exhaustScale);\n\n    for (let i = 0; i < particleCount; i++) {\n      const offsetX = (Math.random() - 0.5) * this.config.exhaustWidth * 1.5 * exhaustScale;\n      const offsetY = exhaustY - Math.random() * this.config.exhaustLength * 1.2 * exhaustScale;\n      const particleSize = (Math.random() * 2 + 1) * exhaustScale;\n\n      const particlePos = new Vector2(offsetX, offsetY);\n      const alpha = Math.random() * 0.8 + 0.2;\n      const color = `rgba(255, ${Math.floor(100 + Math.random() * 155)}, 0, ${alpha})`;\n\n      renderer.drawCircle(particlePos, particleSize, color);\n    }\n  }\n\n  /**\n   * Draw separated stages (visual decoupling animation)\n   * Note: Separated stages animation is now handled by StageManager\n   */\n  private drawSeparatedStages(renderer: CanvasRenderer, rocketState: RocketState): void {\n    // Separated stages animation is handled by StageManager\n    // This method is kept for potential future use\n  }\n\n  /**\n   * Render a single detached stage with the same proportions/details as the main rocket\n   */\n  public renderDetachedStage(\n    renderer: CanvasRenderer,\n    stageIndex: number,\n    position: Vector2,\n    rotation: number,\n    alpha = 1\n  ): void {\n    const clampAlpha = Math.max(0, Math.min(1, alpha));\n    const withAlpha = (hex: string): string => {\n      // Convert e.g. '#ffffff' to rgba with provided alpha when used as fill\n      // If already rgba string, just append alpha multiplier style\n      if (hex.startsWith('#')) {\n        // parse shorthand or full hex\n        const h = hex.replace('#', '');\n        const bigint = Number.parseInt(\n          h.length === 3\n            ? h\n                .split('')\n                .map((c) => c + c)\n                .join('')\n            : h,\n          16\n        );\n        const r = (bigint >> 16) & 255;\n        const g = (bigint >> 8) & 255;\n        const b = bigint & 255;\n        return `rgba(${r}, ${g}, ${b}, ${clampAlpha})`;\n      }\n      // fall back\n      return hex;\n    };\n\n    renderer.drawRotated(position, rotation, () => {\n      let width = this.config.stage2Width;\n      let height = this.config.stage2Height;\n      let bodyColor = this.config.stage2Color;\n\n      if (stageIndex === 0) {\n        width = this.config.stage1Width;\n        height = this.config.stage1Height;\n        bodyColor = this.config.stage1Color;\n      }\n\n      // Center the body around origin so detached stage aligns with rocket\n      const bodyPos = new Vector2(-width / 2, -height / 2);\n      renderer.drawRectangle(bodyPos, width, height, withAlpha(bodyColor), '#000000', 1);\n\n      // Details\n      if (stageIndex === 0) {\n        this.drawStage1Details(renderer, bodyPos, width, height);\n      } else {\n        this.drawStage2Details(renderer, bodyPos, width, height);\n      }\n    });\n  }\n\n  /**\n   * Draw a triangle (for nose cone)\n   */\n  private drawTriangle(\n    renderer: CanvasRenderer,\n    tip: Vector2,\n    baseWidth: number,\n    height: number,\n    color: string\n  ): void {\n    // Simple triangle using lines\n    const leftBase = new Vector2(tip.x - baseWidth, tip.y - height);\n    const rightBase = new Vector2(tip.x + baseWidth, tip.y - height);\n\n    renderer.drawLine(tip, leftBase, color, 2);\n    renderer.drawLine(tip, rightBase, color, 2);\n    renderer.drawLine(leftBase, rightBase, color, 2);\n  }\n\n  /**\n   * Get rocket visual bounds for camera following\n   */\n  getRocketBounds(rocketState: RocketState): { width: number; height: number } {\n    const stages = rocketState.stages || [];\n    const start = Math.max(0, Math.min(rocketState.currentStage ?? 0, stages.length));\n    let totalHeight = this.config.payloadHeight + 4; // include nose cone\n    let maxWidth = this.config.payloadWidth;\n\n    // Sprite-aware scaling factors (must match drawSprite)\n    const useSprites = !!(this.spriteFull && this.spriteUpper);\n    const fullHScale = 1.15;\n    const fullWScale = 1.15;\n    const upperHScale = 0.65; // shorter, adjusted to match visual sprite\n    const upperWScale = 1.35; // a bit wider\n\n    for (let i = start; i < stages.length; i++) {\n      if (i === 0) {\n        totalHeight += useSprites\n          ? this.config.stage1Height * fullHScale\n          : this.config.stage1Height;\n        maxWidth = Math.max(\n          maxWidth,\n          useSprites ? this.config.stage1Width * fullWScale : this.config.stage1Width\n        );\n      } else if (i === 1) {\n        totalHeight += useSprites\n          ? this.config.stage2Height * upperHScale\n          : this.config.stage2Height;\n        maxWidth = Math.max(\n          maxWidth,\n          useSprites ? this.config.stage2Width * upperWScale : this.config.stage2Width\n        );\n      } else {\n        totalHeight += this.config.payloadHeight;\n        maxWidth = Math.max(maxWidth, this.config.payloadWidth);\n      }\n    }\n    return { width: maxWidth, height: totalHeight };\n  }\n\n  /**\n   * Draw first stage visual details\n   */\n  private drawStage1Details(\n    renderer: CanvasRenderer,\n    pos: Vector2,\n    width: number,\n    height: number\n  ): void {\n    // Blue accent stripes\n    const stripeWidth = 4;\n    const stripe1Pos = new Vector2(pos.x + 5, pos.y + 10);\n    const stripe2Pos = new Vector2(pos.x + width - 5 - stripeWidth, pos.y + 10);\n\n    renderer.drawRectangle(stripe1Pos, stripeWidth, height - 20, this.config.stage1AccentColor);\n    renderer.drawRectangle(stripe2Pos, stripeWidth, height - 20, this.config.stage1AccentColor);\n\n    // Engine nozzles at bottom\n    const nozzleWidth = 8;\n    const nozzleHeight = 6;\n    const nozzle1Pos = new Vector2(pos.x + width * 0.25 - nozzleWidth / 2, pos.y - nozzleHeight);\n    const nozzle2Pos = new Vector2(pos.x + width * 0.75 - nozzleWidth / 2, pos.y - nozzleHeight);\n\n    renderer.drawRectangle(nozzle1Pos, nozzleWidth, nozzleHeight, this.config.finColor);\n    renderer.drawRectangle(nozzle2Pos, nozzleWidth, nozzleHeight, this.config.finColor);\n\n    // Side fins\n    this.drawFins(renderer, pos, width, height);\n  }\n\n  /**\n   * Draw second stage visual details\n   */\n  private drawStage2Details(\n    renderer: CanvasRenderer,\n    pos: Vector2,\n    width: number,\n    height: number\n  ): void {\n    // Red accent band\n    const bandHeight = 8;\n    const bandPos = new Vector2(pos.x, pos.y + height * 0.3);\n    renderer.drawRectangle(bandPos, width, bandHeight, this.config.stage2AccentColor);\n\n    // Windows/portholes\n    const windowSize = 4;\n    const window1Pos = new Vector2(pos.x + width * 0.3 - windowSize / 2, pos.y + height * 0.6);\n    const window2Pos = new Vector2(pos.x + width * 0.7 - windowSize / 2, pos.y + height * 0.6);\n\n    renderer.drawCircle(window1Pos, windowSize / 2, this.config.windowColor);\n    renderer.drawCircle(window2Pos, windowSize / 2, this.config.windowColor);\n\n    // Single engine nozzle\n    const nozzleWidth = 6;\n    const nozzleHeight = 4;\n    const nozzlePos = new Vector2(pos.x + width / 2 - nozzleWidth / 2, pos.y - nozzleHeight);\n    renderer.drawRectangle(nozzlePos, nozzleWidth, nozzleHeight, this.config.finColor);\n  }\n\n  /**\n   * Draw fins on first stage\n   */\n  private drawFins(renderer: CanvasRenderer, pos: Vector2, width: number, height: number): void {\n    const finWidth = 8;\n    const finHeight = 20;\n\n    // Left fin\n    const leftFinPos = new Vector2(pos.x - finWidth, pos.y + height - finHeight - 10);\n    renderer.drawRectangle(leftFinPos, finWidth, finHeight, this.config.finColor);\n\n    // Right fin\n    const rightFinPos = new Vector2(pos.x + width, pos.y + height - finHeight - 10);\n    renderer.drawRectangle(rightFinPos, finWidth, finHeight, this.config.finColor);\n  }\n\n  /**\n   * Update visual configuration\n   */\n  updateConfig(newConfig: Partial<RocketVisualConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n}\n","import type { WorldParameters } from '@/physics/WorldParameters';\n\ntype Message = { text: string; time: number; duration: number };\n\nexport class AtmosphereUI {\n  private messages: Message[] = [];\n  private lastLayer = -1;\n\n  constructor(private canvas: HTMLCanvasElement) {}\n\n  reset(): void {\n    this.messages = [];\n    this.lastLayer = -1;\n  }\n\n  addMessage(text: string, time: number, duration = 3.0): void {\n    this.messages.push({ text, time, duration });\n  }\n\n  // Expose a copy of messages for testing/inspection\n  getMessages(): ReadonlyArray<Message> {\n    return [...this.messages];\n  }\n\n  checkLayers(world: WorldParameters, rocketRadius: number, currentTime: number): void {\n    const altitude = world.getAltitude(rocketRadius);\n    let currentLayer = -1;\n    if (altitude < 11_000)\n      currentLayer = 0; // Troposphere\n    else if (altitude < 50_000)\n      currentLayer = 1; // Stratosphere\n    else if (altitude < 80_000)\n      currentLayer = 2; // Mesosphere\n    else if (altitude < 700_000)\n      currentLayer = 3; // Thermosphere\n    else currentLayer = 4; // Exosphere\n\n    if (currentLayer > this.lastLayer && currentLayer >= 0) {\n      // Special case: delay the Troposphere message until >= 1 km AGL\n      if (currentLayer === 0 && altitude < 1_000) return;\n      const labels = [\n        \"You're in the Troposphere !\",\n        'You reached the Stratosphere!',\n        'You reached the Mesosphere!',\n        'You reached the Thermosphere!',\n        'You reached the Exosphere! (Near-space)',\n      ];\n      const msg = labels[currentLayer] ?? '';\n      if (msg) this.addMessage(msg, currentTime, 3.0);\n      this.lastLayer = currentLayer;\n    }\n  }\n\n  update(currentTime: number): void {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const m = this.messages[i];\n      if (currentTime - m.time > m.duration) this.messages.splice(i, 1);\n    }\n  }\n\n  render(currentTime: number): void {\n    const ctx = this.canvas.getContext('2d');\n    if (!ctx || this.messages.length === 0) return;\n\n    ctx.save();\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    const centerX = this.canvas.width / 2;\n    let offsetY = 90;\n    for (const m of this.messages) {\n      const age = currentTime - m.time;\n      const fadeIn = Math.min(1, age * 3);\n      const fadeOut = Math.min(1, Math.max(0, (m.duration - age) * 2));\n      const alpha = fadeIn * fadeOut;\n\n      ctx.font = '14px monospace';\n      ctx.textAlign = 'left';\n      const maxTextWidth = Math.min(this.canvas.width * 0.6, 380);\n      const lines = this.wrapText(ctx, m.text, maxTextWidth);\n      const lineHeight = 18;\n      let textW = 0;\n      for (const line of lines) textW = Math.max(textW, ctx.measureText(line).width);\n      const padX = 12;\n      const padY = 8;\n      const panelW = textW + padX * 2;\n      const panelH = lines.length * lineHeight + padY * 2;\n      const panelX = centerX - panelW / 2;\n      const panelY = offsetY;\n\n      ctx.fillStyle = `rgba(0, 50, 100, ${alpha * 0.8})`;\n      ctx.fillRect(panelX, panelY, panelW, panelH);\n\n      ctx.strokeStyle = `rgba(100, 150, 255, ${alpha})`;\n      ctx.lineWidth = 2;\n      ctx.strokeRect(panelX, panelY, panelW, panelH);\n\n      ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n      let ty = panelY + padY + 13;\n      for (const line of lines) {\n        ctx.fillText(line, panelX + padX, ty);\n        ty += lineHeight;\n      }\n      offsetY += panelH + 8;\n    }\n    ctx.restore();\n  }\n\n  private wrapText(ctx: CanvasRenderingContext2D, text: string, maxWidth: number): string[] {\n    const words = text.split(' ');\n    const lines: string[] = [];\n    let line = '';\n    for (const w of words) {\n      const test = line ? `${line} ${w}` : w;\n      if (ctx.measureText(test).width > maxWidth && line) {\n        lines.push(line);\n        line = w;\n      } else {\n        line = test;\n      }\n    }\n    if (line) lines.push(line);\n    return lines;\n  }\n}\n","import spaceFacts from '@/data/space_facts.json';\nimport { Vector2 } from '@/physics/Vector2';\n\n// small shape kept simple for readability\ntype Bubble = {\n  text: string;\n  pos: Vector2;\n  bornAtMs: number;\n  ttlSec: number;\n  opacity: number;\n};\n\nexport class FactBubblesSystem {\n  private canvas: HTMLCanvasElement;\n  private bubbles: Bubble[] = [];\n  private shownFacts: Set<number> = new Set();\n  private lastSpawnMs = 0;\n  private nextIntervalSec = 35;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.loadShownFacts();\n  }\n\n  update(nowMs: number, altitude: number): void {\n    // do not spam on very small screens / phones\n    // Hide facts on phones or narrow viewports\n    const dpr = (typeof window !== 'undefined' && (window.devicePixelRatio || 1)) || 1;\n    const cssW =\n      (this.canvas as HTMLCanvasElement).clientWidth || Math.round(this.canvas.width / dpr);\n    const isCoarse =\n      typeof window !== 'undefined' && !!window.matchMedia?.('(pointer: coarse)').matches;\n    if (isCoarse || cssW < 1000) return;\n\n    // show starting from ~5 km. lower altitude felt noisy\n    if (altitude < 5_000) return;\n\n    // Spawn at interval\n    if ((nowMs - this.lastSpawnMs) / 1000 >= this.nextIntervalSec) {\n      const idx = this.pickNextFactIndex();\n      if (idx !== null) {\n        // keep track to avoid repeating same text\n        const text = (spaceFacts as unknown as string[])[idx];\n        this.shownFacts.add(idx);\n        this.saveShownFacts();\n        const x = Math.round(this.canvas.width / 2); // centered on top\n        const y = 60; // top center\n        this.bubbles.push({\n          text,\n          pos: new Vector2(x, y),\n          bornAtMs: nowMs,\n          ttlSec: 12 + Math.random() * 4,\n          opacity: 0,\n        });\n        this.lastSpawnMs = nowMs;\n        this.nextIntervalSec = 20 + Math.random() * 25;\n      }\n    }\n\n    // lifetimes and simple fade in/out\n    for (let i = this.bubbles.length - 1; i >= 0; i--) {\n      const b = this.bubbles[i];\n      const age = (nowMs - b.bornAtMs) / 1000;\n      const t = age / b.ttlSec;\n      // Ease in/out\n      b.opacity = Math.max(0, Math.min(1, t < 0.2 ? t / 0.2 : t > 0.8 ? (1 - t) / 0.2 : 1));\n      if (age >= b.ttlSec) this.bubbles.splice(i, 1);\n    }\n  }\n\n  render(): void {\n    if (this.bubbles.length === 0) return;\n    const ctx = this.canvas.getContext('2d');\n    if (!ctx) return;\n    ctx.save();\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    for (const b of this.bubbles) {\n      const panelW = 360;\n      const panelH = 120;\n      const x = b.pos.x - panelW / 2;\n      const y = b.pos.y - panelH / 2;\n\n      // Panel\n      ctx.globalAlpha = b.opacity;\n      ctx.fillStyle = 'rgba(18,22,34,0.92)';\n      ctx.strokeStyle = '#88aaff';\n      ctx.lineWidth = 1;\n      ctx.fillRect(x, y, panelW, panelH);\n      ctx.strokeRect(x, y, panelW, panelH);\n\n      // multiline text with small padding\n      ctx.globalAlpha = b.opacity;\n      ctx.fillStyle = '#e6ecff';\n      ctx.font = '13px monospace';\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'top';\n      const pad = 12;\n      const maxW = panelW - pad * 2;\n      const lines = this.wrap(ctx, b.text, maxW);\n      let ty = y + pad;\n      for (const ln of lines) {\n        ctx.fillText(ln, x + pad, ty);\n        ty += 16;\n      }\n\n      // small progress bar (time before it goes away)\n      const age = (Date.now() - b.bornAtMs) / 1000;\n      const t = Math.max(0, Math.min(1, age / b.ttlSec));\n      const barW = panelW - pad * 2;\n      const barX = x + pad;\n      const barY = y + panelH - pad - 10;\n      ctx.globalAlpha = 0.8 * b.opacity;\n      ctx.fillStyle = '#2a3350';\n      ctx.fillRect(barX, barY, barW, 8);\n      ctx.fillStyle = '#66aaff';\n      ctx.fillRect(barX, barY, barW * (1 - t), 8);\n    }\n    ctx.restore();\n  }\n\n  private wrap(ctx: CanvasRenderingContext2D, text: string, maxW: number): string[] {\n    const words = text.split(' ');\n    const lines: string[] = [];\n    let line = '';\n    for (const w of words) {\n      const test = line ? `${line} ${w}` : w;\n      if (ctx.measureText(test).width > maxW && line) {\n        lines.push(line);\n        line = w;\n      } else line = test;\n    }\n    if (line) lines.push(line);\n    return lines;\n  }\n\n  private pickNextFactIndex(): number | null {\n    const factsArr: string[] = spaceFacts as unknown as string[];\n    const available: number[] = [];\n    for (let i = 0; i < factsArr.length; i++) {\n      if (!this.shownFacts.has(i)) available.push(i);\n    }\n    if (available.length === 0) return null;\n    return available[Math.floor(Math.random() * available.length)];\n  }\n\n  private loadShownFacts(): void {\n    try {\n      const s = localStorage.getItem('shownFacts');\n      if (s) this.shownFacts = new Set(JSON.parse(s));\n    } catch {}\n  }\n  private saveShownFacts(): void {\n    try {\n      localStorage.setItem('shownFacts', JSON.stringify([...this.shownFacts]));\n    } catch {}\n  }\n}\n","import { Vector2 } from './Vector2.js';\n\n// Atmospheric physics calculations for drag and heating (module-level)\nexport function calculateDensity(\n  altitude: number,\n  surfaceDensity: number,\n  scaleHeight: number\n): number {\n  return surfaceDensity * Math.exp(-altitude / scaleHeight);\n}\n\n// Standard drag model: Fd = 0.5 * rho * v^2 * Cd * A, opposite to velocity\nexport function calculateDragForce(\n  velocity: Vector2,\n  density: number,\n  dragCoefficient: number,\n  crossSectionalArea: number\n): Vector2 {\n  const speed = velocity.magnitude();\n  if (speed === 0) return Vector2.zero();\n  const dragMagnitude = 0.5 * density * speed * speed * dragCoefficient * crossSectionalArea;\n  const dragDirection = velocity.normalized().multiply(-1);\n  return dragDirection.multiply(dragMagnitude);\n}\n\n// Dynamic pressure (\"q\"): useful for max-Q and heating cues\nexport function calculateDynamicPressure(velocity: Vector2, density: number): number {\n  const speed = velocity.magnitude();\n  return 0.5 * density * speed * speed;\n}\n\n// Very simple heat flux: proportional to q * v (gameplay-scaled)\nexport function calculateHeatFlux(velocity: Vector2, density: number): number {\n  const speed = velocity.magnitude();\n  const q = calculateDynamicPressure(velocity, density);\n  return q * speed * 0.001;\n}\n\nexport function isOverpressure(dynamicPressure: number, maxQ: number): boolean {\n  return dynamicPressure > maxQ;\n}\n\n// Terminal velocity using balance of drag and weight\nexport function calculateTerminalVelocity(\n  mass: number,\n  density: number,\n  dragCoefficient: number,\n  crossSectionalArea: number,\n  gravity: number\n): number {\n  if (density === 0) return Number.POSITIVE_INFINITY;\n  return Math.sqrt((2 * mass * gravity) / (density * dragCoefficient * crossSectionalArea));\n}\n\n// Rough heat meter change per dt from dynamic pressure\nexport function calculateHeatBuildup(dynamicPressure: number, deltaTime: number): number {\n  if (dynamicPressure <= 0) return 0;\n  const heatRate = (dynamicPressure / 1000) * deltaTime;\n  return Math.min(heatRate, 100);\n}\n\nexport function isOverheating(dynamicPressure: number): boolean {\n  return dynamicPressure > 50_000;\n}\n","import type { GameState, RocketState } from '../core/types.js';\nimport { calculateTerminalVelocity } from '../physics/AtmosphericPhysics.js';\nimport { Vector2 } from '../physics/Vector2.js';\nimport type { CanvasRenderer } from '../rendering/CanvasRenderer.js';\nimport { getPlanetTexture } from '../rendering/PlanetTextureGen.js';\n\nexport class HUDSystem {\n  private canvas: HTMLCanvasElement;\n  public restartButtonBounds?: { x: number; y: number; width: number; height: number };\n  public confirmYesBounds?: { x: number; y: number; width: number; height: number };\n  public confirmNoBounds?: { x: number; y: number; width: number; height: number };\n  private _modeConfirm?: { pending: boolean; targetAuto: boolean };\n  // Cached mini planet texture\n  private miniPlanetTex?: HTMLCanvasElement;\n  private miniAngle = 0;\n  // Mini-map trajectory caching\n  private cachedPath: Array<{ x: number; y: number }> | null = null;\n  private lastProjTimeMs = 0;\n  private lastVel: { x: number; y: number } | null = null;\n  private lastStage = -1;\n  private lastThrusting = false;\n  private cachedInfo: {\n    apoAlt: number;\n    apoPos: { x: number; y: number } | null;\n    periAlt: number;\n    periPos: { x: number; y: number } | null;\n    stableOrbit: boolean;\n  } | null = null;\n  // No continent geometry; all land with polar cap only\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    // Cache mini planet texture\n    this.miniPlanetTex = getPlanetTexture(256);\n  }\n\n  // Expose last projected apo/peri data for other systems (e.g., autopilot)\n  getLastProjectedInfo(): { apoAlt: number; periAlt: number } | null {\n    if (this.cachedInfo) {\n      return { apoAlt: this.cachedInfo.apoAlt, periAlt: this.cachedInfo.periAlt };\n    }\n    return null;\n  }\n\n  /**\n   * Render the HUD overlay with flight data\n   */\n  render(renderer: CanvasRenderer, gameState: GameState, missionTimer?: number): void {\n    const ctx = this.canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Save current transformation state\n    ctx.save();\n\n    // Reset transformation to screen coordinates for HUD\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n    // Calculate flight data (base altitude at engine exit)\n    const pos = gameState.rocket.position;\n    const rmag = pos.magnitude();\n    const exY = gameState.rocket.exhaustY ?? 0; // local Y of stage bottom\n    const bottomDistance = Math.max(0, -exY) + 6; // add small nozzle drop\n    const altitude = Math.max(0, rmag - gameState.world.planetRadius - bottomDistance);\n    // Ground-relative velocity near the surface to avoid showing rotation speed\n    const u = rmag > 1e-6 ? new Vector2(pos.x / rmag, pos.y / rmag) : new Vector2(0, 1);\n    const tVec = new Vector2(-u.y, u.x);\n    const omega = gameState.world.earthRotationRate || 0;\n    const groundVel = tVec.multiply(omega * rmag);\n    const rawVel = gameState.rocket.velocity;\n    const relVel = rawVel.subtract(groundVel);\n    const velocity =\n      gameState.rocket.isClamped || altitude < 1000 ? relVel.magnitude() : rawVel.magnitude();\n    const mass = gameState.rocket.mass;\n    const fuel = gameState.rocket.fuel;\n    const throttle = gameState.rocket.throttle;\n\n    // Get rocket configuration for TWR and ISP calculations\n    const rocket = gameState.rocket;\n    let currentTWR = 0;\n    let currentISP = 0;\n\n    if (rocket.isEngineIgnited && rocket.throttle > 0) {\n      const gravity = gameState.world.getGravitationalAcceleration(\n        gameState.rocket.position.magnitude()\n      );\n      const thrust = rocket.stages[rocket.currentStage]?.thrust || 0;\n      const actualThrust = thrust * throttle;\n      currentTWR = actualThrust / (mass * gravity);\n      currentISP = rocket.stages[rocket.currentStage]?.specificImpulse || 0;\n    }\n\n    // UI scale: detect mobile and compute size using CSS pixels (not device pixels)\n    const dpr = (typeof window !== 'undefined' && (window.devicePixelRatio || 1)) || 1;\n    const cssW =\n      (this.canvas as HTMLCanvasElement).clientWidth || Math.round(this.canvas.width / dpr);\n    const cssH =\n      (this.canvas as HTMLCanvasElement).clientHeight || Math.round(this.canvas.height / dpr);\n    const minDim = Math.min(cssW, cssH);\n    const isCoarse =\n      typeof window !== 'undefined' && !!window.matchMedia?.('(pointer: coarse)').matches;\n    const hasTouch =\n      typeof navigator !== 'undefined' &&\n      'maxTouchPoints' in navigator &&\n      (navigator as Navigator & { maxTouchPoints: number }).maxTouchPoints > 0;\n    const isMobile = isCoarse || hasTouch;\n    let uiScale = 1.0;\n    if (isMobile && minDim <= 700) {\n      uiScale = 1.8; // smaller than before (was 2.4)\n    } else if (isMobile && minDim <= 1000) {\n      uiScale = 1.5;\n    } else if (!isMobile && minDim <= 1000) {\n      uiScale = 1.15; // small tablets / small windows\n    } else if (minDim < 1600) {\n      uiScale = 1.0; // keep 1.0 between 1200 and 1600\n    } else if (minDim < 2000) {\n      uiScale = 0.85; // very large screens\n    } else {\n      uiScale = 0.8; // ultra-wide/4k\n    }\n\n    // HUD styling\n    ctx.font = `${Math.round(14 * uiScale)}px monospace`;\n    ctx.fillStyle = '#ffffff';\n    ctx.strokeStyle = '#000000';\n    ctx.lineWidth = 3;\n\n    // Layout metrics\n    const panelX = 10;\n    const panelY = 10;\n    const panelW = 250 * uiScale; // slightly wider to fit \"Unsafe\" text\n    const startY = 24 * uiScale;\n    const lineHeight = 18 * uiScale; // tighter line spacing\n    const gaugeH = 18 * uiScale;\n    // Compute exact height for 9 rows\n    const rows = 9;\n    const contentBottom = startY + lineHeight * rows;\n    const gaugeTopGap = 8 * uiScale;\n    const bottomPad = 12 * uiScale;\n    const panelH = contentBottom + gaugeTopGap + gaugeH + bottomPad;\n    // Draw background panel sized to content\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    ctx.fillRect(panelX, panelY, panelW, panelH);\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 1;\n    ctx.strokeRect(panelX, panelY, panelW, panelH);\n\n    // Draw flight data\n    ctx.fillStyle = '#ffffff';\n    let y = startY;\n\n    // Format and display data\n    ctx.fillText(`Altitude:   ${this.formatNumber(altitude, 0)} m`, 20, y);\n    y += lineHeight;\n    // Velocity + safety indicator (color-coded by proximity to atmospheric limit)\n    ctx.fillStyle = '#ffffff';\n    const velText = `Velocity:   ${this.formatNumber(velocity, 1)} m/s`;\n    ctx.fillText(velText, 20, y);\n\n    // Safety indicator based on vMax (derived from terminal velocity)\n    const density = gameState.world.getAtmosphericDensity(altitude);\n    const gravity = gameState.world.getGravitationalAcceleration(\n      gameState.rocket.position.magnitude()\n    );\n    const cd = rocket.dragCoefficient ?? gameState.world.defaultDragCoefficient ?? 0.3;\n    const area = rocket.crossSectionalArea ?? gameState.world.defaultCrossSectionalArea ?? 10;\n    const vTerm = calculateTerminalVelocity(mass, density, cd, area, gravity);\n    const vMax = (Number.isFinite(vTerm) ? vTerm : 10_000) * 1.25 + 50;\n    // Determine label and color: only Safe (green) or Unsafe (orange→red)\n    let label = 'Safe';\n    let safetyColor = '#00ff66'; // green\n    if (altitude < 80_000 && Number.isFinite(vTerm)) {\n      const ratio = velocity / Math.max(1, vMax);\n      if (ratio > 0.85) {\n        label = 'Unsafe';\n        // Blend color from orange (#ff9933) at 0.85 up to red (#ff3333) at 1.10\n        const t = Math.max(0, Math.min(1, (ratio - 0.85) / (1.1 - 0.85)));\n        const mix = (a: number, b: number, k: number) => Math.round(a + (b - a) * k);\n        const r = mix(0xff, 0xff, t);\n        const g = mix(0x99, 0x33, t);\n        const b = mix(0x33, 0x33, t);\n        safetyColor = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n      }\n    }\n    ctx.fillStyle = safetyColor;\n    // Place label next to the velocity text, with a small gap; clamp to panel right\n    const velW = ctx.measureText(velText).width;\n    const gap = 10 * uiScale;\n    let labelX = 20 + velW + gap;\n    const rightPad = 10;\n    const maxX = panelX + panelW - rightPad;\n    if (labelX > maxX) labelX = maxX;\n    const oldAlign = ctx.textAlign;\n    ctx.textAlign = 'left';\n    ctx.fillText(label, labelX, y);\n    ctx.textAlign = oldAlign;\n    // Reset color so only the safety text is colorized\n    ctx.fillStyle = '#ffffff';\n    y += lineHeight;\n    ctx.fillText(`Mass:       ${this.formatNumber(mass, 0)} kg`, 20, y);\n    y += lineHeight;\n    ctx.fillText(`Throttle:   ${Math.round(throttle * 100)}%`, 20, y);\n    y += lineHeight;\n    ctx.fillText(`TWR:        ${currentTWR.toFixed(2)}`, 20, y);\n    y += lineHeight;\n    ctx.fillText(`ISP:        ${Math.round(currentISP)} s`, 20, y);\n    y += lineHeight;\n    ctx.fillStyle = '#ffffff';\n    ctx.fillText(`Stage:      ${rocket.currentStage + 1}`, 20, y);\n\n    // Engine status indicator\n    y += lineHeight;\n    const engineStatus = rocket.isEngineIgnited ? 'ON' : 'OFF';\n    const statusColor = rocket.isEngineIgnited ? '#00ff00' : '#ff0000';\n    ctx.fillStyle = statusColor;\n    ctx.fillText(`Engines:    ${engineStatus}`, 20, y);\n\n    // Delta-V estimate (uses current altitude for current-stage Isp; later stages assume vacuum Isp)\n    y += lineHeight;\n    ctx.fillStyle = '#ffffff';\n    const g0 = 9.81;\n    // Compute remaining delta-v including staging dry-mass drops\n    let dvTotal = 0;\n    let mCurrent = mass;\n    // Helper to blend Isp based on local density (0..1)\n    const densityNow = gameState.world.getAtmosphericDensity(altitude);\n    const sea = gameState.world.surfaceDensity;\n    const vacBlend = Math.max(0, Math.min(1, 1 - densityNow / Math.max(1e-6, sea)));\n    for (let i = rocket.currentStage; i < rocket.stages.length; i++) {\n      const st = rocket.stages[i];\n      const fuel = Math.max(0, st.fuelRemaining);\n      let isp = st.specificImpulse ?? 0;\n      if (i === rocket.currentStage) {\n        // Blend between sea-level and vacuum for current stage\n        const ispSea = st.seaLevelIsp ?? st.specificImpulse ?? 0;\n        const ispVac = st.vacuumIsp ?? st.specificImpulse ?? 0;\n        isp = ispSea + (ispVac - ispSea) * vacBlend;\n      } else {\n        // Assume upper stages burn in thin atmosphere: use vacuum Isp if available\n        isp = st.vacuumIsp ?? st.specificImpulse ?? 0;\n      }\n      if (fuel > 0 && isp > 0) {\n        const mAfter = Math.max(1e-6, mCurrent - fuel);\n        if (mAfter > 0 && mAfter < mCurrent) {\n          dvTotal += isp * g0 * Math.log(mCurrent / mAfter);\n          mCurrent = mAfter;\n        }\n      }\n      const hasLater = i < rocket.stages.length - 1;\n      if (hasLater) {\n        mCurrent = Math.max(1e-6, mCurrent - st.dryMass);\n      }\n    }\n    const dvText =\n      dvTotal >= 1000 ? `${(dvTotal / 1000).toFixed(2)} km/s` : `${dvTotal.toFixed(0)} m/s`;\n    ctx.fillText(`Delta-V:   ${dvText}`, 20, y);\n\n    // Draw fuel gauge\n    y += lineHeight + 12 * uiScale; // add full line spacing before gauge\n    // Center a slightly longer gauge within the panel\n    const desiredGW = Math.max(180 * uiScale, Math.min(panelW - 30 * uiScale, 220 * uiScale));\n    const gaugeX = panelX + (panelW - desiredGW) / 2;\n    this.drawFuelGauge(ctx, gaugeX, y, fuel, rocket, gameState, uiScale, desiredGW);\n\n    // Draw mission timer and restart button in top-right corner\n    // MENU on top, then Mission timer under it for alignment with orbit view\n    this.drawRestartButton(ctx, uiScale);\n    this.drawMissionTimer(ctx, missionTimer || 0, uiScale);\n\n    // Confirmation overlay for mode switch\n    if (this._modeConfirm?.pending) {\n      this.drawModeConfirm(ctx, this._modeConfirm.targetAuto === true);\n    }\n\n    // Mini-globe rotation: use world's rotation rate and game time\n    const earthAngle = (gameState.currentTime || 0) * gameState.world.earthRotationRate;\n    this.miniAngle = earthAngle; // base angle\n\n    // Mini-planet map in bottom-right corner\n    this.drawMiniMap(ctx, gameState, uiScale);\n\n    // Controls/Commands help panel (dynamic size). When in Auto Pilot, show a\n    // short command cheat sheet to hint the console language.\n    ctx.font = `${Math.round(12 * uiScale)}px monospace`;\n    const lines = [\n      'Controls:',\n      'Space - Start Engine',\n      'B - Cut Engine',\n      'T - Full Throttle',\n      'G - Zero Throttle',\n      'Up/Down - Throttle ±10%',\n      'Left/Right - Turn',\n      'S - Stage',\n      'Scroll - Zoom',\n    ];\n    let maxW = 0;\n    for (const ln of lines) {\n      const w = ctx.measureText(ln).width;\n      if (w > maxW) maxW = w;\n    }\n    const pad = 10;\n    const lineH = 15 * uiScale;\n    const helpW = Math.ceil(maxW) + pad * 2;\n    const helpH = lineH * lines.length + pad * 2;\n    const helpX = 10;\n    const helpY0 = this.canvas.height - helpH - 20; // start higher and fit content\n\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n    ctx.fillRect(helpX, helpY0, helpW, helpH);\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 1;\n    ctx.strokeRect(helpX, helpY0, helpW, helpH);\n\n    ctx.fillStyle = '#ffffff';\n    let helpY = helpY0 + pad + 12;\n    for (const ln of lines) {\n      ctx.fillText(ln, panelX + pad, helpY);\n      helpY += lineH;\n    }\n    // Auto-release clamps on ignite; no manual key needed\n\n    // Draw autopilot running indicator at bottom center when scripts are active\n    if (gameState.autopilotRunning) {\n      const text = 'Auto Pilot Active';\n      const margin = 14;\n      const padX = 12;\n      const h = 22; // fixed height for a steady bar\n      ctx.save();\n      ctx.font = '14px monospace';\n      const metrics = ctx.measureText(text);\n      const w = Math.ceil(metrics.width) + padX * 2;\n      const x = Math.round((this.canvas.width - w) / 2);\n      const y = this.canvas.height - h - margin;\n      // Background\n      ctx.fillStyle = 'rgba(0, 230, 118, 0.12)';\n      ctx.fillRect(x, y, w, h);\n      // Border\n      ctx.strokeStyle = '#00e676';\n      ctx.lineWidth = 1;\n      ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n      // Text\n      ctx.fillStyle = '#00e676';\n      ctx.textBaseline = 'middle';\n      ctx.textAlign = 'center';\n      ctx.fillText(text, Math.round(x + w / 2), Math.round(y + h / 2));\n      ctx.textAlign = 'left';\n      ctx.restore();\n    }\n\n    // Restore transformation state\n    ctx.restore();\n  }\n\n  // No-op: previous continent geometry removed\n\n  /**\n   * Mini 2D planet view with rocket and projected path\n   * Drawn in bottom-right corner as a HUD overlay\n   */\n  private drawMiniMap(ctx: CanvasRenderingContext2D, gameState: GameState, uiScale = 1): void {\n    const margin = Math.round(18 * uiScale);\n    const size = Math.max(120, Math.round(160 * uiScale));\n    const x = this.canvas.width - size - margin;\n    const y = this.canvas.height - size - margin;\n\n    // Panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.65)';\n    ctx.fillRect(x, y, size, size);\n    ctx.strokeStyle = '#88aaff';\n    ctx.lineWidth = Math.max(1, Math.round(1 * uiScale));\n    ctx.strokeRect(x, y, size, size);\n\n    // Planet disc centered in panel\n    const cx = x + size / 2;\n    const cy = y + size / 2;\n    const planetRadiusWorld = gameState.world.planetRadius;\n    const planetRadiusMini = Math.min(size * 0.24, size * 0.26); // smaller earth on HUD\n    const panelEdgeRadius = size / 2 - Math.max(4, Math.round(6 * uiScale)); // keep a small border inside the panel\n\n    // Use the same planet texture as the main view, scaled down\n    if (this.miniPlanetTex) {\n      ctx.save();\n      ctx.translate(cx, cy);\n\n      // Get the planet rotation angle from game state\n      // Using padBaseAngle + rotation to match the main planet\n      // Negate because screen Y is inverted\n      const omega = gameState.world.earthRotationRate || 0;\n      const padBaseAngle = Math.PI / 2; // Launch island is at top (π/2 radians)\n      const worldAng = -(padBaseAngle + omega * gameState.currentTime);\n      ctx.rotate(worldAng);\n\n      // Draw the planet texture\n      const texSize = planetRadiusMini * 2;\n      ctx.drawImage(this.miniPlanetTex, -texSize / 2, -texSize / 2, texSize, texSize);\n      ctx.restore();\n    } else {\n      // Fallback to simple circle if texture not available\n      ctx.beginPath();\n      ctx.arc(cx, cy, planetRadiusMini, 0, Math.PI * 2);\n      ctx.fillStyle = '#0b3766';\n      ctx.fill();\n      ctx.strokeStyle = '#204f25';\n      ctx.stroke();\n    }\n\n    // Draw projected trajectory (no thrust/drag). Simple two-body preview\n    // over enough time to reveal crash, orbit, or escape.\n    const info = this.getProjectedPath(gameState, 8 * 3600, 1.0);\n    const pathPreview = this.cachedPath || [];\n    // Dynamic outer scale: use the maximum radius in the preview, fallback to apoapsis\n    let maxR = planetRadiusWorld;\n    for (let i = 0; i < pathPreview.length; i++) {\n      const p = pathPreview[i];\n      const r = Math.hypot(p.x, p.y);\n      if (r > maxR) maxR = r;\n    }\n    if (info.apoAlt && Number.isFinite(info.apoAlt)) {\n      const rA = planetRadiusWorld + Math.max(0, info.apoAlt);\n      if (rA > maxR) maxR = rA;\n    }\n    // Clamp overall outer scale so escape doesn't blow up the map\n    const maxDisplayR = Math.min(maxR, planetRadiusWorld * 6);\n    // Ensure a comfortable outer scale so near-ground altitudes do not jump too far\n    // Set a minimum of ~1000 km to make ~500 km sit near mid-radius.\n    const aMaxDynamic = Math.max(1_000_000, maxDisplayR - planetRadiusWorld);\n\n    // Helper: map world (wx, wy) to minimap using logarithmic radial scaling.\n    // Log scale keeps far points visible without crushing near ones.\n    const worldToMini = (wx: number, wy: number) => {\n      const rWorld = Math.hypot(wx, wy);\n      const ux = rWorld > 0 ? wx / rWorld : 0;\n      const uy = rWorld > 0 ? wy / rWorld : 1; // default up\n\n      // Don't rotate the rocket position - it's already in the correct frame\n      // The planet texture is rotated to show the continent at the right position\n      // and the rocket world position is already correct\n      const alt = Math.max(0, rWorld - planetRadiusWorld);\n\n      // Log radial mapping: 0 -> planet edge, aMaxDynamic -> panel edge.\n      // Make early altitudes (e.g., 50 km) stay visually close to the planet.\n      // Target: ~50% radius near ~250 km rather than ~50 km.\n      const aRef = 250_000; // reference scale: balances near-ground vs orbit\n      const tLog = Math.min(1, Math.log1p(alt / aRef) / Math.log1p(aMaxDynamic / aRef));\n      // Compress low altitudes so ~500 km is around mid-radius\n      const shape = 1.6; // >1 compresses early values\n      const tRadial = tLog ** shape;\n      const rMini = planetRadiusMini + (panelEdgeRadius - planetRadiusMini) * tRadial;\n\n      // Convert unit vector to mini coords (y-up to screen space)\n      const dx = ux * rMini;\n      const dy = uy * rMini;\n      const sx = cx + dx;\n      const sy = cy - dy;\n      return { sx, sy };\n    };\n    const pathPts = this.cachedPath || [];\n    if (pathPts.length > 1) {\n      const maxDots = 1000; // cap for performance\n      const step = Math.max(1, Math.floor(pathPts.length / maxDots));\n      const dotR = Math.max(1, 1.1 * uiScale);\n      ctx.fillStyle = 'rgba(200,220,255,0.9)';\n      for (let i = 0; i < pathPts.length; i += step) {\n        const p = worldToMini(pathPts[i].x, pathPts[i].y);\n        ctx.beginPath();\n        ctx.arc(p.sx, p.sy, dotR, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n      // Apoapsis and periapsis markers\n      if (info.apoPos) {\n        const ap = worldToMini(info.apoPos.x, info.apoPos.y);\n        ctx.fillStyle = '#00ff66'; // green\n        ctx.beginPath();\n        ctx.arc(ap.sx, ap.sy, 2.2, 0, Math.PI * 2);\n        ctx.fill();\n      }\n      if (info.periPos) {\n        const pp = worldToMini(info.periPos.x, info.periPos.y);\n        ctx.fillStyle = '#ff3333'; // red\n        ctx.beginPath();\n        ctx.arc(pp.sx, pp.sy, 2.2, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n      // Legend above panel (stacked)\n      const apoY = y - Math.round(24 * uiScale);\n      const periY = y - Math.round(10 * uiScale);\n      ctx.font = `${Math.round(12 * uiScale)}px monospace`;\n      // Apoapsis label (green)\n      ctx.fillStyle = '#00ff66';\n      const apoLabel = Number.isFinite(info.apoAlt)\n        ? `${(info.apoAlt / 1000).toFixed(0)} km`\n        : '∞ (escape)';\n      ctx.fillText(`Apoapsis: ${apoLabel}`, x, apoY);\n      // Periapsis label (red)\n      ctx.fillStyle = '#ff6666';\n      const periLabel = Number.isFinite(info.periAlt)\n        ? `${(info.periAlt / 1000).toFixed(0)} km`\n        : '—';\n      ctx.fillText(`Periapsis: ${periLabel}`, x, periY);\n\n      // Stable orbit notice (place higher so it doesn't overlap apo/peri labels)\n      if (info.stableOrbit) {\n        ctx.fillStyle = '#00ff99';\n        const noticeY = y - Math.round(54 * uiScale);\n        ctx.fillText('Stable orbit achieved! 🎉', x, noticeY);\n      }\n    }\n\n    // Rocket marker as a small X\n    const rpos = gameState.rocket.position;\n    const m = worldToMini(rpos.x, rpos.y);\n    const r = Math.max(3, Math.round(4 * uiScale));\n    ctx.strokeStyle = '#ffcc00';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(m.sx - r, m.sy - r);\n    ctx.lineTo(m.sx + r, m.sy + r);\n    ctx.moveTo(m.sx - r, m.sy + r);\n    ctx.lineTo(m.sx + r, m.sy - r);\n    ctx.stroke();\n\n    // Label\n    ctx.font = `${Math.round(11 * uiScale)}px monospace`;\n    ctx.fillStyle = '#a8c0ff';\n    ctx.fillText('Orbit view', x + 8, y + 14);\n  }\n\n  /**\n   * Projected path integrator (simple two-body, no thrust/drag)\n   * steps: number of seconds (dtSeconds per step)\n   */\n  private computeProjectedPath(\n    gameState: GameState,\n    steps: number,\n    dtSeconds: number\n  ): Array<{ x: number; y: number }> {\n    const mu = gameState.world.gravitationalParameter as unknown as number;\n    const out: Array<{ x: number; y: number }> = [];\n    // Clone current state\n    let rx = gameState.rocket.position.x;\n    let ry = gameState.rocket.position.y;\n    let vx = gameState.rocket.velocity.x;\n    let vy = gameState.rocket.velocity.y;\n    const dt = Math.max(0.05, dtSeconds);\n    for (let i = 0; i < steps; i++) {\n      const r2 = rx * rx + ry * ry;\n      const r = Math.sqrt(r2);\n      // Stop if would hit the planet\n      if (r <= gameState.world.planetRadius) break;\n      // Gravity accel: -mu * r_hat / r^2\n      const invr3 = 1 / (r2 * r);\n      const ax = -mu * rx * invr3;\n      const ay = -mu * ry * invr3;\n      // Semi-implicit Euler\n      vx += ax * dt;\n      vy += ay * dt;\n      rx += vx * dt;\n      ry += vy * dt;\n      // Save every step; caller will subsample if needed\n      out.push({ x: rx, y: ry });\n    }\n    return out;\n  }\n\n  /**\n   * Cached accessor for projected path. Recomputes slowly while coasting in\n   * vacuum to keep apoapsis/periapsis steady.\n   */\n  private getProjectedPath(\n    gameState: GameState,\n    steps: number,\n    dtSeconds: number\n  ): {\n    apoAlt: number;\n    apoPos: { x: number; y: number } | null;\n    periAlt: number;\n    periPos: { x: number; y: number } | null;\n    stableOrbit: boolean;\n  } {\n    const now = Date.now();\n    const thrusting = gameState.rocket.isEngineIgnited && gameState.rocket.throttle > 0;\n    const vel = gameState.rocket.velocity;\n    const stage = gameState.rocket.currentStage;\n    const rmag = gameState.rocket.position.magnitude();\n    const altitude = rmag - gameState.world.planetRadius;\n    const inVacuumCoast = !thrusting && altitude >= 80_000;\n\n    // Decide if we need to recompute\n    let needRecalc = false;\n\n    // Always recompute if we have no cache\n    if (!this.cachedPath) needRecalc = true;\n\n    // If thrusting state or stage changed, recompute\n    if (this.lastThrusting !== thrusting || this.lastStage !== stage) needRecalc = true;\n\n    // If velocity changed significantly (magnitude or direction), recompute\n    if (this.lastVel && !inVacuumCoast) {\n      const dvx = vel.x - this.lastVel.x;\n      const dvy = vel.y - this.lastVel.y;\n      const dv = Math.hypot(dvx, dvy);\n      // Thresholds: 0.5 m/s magnitude change triggers recompute\n      if (dv > 0.5) needRecalc = true;\n      else {\n        // Check direction change (~0.5°)\n        const v1 = this.lastVel;\n        const dot = v1.x * vel.x + v1.y * vel.y;\n        const m1 = Math.hypot(v1.x, v1.y);\n        const m2 = Math.hypot(vel.x, vel.y);\n        if (m1 > 1e-3 && m2 > 1e-3) {\n          const c = Math.min(1, Math.max(-1, dot / (m1 * m2)));\n          const ang = Math.acos(c); // radians\n          if (ang > (0.5 * Math.PI) / 180) needRecalc = true; // >0.5°\n        }\n      }\n    } else {\n      needRecalc = true;\n    }\n\n    // Rate limiting: 1 Hz normally, 0.1 Hz when coasting in vacuum to keep apo/peri steady\n    const minInterval = inVacuumCoast ? 10_000 : 1000;\n    if (!needRecalc && now - this.lastProjTimeMs < minInterval && this.cachedInfo)\n      return this.cachedInfo;\n\n    // If not thrusting and velocity hasn't changed and we have cache, keep it\n    if (!needRecalc && this.cachedInfo) return this.cachedInfo;\n\n    // Recompute\n    const res = this.computeProjectedPathInfo(gameState, steps, dtSeconds);\n    const path = res.points;\n    this.cachedPath = path;\n    this.lastProjTimeMs = now;\n    this.lastVel = { x: vel.x, y: vel.y };\n    this.lastStage = stage;\n    this.lastThrusting = thrusting;\n    this.cachedInfo = {\n      apoAlt: res.apoAlt,\n      apoPos: res.apoPos,\n      periAlt: res.periAlt,\n      periPos: res.periPos,\n      stableOrbit: res.stableOrbit,\n    };\n    return this.cachedInfo;\n  }\n\n  /**\n   * Compute trajectory points plus apoapsis/periapsis and stable-orbit detection.\n   * Uses orbital elements (eccentricity e, angular momentum h) to get\n   * rp = h^2/(μ*(1+e)) and ra = h^2/(μ*(1−e)) when e < 1. If specific energy > 0,\n   * apoapsis is infinite (escape).\n   */\n  private computeProjectedPathInfo(\n    gameState: GameState,\n    simSeconds: number,\n    _dtSeconds: number\n  ): {\n    points: Array<{ x: number; y: number }>;\n    apoAlt: number;\n    apoPos: { x: number; y: number } | null;\n    periAlt: number;\n    periPos: { x: number; y: number } | null;\n    stableOrbit: boolean;\n  } {\n    const mu = gameState.world.gravitationalParameter as unknown as number;\n    const R = gameState.world.planetRadius;\n    const out: Array<{ x: number; y: number }> = [];\n\n    // Clone current state\n    let rx = gameState.rocket.position.x;\n    let ry = gameState.rocket.position.y;\n    let vx = gameState.rocket.velocity.x;\n    let vy = gameState.rocket.velocity.y;\n\n    // Compute instantaneous orbital elements (two-body, no thrust/drag)\n    const r0 = Math.hypot(rx, ry);\n    const v2_0 = vx * vx + vy * vy;\n    const rv = rx * vx + ry * vy;\n    const eVecX = (1 / mu) * ((v2_0 - mu / r0) * rx - rv * vx);\n    const eVecY = (1 / mu) * ((v2_0 - mu / r0) * ry - rv * vy);\n    const eMag = Math.hypot(eVecX, eVecY);\n    const h = Math.abs(rx * vy - ry * vx);\n    const rp = (h * h) / (mu * (1 + eMag));\n    let ra = Number.POSITIVE_INFINITY;\n    if (eMag < 1) {\n      ra = (h * h) / (mu * (1 - eMag));\n    }\n    let apoAlt = Number.isFinite(ra) ? Math.max(0, ra - R) : Number.POSITIVE_INFINITY;\n    const periAlt = Math.max(0, rp - R);\n    let apoPos: { x: number; y: number } | null = null;\n    let periPos: { x: number; y: number } | null = null;\n    const stableThreshold = 80_000;\n    let stableOrbit = eMag < 1 && rp - R > stableThreshold;\n\n    // Adaptive timestep: precise for the first hour, then progressively coarser\n    const pickDt = (tSim: number): number => {\n      if (tSim < 3600) return 1.0; // first hour: 1 s\n      if (tSim < 3 * 3600) return 5.0; // 1–3 h: 5 s\n      if (tSim < 6 * 3600) return 15.0; // 3–6 h: 15 s\n      return 30.0; // 6–8 h: 30 s\n    };\n\n    let lastAngle = Math.atan2(ry, rx);\n    let rotAccum = 0; // accumulate angle traversed\n    // If we already confirmed a stable ellipse, we can stop early after about one rev\n\n    const escapeRenderRadius = R * 6; // stop rendering once far away if escaping\n    let tSim = 0;\n    for (;;) {\n      const dt = pickDt(tSim);\n      if (tSim >= simSeconds) break;\n      const r2 = rx * rx + ry * ry;\n      const r = Math.sqrt(r2);\n      const alt = r - R;\n      if (r <= R) break; // collision\n\n      // Track closest/farthest positions for markers only if we don't have analytic ellipse\n      if (!Number.isFinite(ra)) {\n        // Hyperbolic: apoapsis undefined; keep the farthest point encountered for a marker\n        if (!apoPos || r > Math.hypot(apoPos.x, apoPos.y)) {\n          apoPos = { x: rx, y: ry };\n          apoAlt = alt;\n        }\n      } else {\n        // Elliptic: set approximate apo/peri marker positions near expected radii when crossed\n        if (!apoPos && Math.abs(r - ra) < 1000) apoPos = { x: rx, y: ry };\n        if (!periPos && Math.abs(r - rp) < 1000) periPos = { x: rx, y: ry };\n      }\n\n      // Save point\n      out.push({ x: rx, y: ry });\n\n      // Grav accel\n      const invr3 = 1 / (r2 * r);\n      const ax = -mu * rx * invr3;\n      const ay = -mu * ry * invr3;\n      // Semi-implicit Euler\n      vx += ax * dt;\n      vy += ay * dt;\n      rx += vx * dt;\n      ry += vy * dt;\n      tSim += dt;\n\n      // Escape detection (specific orbital energy > 0)\n      const v2 = vx * vx + vy * vy;\n      const energy = 0.5 * v2 - mu / r; // >0 => hyperbolic escape\n      if (energy > 0 && r > escapeRenderRadius) {\n        break; // sufficiently far on escape trajectory\n      }\n\n      // Angle accumulation for orbit detection\n      const ang = Math.atan2(ry, rx);\n      let dAng = ang - lastAngle;\n      // Wrap to [-pi, pi]\n      if (dAng > Math.PI) dAng -= 2 * Math.PI;\n      if (dAng < -Math.PI) dAng += 2 * Math.PI;\n      rotAccum += Math.abs(dAng);\n      lastAngle = ang;\n\n      // If we have completed ~one full revolution on an ellipse with perigee above threshold, stop\n      if (!stableOrbit && eMag < 1 && rotAccum >= 2 * Math.PI && rp - R > stableThreshold) {\n        stableOrbit = true;\n        // draw approximately one full revolution and stop early\n        break;\n      }\n    }\n    if (!Number.isFinite(ra)) {\n      // No apoapsis in hyperbolic case\n      apoAlt = Number.POSITIVE_INFINITY;\n    }\n\n    return { points: out, apoAlt, apoPos, periAlt, periPos, stableOrbit };\n  }\n\n  /**\n   * Format number with appropriate units and precision\n   */\n  private formatNumber(value: number, decimals = 0): string {\n    if (value >= 1_000_000) {\n      return `${(value / 1_000_000).toFixed(decimals)}M`;\n    }\n    if (value >= 1_000) {\n      return `${(value / 1_000).toFixed(decimals)}k`;\n    }\n    return value.toFixed(decimals);\n  }\n\n  /**\n   * Draw rocket position and attitude indicator\n   */\n  private drawRocketPositionIndicator(ctx: CanvasRenderingContext2D, gameState: GameState): void {\n    const width = 180;\n    const height = 120;\n    const x = this.canvas.width - width - 20;\n    const y = this.canvas.height - height - 20;\n\n    // Background panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.fillRect(x, y, width, height);\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 1;\n    ctx.strokeRect(x, y, width, height);\n\n    // Calculate rocket data\n    const rocketPos = gameState.rocket.position;\n    const altitude = gameState.world.getAltitude(rocketPos.magnitude());\n    const rocketRotation = gameState.rocket.rotation;\n    const velocity = gameState.rocket.velocity;\n\n    // Draw ground horizon line\n    const horizonY = y + height - 30;\n    const centerX = x + width / 2;\n\n    // Ground (brown)\n    ctx.fillStyle = '#8B4513';\n    ctx.fillRect(x + 1, horizonY, width - 2, 30);\n\n    // Sky (gradient blue)\n    const gradient = ctx.createLinearGradient(0, y + 1, 0, horizonY);\n    gradient.addColorStop(0, '#87CEEB');\n    gradient.addColorStop(1, '#4169E1');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(x + 1, y + 1, width - 2, horizonY - y - 1);\n\n    // Horizon line\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(x + 10, horizonY);\n    ctx.lineTo(x + width - 10, horizonY);\n    ctx.stroke();\n\n    // Draw rocket representation\n    this.drawRocketIcon(\n      ctx,\n      centerX,\n      horizonY - 20,\n      rocketRotation,\n      gameState.rocket.isEngineIgnited\n    );\n\n    // Velocity vector arrow\n    if (velocity.magnitude() > 1) {\n      this.drawVelocityArrow(ctx, centerX, horizonY - 20, velocity, rocketRotation);\n    }\n\n    // Attitude and altitude info\n    ctx.fillStyle = '#ffffff';\n    ctx.font = '11px monospace';\n\n    // Rotation angle (degrees from vertical)\n    const rotationDeg = ((rocketRotation * 180) / Math.PI).toFixed(0);\n    ctx.fillText(`Attitude: ${rotationDeg}°`, x + 10, y + 15);\n\n    // Velocity magnitude and direction\n    const velMag = velocity.magnitude();\n    const velAngleDeg = ((Math.atan2(velocity.x, velocity.y) * 180) / Math.PI).toFixed(0);\n    ctx.fillText(`Velocity: ${velMag.toFixed(1)} m/s`, x + 10, y + 30);\n    ctx.fillText(`Direction: ${velAngleDeg}°`, x + 10, y + 45);\n\n    // Distance from center (position magnitude)\n    const distanceFromCenter = rocketPos.magnitude();\n    ctx.fillText(`Radius: ${this.formatNumber(distanceFromCenter, 1)} m`, x + 10, y + 60);\n\n    // Label\n    ctx.font = '12px monospace';\n    ctx.textAlign = 'center';\n    ctx.fillText('POSITION & ATTITUDE', centerX, y + height - 5);\n    ctx.textAlign = 'left'; // Reset\n  }\n\n  /**\n   * Draw small rocket icon showing orientation\n   */\n  private drawRocketIcon(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    rotation: number,\n    engineOn: boolean\n  ): void {\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(rotation);\n\n    // Rocket body (white)\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(-2, -8, 4, 16);\n\n    // Rocket nose (orange)\n    ctx.fillStyle = '#ff8800';\n    ctx.beginPath();\n    ctx.moveTo(0, -8);\n    ctx.lineTo(-2, -12);\n    ctx.lineTo(2, -12);\n    ctx.closePath();\n    ctx.fill();\n\n    // Engine exhaust (if on)\n    if (engineOn) {\n      ctx.fillStyle = '#ff4500';\n      ctx.fillRect(-1, 8, 2, 6);\n    }\n\n    // Fins\n    ctx.fillStyle = '#666666';\n    ctx.fillRect(-3, 4, 2, 4);\n    ctx.fillRect(1, 4, 2, 4);\n\n    ctx.restore();\n  }\n\n  /**\n   * Draw velocity direction arrow\n   */\n  private drawVelocityArrow(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    velocity: Vector2,\n    rocketRotation: number\n  ): void {\n    const velAngle = Math.atan2(velocity.x, velocity.y);\n    const arrowLength = 20;\n\n    ctx.save();\n    ctx.translate(x, y);\n\n    // Green velocity arrow\n    ctx.strokeStyle = '#00ff00';\n    ctx.lineWidth = 2;\n\n    // Arrow line\n    const endX = Math.sin(velAngle) * arrowLength;\n    const endY = -Math.cos(velAngle) * arrowLength;\n\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(endX, endY);\n    ctx.stroke();\n\n    // Arrow head\n    ctx.save();\n    ctx.translate(endX, endY);\n    ctx.rotate(velAngle);\n\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(-3, -6);\n    ctx.lineTo(3, -6);\n    ctx.closePath();\n    ctx.fillStyle = '#00ff00';\n    ctx.fill();\n\n    ctx.restore();\n    ctx.restore();\n  }\n\n  /**\n   * Draw fuel gauge for current stage\n   */\n  private drawFuelGauge(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    totalFuel: number,\n    rocket: RocketState,\n    gameState: GameState,\n    uiScale = 1,\n    forcedWidth?: number\n  ): void {\n    const currentStage = rocket.stages[rocket.currentStage];\n    if (!currentStage) return;\n\n    const maxFuel = currentStage.propellantMass;\n    const currentFuel = currentStage.fuelRemaining;\n    const fuelRatio = Math.min(1, Math.max(0, currentFuel / maxFuel));\n\n    // Gauge dimensions\n    const gaugeWidth = typeof forcedWidth === 'number' ? forcedWidth : 200 * uiScale;\n    const gaugeHeight = 20 * uiScale;\n\n    // Label\n    ctx.fillStyle = '#ffffff';\n    ctx.font = `${Math.round(14 * uiScale)}px monospace`;\n    ctx.fillText(\n      `Fuel: ${this.formatNumber(currentFuel, 0)}/${this.formatNumber(maxFuel, 0)} kg`,\n      x,\n      y - 5\n    );\n\n    // Gauge background\n    ctx.fillStyle = '#333333';\n    ctx.fillRect(x, y, gaugeWidth, gaugeHeight);\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 1;\n    ctx.strokeRect(x, y, gaugeWidth, gaugeHeight);\n\n    // Fuel bar - color coded\n    const fuelBarWidth = gaugeWidth * fuelRatio;\n    let fuelColor: string;\n\n    if (fuelRatio > 0.5) {\n      fuelColor = '#00ff00'; // Green - good\n    } else if (fuelRatio > 0.2) {\n      fuelColor = '#ffff00'; // Yellow - warning\n    } else {\n      fuelColor = '#ff0000'; // Red - critical\n    }\n\n    ctx.fillStyle = fuelColor;\n    ctx.fillRect(x + 1, y + 1, fuelBarWidth - 2, gaugeHeight - 2);\n\n    // Percentage text\n    ctx.fillStyle = '#ffffff';\n    ctx.font = `${Math.round(12 * uiScale)}px monospace`;\n    const percentText = `${Math.round(fuelRatio * 100)}%`;\n    const textWidth = ctx.measureText(percentText).width;\n    ctx.fillText(percentText, x + gaugeWidth / 2 - textWidth / 2, y + Math.round(14 * uiScale));\n  }\n\n  /**\n   * Draw mission timer\n   */\n  private drawMissionTimer(ctx: CanvasRenderingContext2D, missionTime: number, uiScale = 1): void {\n    // Divide by 2 since base game speed is 2x (to show wall clock time)\n    const wallClockTime = missionTime / 2;\n    const minutes = Math.floor(wallClockTime / 60);\n    const seconds = Math.floor(wallClockTime % 60);\n    const timeText = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n\n    // Timer background\n    const timerW = 140 * uiScale;\n    const timerH = 30 * uiScale;\n    const margin = 10;\n    // Center horizontally to Earth's center in the orbit view (mini-map)\n    const miniMargin = Math.round(18 * uiScale);\n    const miniSize = Math.max(120, Math.round(160 * uiScale));\n    const miniX = this.canvas.width - miniSize - miniMargin;\n    const centerX = miniX + miniSize / 2;\n    // fine-tune slight visual offset to the right to match stroke widths\n    const fine = Math.round(2 * uiScale);\n    const timerX = Math.round(centerX - timerW / 2 + fine);\n    // Place under the MENU button\n    const buttonH = 30 * uiScale;\n    const gap = Math.round(6 * uiScale);\n    const timerY = margin + buttonH + gap;\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    ctx.fillRect(timerX, timerY, timerW, timerH);\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 1;\n    ctx.strokeRect(timerX, timerY, timerW, timerH);\n\n    // Timer text\n    ctx.fillStyle = '#ffffff';\n    ctx.font = `${Math.round(14 * uiScale)}px monospace`;\n    ctx.textAlign = 'center';\n    ctx.fillText(`Mission: ${timeText}`, timerX + timerW / 2, timerY + Math.round(20 * uiScale));\n    ctx.textAlign = 'left'; // Reset\n  }\n\n  /**\n   * Draw restart button\n   */\n  private drawRestartButton(ctx: CanvasRenderingContext2D, uiScale = 1): void {\n    // Match Mission timer size for visual coherence\n    const buttonW = 140 * uiScale;\n    const buttonH = 30 * uiScale;\n    const margin = 10;\n    // Center horizontally to Earth's center in the orbit view (mini-map)\n    const miniMargin = Math.round(18 * uiScale);\n    const miniSize = Math.max(120, Math.round(160 * uiScale));\n    const miniX = this.canvas.width - miniSize - miniMargin;\n    const centerX = miniX + miniSize / 2;\n    const fine = Math.round(2 * uiScale);\n    const buttonX = Math.round(centerX - buttonW / 2 + fine);\n    const buttonY = margin; // MENU above, mission under\n\n    // Button background\n    ctx.fillStyle = 'rgba(200, 50, 50, 0.8)';\n    ctx.fillRect(buttonX, buttonY, buttonW, buttonH);\n    ctx.strokeStyle = '#ff6666';\n    ctx.lineWidth = 1;\n    ctx.strokeRect(buttonX, buttonY, buttonW, buttonH);\n\n    // Button text\n    ctx.fillStyle = '#ffffff';\n    ctx.font = `${Math.round(14 * uiScale)}px monospace`;\n    ctx.textAlign = 'center';\n    ctx.fillText('MENU', buttonX + buttonW / 2, buttonY + Math.round(20 * uiScale));\n    ctx.textAlign = 'left'; // Reset\n\n    // Store button bounds for click detection\n    this.restartButtonBounds = { x: buttonX, y: buttonY, width: buttonW, height: buttonH };\n  }\n\n  // Autopilot HUD button removed; handled in the HTML console toolbar instead.\n\n  // Called by GameEngine to set confirmation UI state\n  setModeConfirm(pending: boolean, targetAuto: boolean): void {\n    this._modeConfirm = { pending, targetAuto };\n  }\n\n  private drawModeConfirm(ctx: CanvasRenderingContext2D, toAuto: boolean): void {\n    // Dim backdrop\n    ctx.fillStyle = 'rgba(0,0,0,0.6)';\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    const panelW = 360;\n    const panelH = 120;\n    const x = (this.canvas.width - panelW) / 2;\n    const y = (this.canvas.height - panelH) / 2;\n    ctx.fillStyle = 'rgba(20,20,30,0.95)';\n    ctx.strokeStyle = '#88aaff';\n    ctx.lineWidth = 2;\n    ctx.fillRect(x, y, panelW, panelH);\n    ctx.strokeRect(x, y, panelW, panelH);\n\n    ctx.fillStyle = '#ffffff';\n    ctx.font = '14px monospace';\n    // Friendly text based on target mode\n    const text = toAuto ? 'Restart into Auto Pilot mode?' : 'Restart into Manual mode?';\n    ctx.textAlign = 'center';\n    ctx.fillText(text, x + panelW / 2, y + 35);\n\n    // Buttons\n    const btnW = 120;\n    const btnH = 28;\n    const yesX = x + 40;\n    const noX = x + panelW - 40 - btnW;\n    const btnY = y + panelH - 45;\n    ctx.fillStyle = '#2d6a3e';\n    ctx.fillRect(yesX, btnY, btnW, btnH);\n    ctx.strokeStyle = '#55cc77';\n    ctx.strokeRect(yesX, btnY, btnW, btnH);\n    ctx.fillStyle = '#ffffff';\n    ctx.fillText('YES', yesX + btnW / 2, btnY + 19);\n\n    ctx.fillStyle = '#7a2d2d';\n    ctx.strokeStyle = '#ff7777';\n    ctx.fillRect(noX, btnY, btnW, btnH);\n    ctx.strokeRect(noX, btnY, btnW, btnH);\n    ctx.fillStyle = '#ffffff';\n    ctx.fillText('NO', noX + btnW / 2, btnY + 19);\n\n    // Expose bounds for clicks\n    this.confirmYesBounds = { x: yesX, y: btnY, width: btnW, height: btnH };\n    this.confirmNoBounds = { x: noX, y: btnY, width: btnW, height: btnH };\n\n    ctx.textAlign = 'left';\n  }\n\n  /**\n   * Handle window resize\n   */\n  handleResize(): void {\n    // HUD automatically adapts to canvas size\n  }\n}\n","import type { Vector2 } from '@/physics/Vector2.js';\nimport type { WorldParameters } from '@/physics/WorldParameters.js';\nimport { calculateTerminalVelocity } from '../physics/AtmosphericPhysics.js';\n\nexport type AtmosphereInputs = {\n  world: WorldParameters;\n  position: Vector2;\n  velocity: Vector2;\n  mass: number;\n  aeroCdEff: number;\n  aeroAreaEff: number;\n  heatLevel: number;\n  atmosphericGlow: number;\n  hasBurnedUp: boolean;\n  isGameOver: boolean;\n  currentTime: number;\n  overspeedTime?: number; // Track how long we've been overspeeding\n};\n\nexport type AtmosphereResult = {\n  velocity: Vector2;\n  heatLevel: number;\n  atmosphericGlow: number;\n  hasBurnedUp: boolean;\n  gameOverReason?: string;\n  explode?: boolean;\n  destroy?: boolean;\n  overspeedTime?: number;\n};\n\n/**\n * Clamp atmospheric speed softly and update heating/overstress. Pure fn.\n */\nexport function enforceAtmosphericLimits(\n  input: AtmosphereInputs,\n  deltaTime: number\n): AtmosphereResult {\n  const position = input.position;\n  let velocity = input.velocity;\n  const speed = velocity.magnitude();\n  const altitude = input.world.getAltitude(position.magnitude());\n\n  // Only apply within atmosphere (fake clamp off above ~80 km)\n  if (altitude >= 80_000) {\n    // Cool down gradually in space\n    return {\n      velocity,\n      heatLevel: Math.max(0, input.heatLevel - 10 * deltaTime),\n      atmosphericGlow: input.atmosphericGlow,\n      hasBurnedUp: input.hasBurnedUp,\n    };\n  }\n\n  const density = input.world.getAtmosphericDensity(altitude);\n  const gravity = input.world.getGravitationalAcceleration(position.magnitude());\n\n  // Compute a reference terminal velocity and set a max allowed speed factor above it\n  const mass = input.mass;\n  // Use effective Cd·A matching our aero model\n  const cd = input.aeroCdEff as number;\n  const area = input.aeroAreaEff as number;\n  // Terminal velocity is used as a soft reference, not a hard cap.\n  const vTerm = calculateTerminalVelocity(mass, density, cd, area, gravity);\n  // Allow a reasonable buffer above terminal velocity for powered ascent/re-entry glides\n  const vMax = (Number.isFinite(vTerm) ? vTerm : 10_000) * 1.35 + 50; // Moderately tolerant reference speed\n\n  // If exceeding the reference limit, apply only a mild atmospheric damping (not a hard clamp)\n  let heatLevel = input.heatLevel;\n  let atmosphericGlow = input.atmosphericGlow;\n  let hasBurnedUp = input.hasBurnedUp;\n  let gameOverReason: string | undefined;\n  let explode = false;\n  let destroy = false;\n\n  if (speed > vMax && speed > 0) {\n    const overRatio = speed / Math.max(1, vMax);\n    const densityNorm = Math.min(1, density / input.world.surfaceDensity);\n    // Make damping very light and sub-linear in over-speed so high TWR can push through\n    const over = Math.max(0, overRatio - 1);\n    const decelRate = (1.5 + 8 * densityNorm) * over ** 0.7; // m/s^2\n    const vUnit = velocity.multiply(1 / speed);\n    const deltaV = decelRate * deltaTime;\n    const newSpeed = Math.max(0, speed - deltaV);\n    velocity = vUnit.multiply(newSpeed);\n\n    // Heating accumulates when above the safe limit; reduced rate for more tolerance\n    heatLevel += (overRatio - 1) * (0.4 + 0.8 * densityNorm) * 50 * deltaTime;\n  } else {\n    // Near the limit (85%-100%) produces slight heating\n    const ratio = speed / Math.max(1, vMax);\n    if (ratio > 0.85) {\n      const densityNorm = Math.min(1, density / input.world.surfaceDensity);\n      heatLevel += (ratio - 0.85) * 20 * densityNorm * deltaTime;\n    } else {\n      // Cool down slowly if comfortably within limits\n      heatLevel = Math.max(0, heatLevel - 15 * deltaTime);\n    }\n  }\n\n  // Visual heating feedback scales with density and speed\n  const heatGlow = Math.min(1, (density / input.world.surfaceDensity) * (speed / (vMax + 1)));\n  atmosphericGlow = Math.max(atmosphericGlow, heatGlow);\n\n  // Burn-up if overheated too long\n  if (!hasBurnedUp && heatLevel >= 100) {\n    hasBurnedUp = true;\n    gameOverReason = 'Thermal failure (overheating)';\n    explode = true;\n    destroy = true;\n  }\n\n  // Track overspeed time\n  let overspeedTime = input.overspeedTime || 0;\n\n  // Random structural failure chance when far over the limit\n  if (\n    !input.isGameOver &&\n    !input.world.isInSpace(altitude) &&\n    Number.isFinite(vMax) &&\n    speed > vMax * 1.2 // Moderately tolerant: 1.2x instead of 1.15x\n  ) {\n    overspeedTime += deltaTime;\n\n    // Only calculate failure chance after 1 second of sustained overspeed\n    if (overspeedTime > 1.0) {\n      const ratio = speed / vMax;\n      const densityNorm = Math.min(1, density / input.world.surfaceDensity);\n      // Probability per second increases with (ratio-1.2)^2 and density\n      const pps = Math.min(0.9, (ratio - 1.2) * (ratio - 1.2) * (0.35 + 0.65 * densityNorm));\n      const p = 1 - Math.exp(-pps * deltaTime); // convert to per-frame\n      if (Math.random() < p) {\n        gameOverReason = 'Aerodynamic structural failure (overspeed)';\n        explode = true;\n        destroy = true;\n      }\n    }\n  } else {\n    // Reset overspeed timer if we're back within safe limits\n    overspeedTime = 0;\n  }\n\n  return {\n    velocity,\n    heatLevel,\n    atmosphericGlow,\n    hasBurnedUp,\n    gameOverReason,\n    explode,\n    destroy,\n    overspeedTime,\n  };\n}\n","export type AutopilotEnginePort = {\n  setThrottle(v: number): void;\n  igniteEngines(): void;\n  cutEngines(): void;\n  performStaging(): void;\n  setAutopilotHold(mode: 'none' | 'prograde' | 'retrograde' | 'up'): void;\n  setAutopilotTargetAngle(deg: number): void;\n  isEngineOn(): boolean;\n  getCurrentTWR(): number;\n  getRadialVelocity(): number;\n  getAltitude(): number;\n  getActiveStageFuel(): number;\n  setGameSpeed(v: number): void;\n  getApoapsisAltitude(): number;\n  getPeriapsisAltitude(): number;\n};\n\ntype Step = {\n  tick: (dt: number) => boolean; // return true when complete\n  onStop?: () => void; // called if user stops the script\n  onComplete?: (remaining: number) => void; // called when step finishes\n};\n\nexport class Autopilot {\n  private engine: AutopilotEnginePort;\n  private queue: Step[] = [];\n  private running = false;\n  private logFn: ((msg: string) => void) | null = null;\n\n  constructor(engine: AutopilotEnginePort) {\n    this.engine = engine;\n  }\n\n  setLogger(fn: (msg: string) => void) {\n    this.logFn = fn;\n  }\n  private log(msg: string) {\n    if (this.logFn) this.logFn(msg);\n  }\n\n  update(dt: number): void {\n    if (!this.running || this.queue.length === 0) return;\n    const step = this.queue[0];\n    const done = step.tick(dt);\n    if (done) {\n      this.queue.shift();\n      step.onComplete?.(this.queue.length);\n      if (this.queue.length === 0) {\n        // Script finished: release holds and restore speed so\n        // keyboard/manual controls feel normal again.\n        this.running = false;\n        this.engine.setAutopilotHold('none');\n        this.engine.setGameSpeed(1);\n        this.log?.('> script complete');\n      }\n    }\n  }\n\n  stop(): void {\n    if (this.queue.length && this.queue[0].onStop) this.queue[0].onStop?.();\n    this.queue = [];\n    this.running = false;\n    // release any holds\n    this.engine.setAutopilotHold('none');\n  }\n\n  isRunning(): boolean {\n    return this.running && this.queue.length > 0;\n  }\n\n  runScript(text: string): void {\n    this.stop();\n    // Split helpers: support '////', 'then', and implicit splits before keywords\n    let normalized = text.replace(/\\s*\\/\\/\\/\\/\\s*/g, '\\n');\n    normalized = normalized.replace(/\\bthen\\b/gi, '\\n');\n    // Split before most keywords, but NOT before 'until' because it belongs\n    // with the previous token (e.g., 'throttle 1 until apoapsis ...' or\n    // 'wait until apoapsis').\n    const keywords = [\n      'ignite',\n      'ignit',\n      'start',\n      'engine on',\n      'cut',\n      'engine off',\n      'stop',\n      'hold',\n      'throttle',\n      'wait',\n      'burn_until',\n      'pitch',\n    ];\n    for (const kw of keywords) {\n      const re = new RegExp(`(?!^)\\\\b${kw.replace(' ', '\\\\s+')}\\\\b`, 'gi');\n      normalized = normalized.replace(re, (m) => `\\n${m}`);\n    }\n    const lines = normalized\n      .split(/\\n+/)\n      .map((l) => l.trim())\n      .filter(Boolean);\n    let ok = true;\n    for (const line of lines) ok = this.enqueueCommand(line) && ok;\n    if (!ok) {\n      this.log('ERR: Script has errors; nothing started.');\n      this.queue = [];\n      this.running = false;\n      return;\n    }\n    this.running = this.queue.length > 0;\n    this.log(`Queued ${this.queue.length} steps.`);\n  }\n\n  runCommand(cmd: string): void {\n    let normalized = cmd.replace(/\\s*\\/\\/\\/\\/\\s*/g, '\\n');\n    normalized = normalized.replace(/\\bthen\\b/gi, '\\n');\n    const keywords = [\n      'ignite',\n      'ignit',\n      'start',\n      'engine on',\n      'cut',\n      'engine off',\n      'stop',\n      'hold',\n      'throttle',\n      'wait',\n      'burn_until',\n      'pitch',\n    ];\n    for (const kw of keywords) {\n      const re = new RegExp(`(?!^)\\\\b${kw.replace(' ', '\\\\s+')}\\\\b`, 'gi');\n      normalized = normalized.replace(re, (m) => `\\n${m}`);\n    }\n    const parts = normalized\n      .split(/\\n+/)\n      .map((p) => p.trim())\n      .filter(Boolean);\n    let ok = true;\n    for (const p of parts) ok = this.enqueueCommand(p) && ok;\n    if (!ok) {\n      this.log('ERR: Command has errors; nothing started.');\n      return;\n    }\n    this.running = this.queue.length > 0;\n  }\n\n  private enqueueCommand(cmd: string): boolean {\n    // Simple parse: tokens by space, lowercase keyword\n    const raw = cmd.replace(/#/g, '//').split('//')[0].trim();\n    if (!raw) return true;\n    const lower = raw.toLowerCase();\n    if (lower.startsWith('throttle')) {\n      const m = raw.match(/throttle\\s+([0-9.]+)/i);\n      const val = m ? Math.max(0, Math.min(1, Number.parseFloat(m[1]))) : 0;\n      if (!m || Number.isNaN(val)) {\n        this.log(`ERR: throttle expects a number 0..1 (in: \"${raw}\")`);\n        return false;\n      }\n      this.queue.push({\n        tick: () => {\n          this.engine.setThrottle(val);\n          this.log(`throttle ${val}`);\n          return true;\n        },\n      });\n      return true;\n    }\n    if (lower === 'ignite' || lower === 'ignit' || lower === 'engine on' || lower === 'start') {\n      this.queue.push({\n        tick: () => {\n          this.engine.igniteEngines();\n          this.log('ignite');\n          return true;\n        },\n      });\n      return true;\n    }\n    if (lower === 'cut' || lower === 'engine off' || lower === 'stop') {\n      this.queue.push({\n        tick: () => {\n          this.engine.cutEngines();\n          this.log('cut');\n          return true;\n        },\n      });\n      return true;\n    }\n    if (lower === 'stage') {\n      this.queue.push({\n        tick: () => {\n          this.engine.performStaging();\n          this.log('stage');\n          return true;\n        },\n      });\n      return true;\n    }\n    if (lower.startsWith('wait')) {\n      // wait N  OR  wait until apoapsis/periapsis\n      const m = raw.match(/wait\\s+([0-9.]+)/i);\n      const muApo = /wait\\s+until\\s+apoapsis/i.test(raw);\n      const muPeri = /wait\\s+until\\s+periapsis/i.test(raw);\n      const muAlt = raw.match(/wait\\s+until\\s+altitude\\s+([0-9_.]+)/i);\n      const muStage = /wait\\s+until\\s+stage\\s+(empty|depleted)/i.test(raw);\n      if (muApo) {\n        this.queue.push(this.waitApo());\n        return true;\n      }\n      if (muPeri) {\n        this.queue.push(this.waitPeri());\n        return true;\n      }\n      if (muStage) {\n        this.queue.push(this.waitStageEmpty());\n        return true;\n      }\n      if (muAlt) {\n        const targ = Number.parseFloat(muAlt[1].replace(/_/g, ''));\n        if (!Number.isFinite(targ)) {\n          this.log(`ERR: wait until altitude expects a number (in: \"${raw}\")`);\n          return false;\n        }\n        this.queue.push(this.waitAlt(targ));\n        return true;\n      }\n      let time = m ? Number.parseFloat(m[1]) : Number.NaN;\n      if (!m || Number.isNaN(time)) {\n        this.log(\n          `ERR: wait expects seconds or \"wait until apoapsis|periapsis|altitude N\" (in: \"${raw}\")`\n        );\n        return false;\n      }\n      this.queue.push({\n        tick: (dt) => {\n          time -= dt;\n          return time <= 0;\n        },\n      });\n      return true;\n    }\n    if (lower.startsWith('hold')) {\n      const m = raw.match(/hold\\s+(prograde|retrograde|up|none)/i);\n      const mode = ((m ? m[1] : 'none') as string).toLowerCase() as\n        | 'prograde'\n        | 'retrograde'\n        | 'up'\n        | 'none';\n      this.queue.push({\n        tick: () => {\n          this.engine.setAutopilotHold(mode);\n          this.log(`hold ${mode}`);\n          return true;\n        },\n      });\n      return true;\n    }\n    if (lower.startsWith('pitch')) {\n      // pitch east 5  |  pitch west 5\n      const m = raw.match(/pitch\\s+(east|west)\\s+([0-9.]+)/i);\n      if (!m) {\n        this.log(`ERR: pitch expects 'pitch east|west <deg>' (in: \"${raw}\")`);\n        return false;\n      }\n      const dir = m[1].toLowerCase();\n      const deg = Number.parseFloat(m[2]);\n      if (!Number.isFinite(deg)) {\n        this.log(`ERR: pitch angle invalid (in: \"${raw}\")`);\n        return false;\n      }\n      const signed = dir === 'east' ? -Math.abs(deg) : Math.abs(deg);\n      this.queue.push({\n        tick: () => {\n          this.engine.setAutopilotTargetAngle(signed);\n          this.log(`pitch ${dir} ${deg}`);\n          return true;\n        },\n      });\n      return true;\n    }\n    // until apoapsis >= 100000 then throttle 0.3\n    if (lower.startsWith('until apoapsis')) {\n      // If a number is provided, burn/wait until target apoapsis; otherwise wait until reaching apoapsis\n      const mv = raw.match(/apoapsis\\s*(?:=|>=|<=)?\\s*([0-9_.]+)/i);\n      const mt = raw.match(/throttle\\s*([0-9.]+)/i);\n      const target = mv ? Number.parseFloat(mv[1].replace(/_/g, '')) : Number.NaN;\n      const thr = mt ? Math.max(0, Math.min(1, Number.parseFloat(mt[1]))) : undefined;\n      if (!Number.isFinite(target)) {\n        // No number: interpret as waiting until passing apoapsis\n        this.queue.push(this.waitApo());\n        return true;\n      }\n      this.queue.push(this.untilApo(target, thr));\n      return true;\n    }\n    // until stage empty|depleted\n    if (lower.startsWith('until stage')) {\n      if (/until\\s+stage\\s+(empty|depleted)/i.test(raw)) {\n        this.queue.push(this.waitStageEmpty());\n        return true;\n      }\n      this.log(`ERR: until stage expects 'empty|depleted' (in: \"${raw}\")`);\n      return false;\n    }\n    // burn_until apoapsis 120000 throttle 0.6\n    if (lower.startsWith('burn_until apoapsis')) {\n      const mv = raw.match(/apoapsis\\s*([0-9_.]+)/i);\n      const mt = raw.match(/throttle\\s*([0-9.]+)/i);\n      const target = mv ? Number.parseFloat(mv[1].replace(/_/g, '')) : Number.NaN;\n      const thr = mt ? Math.max(0, Math.min(1, Number.parseFloat(mt[1]))) : 1.0;\n      if (!Number.isFinite(target)) {\n        this.log(`ERR: burn_until apoapsis expects a number (in: \"${raw}\")`);\n        return false;\n      }\n      this.queue.push(this.untilApo(target, thr));\n      return true;\n    }\n    if (lower.startsWith('until periapsis')) {\n      const mv = raw.match(/periapsis\\s*(?:=|>=|<=)?\\s*([0-9_.]+)/i);\n      const mt = raw.match(/throttle\\s*([0-9.]+)/i);\n      const target = mv ? Number.parseFloat(mv[1].replace(/_/g, '')) : Number.NaN;\n      const thr = mt ? Math.max(0, Math.min(1, Number.parseFloat(mt[1]))) : undefined;\n      if (!Number.isFinite(target)) {\n        // no number -> wait until periapsis pass (when radial velocity > 0)\n        this.queue.push(this.waitPeri());\n        return true;\n      }\n      this.queue.push(this.untilPeri(target, thr));\n      return true;\n    }\n    // until twr <= X  [then throttle Y]\n    if (lower.startsWith('until twr')) {\n      const m = raw.match(/twr\\s*([<>]=?)\\s*([0-9.]+)/i);\n      const mt = raw.match(/throttle\\s*([0-9.]+)/i);\n      if (m) {\n        const op = m[1];\n        const val = Number.parseFloat(m[2]);\n        const thr = mt ? Math.max(0, Math.min(1, Number.parseFloat(mt[1]))) : undefined;\n        if (!Number.isFinite(val)) {\n          this.log(`ERR: until twr expects a number (in: \"${raw}\")`);\n          return false;\n        }\n        this.queue.push(this.untilTwr(op, val, thr));\n        return true;\n      }\n      this.log(`ERR: until twr expects '<= or >=' then a number (in: \"${raw}\")`);\n      return false;\n    }\n    this.queue.push({\n      tick: () => {\n        this.log(`ERR: Unknown command: ${raw}`);\n        return true;\n      },\n    });\n    return false;\n  }\n\n  private untilApo(target: number, thr?: number): Step {\n    let prev = Number.NaN;\n    return {\n      tick: (_dt) => {\n        if (!Number.isFinite(target)) return true;\n        if (typeof thr === 'number') this.engine.setThrottle(thr);\n        if (!this.engine.isEngineOn() && (thr ?? 0) > 0) this.engine.igniteEngines();\n        const apo = this.engine.getApoapsisAltitude();\n        // If already above target, stop immediately if it is increasing (moving away)\n        if (apo >= target) {\n          if (!Number.isNaN(prev) && apo > prev + 0.01) {\n            return true; // increasing away from target -> stop immediately\n          }\n          // If not increasing and has dropped to target or below, stop\n          if (!Number.isNaN(prev) && apo <= target) {\n            return true;\n          }\n        }\n        prev = apo;\n        // Normal case: continue until reaches target\n        if (apo >= target) return true;\n        return false;\n      },\n      onComplete: (remaining) => {\n        if (remaining === 0) this.engine.cutEngines();\n      },\n    };\n  }\n\n  private untilTwr(op: string, val: number, thr?: number): Step {\n    const cmp = (x: number) => (op === '<=' ? x <= val : op === '>=' ? x >= val : false);\n    return {\n      tick: (_dt) => {\n        if (typeof thr === 'number') this.engine.setThrottle(thr);\n        const twr = this.engine.getCurrentTWR();\n        return cmp(twr);\n      },\n    };\n  }\n\n  private untilPeri(target: number, thr?: number): Step {\n    let prev = Number.NaN;\n    return {\n      tick: (_dt) => {\n        if (!Number.isFinite(target)) return true;\n        if (typeof thr === 'number') this.engine.setThrottle(thr);\n        if (!this.engine.isEngineOn() && (thr ?? 0) > 0) this.engine.igniteEngines();\n        const p = this.engine.getPeriapsisAltitude();\n        if (p >= target) {\n          if (!Number.isNaN(prev) && p > prev + 0.01) {\n            return true; // increasing away when already above target -> stop\n          }\n          if (!Number.isNaN(prev) && p <= target) {\n            return true;\n          }\n        }\n        prev = p;\n        if (p >= target) return true;\n        return false;\n      },\n      onComplete: (remaining) => {\n        if (remaining === 0) this.engine.cutEngines();\n      },\n    };\n  }\n\n  // Wait until passing apoapsis (radial velocity becomes negative)\n  private waitApo(): Step {\n    let boosted = false;\n    return {\n      tick: (_dt) => {\n        if (!boosted) {\n          this.engine.setGameSpeed(10);\n          boosted = true;\n        }\n        const v = this.engine.getRadialVelocity();\n        // passing apo when v_rad switches from + to -; accept near zero\n        return v <= 0;\n      },\n      onStop: () => {\n        this.engine.setGameSpeed(1);\n      },\n      onComplete: () => {\n        this.engine.setGameSpeed(1);\n      },\n    };\n  }\n\n  // Wait until passing periapsis (radial velocity becomes positive)\n  private waitPeri(): Step {\n    return {\n      tick: (_dt) => {\n        const v = this.engine.getRadialVelocity();\n        return v >= 0;\n      },\n    };\n  }\n\n  // Wait until altitude >= target (meters)\n  private waitAlt(target: number): Step {\n    return {\n      tick: (_dt) => {\n        if (!Number.isFinite(target)) return true;\n        const p = this.engine.getAltitude();\n        return p >= target;\n      },\n    };\n  }\n\n  // Wait until current stage is empty (fuelRemaining <= ~0)\n  private waitStageEmpty(): Step {\n    return {\n      tick: (_dt) => {\n        const f = this.engine.getActiveStageFuel();\n        if (!Number.isFinite(f)) return false; // keep waiting if unknown\n        return f <= 1; // treat <=1 kg as empty\n      },\n    };\n  }\n}\n","import type { RigidBody } from '../physics/RigidBody.js';\nimport { Vector2 } from '../physics/Vector2.js';\nimport type { RocketRenderer } from '../rendering/RocketRenderer.js';\nimport type { EffectsSystem } from './EffectsSystem.js';\nimport type { RocketConfiguration } from './RocketConfiguration.js';\nimport type { SimpleSoundSystem } from './SimpleSoundSystem.js';\nimport type { StageManager } from './StageManager.js';\nimport type { GameState } from './types.js';\n\ninterface CommandContext {\n  gameState: GameState;\n  rocketBody: RigidBody;\n  rocketConfig: RocketConfiguration;\n  soundSystem: SimpleSoundSystem;\n  effectsSystem: EffectsSystem;\n  stageManager: StageManager;\n  rocketRenderer: RocketRenderer;\n  debugLog: (...args: unknown[]) => void;\n  destroyRocket: (reason: string) => void;\n}\n\n/**\n * Executes rocket commands (ignite, throttle, staging)\n */\nexport class CommandExecutor {\n  private context: CommandContext;\n\n  constructor(context: CommandContext) {\n    this.context = context;\n  }\n\n  updateContext(updates: Partial<CommandContext>): void {\n    Object.assign(this.context, updates);\n  }\n\n  /**\n   * Ignite engines\n   */\n  igniteEngines(): boolean {\n    const { gameState, rocketConfig, soundSystem, debugLog } = this.context;\n\n    // Check if current stage has fuel\n    const activeStage = rocketConfig.getActiveStage();\n    if (!activeStage || activeStage.fuelRemaining <= 0) {\n      debugLog('❌ Cannot ignite - no fuel remaining in current stage!');\n      return false;\n    }\n\n    const thrust = rocketConfig.getCurrentThrust();\n    debugLog(`Attempting ignition - thrust: ${thrust}, fuel: ${activeStage.fuelRemaining}kg`);\n\n    if (thrust > 0) {\n      gameState.rocket.isEngineIgnited = true;\n      gameState.rocket.hasEverLaunched = true;\n\n      // Auto-set some throttle for easier testing\n      gameState.rocket.throttle = 0.5;\n\n      // Auto-release pad clamps on initial ignition\n      if (gameState.rocket.isClamped) {\n        gameState.rocket.isClamped = false;\n        debugLog('🧰 Pad clamps auto-released. Liftoff!');\n      }\n\n      debugLog('✅ Engine start! Throttle 50%');\n      soundSystem.playEngineIgnite();\n      return true;\n    }\n\n    debugLog('❌ No thrust available - ignition failed');\n    return false;\n  }\n\n  /**\n   * Set throttle\n   */\n  setThrottle(value: number): void {\n    const { gameState, soundSystem, debugLog } = this.context;\n\n    gameState.rocket.throttle = Math.max(0, Math.min(1, value));\n    debugLog(`Throttle set to ${(gameState.rocket.throttle * 100).toFixed(0)}%`);\n\n    // Update engine sound\n    if (gameState.rocket.isEngineIgnited) {\n      soundSystem.setEngineThrottle(gameState.rocket.throttle);\n    }\n  }\n\n  /**\n   * Cut engines\n   */\n  cutEngines(): void {\n    const { gameState, soundSystem, debugLog } = this.context;\n\n    gameState.rocket.isEngineIgnited = false;\n    gameState.rocket.throttle = 0;\n    debugLog('🔥 Engines cut! Complete engine shutdown.');\n    soundSystem.stopEngine();\n  }\n\n  /**\n   * Perform staging\n   */\n  performStaging(): boolean {\n    const {\n      gameState,\n      rocketBody,\n      rocketConfig,\n      effectsSystem,\n      soundSystem,\n      stageManager,\n      rocketRenderer,\n      debugLog,\n      destroyRocket,\n    } = this.context;\n\n    const currentThrust = rocketConfig.getCurrentThrust() * gameState.rocket.throttle;\n\n    // Check if this would cause explosion (engines on)\n    if (rocketConfig.wouldExplodeOnStaging(currentThrust)) {\n      debugLog('💥 EXPLOSION! Cannot stage with engines firing - catastrophic failure!');\n\n      // Create explosion\n      effectsSystem.createExplosion(gameState.rocket.position, gameState.rocket.velocity);\n      soundSystem.playExplosion();\n\n      // Destroy rocket\n      destroyRocket('Staging while engines firing');\n      return false;\n    }\n\n    // Store current physics state before staging\n    const currentPosition = rocketBody.position.clone();\n    const currentVelocity = rocketBody.velocity.clone();\n\n    if (rocketConfig.performStaging()) {\n      // Update game state\n      gameState.rocket.currentStage = rocketConfig.getCurrentStageIndex();\n\n      // Preserve position and velocity\n      rocketBody.position = currentPosition;\n      rocketBody.velocity = currentVelocity;\n\n      // Update mass\n      rocketBody.setMass(rocketConfig.getCurrentMass());\n\n      // Create staging animation\n      const rocketDown = new Vector2(\n        Math.sin(gameState.rocket.rotation),\n        -Math.cos(gameState.rocket.rotation)\n      );\n      const dims = rocketRenderer.getRocketBounds(gameState.rocket);\n\n      stageManager.createStagingAnimation(\n        gameState,\n        rocketDown,\n        gameState.rocket.exhaustY,\n        dims.height\n      );\n\n      debugLog('✅ Stage separated safely! Position and velocity preserved.');\n      return true;\n    }\n\n    debugLog('Cannot stage - no more stages available');\n    return false;\n  }\n\n  /**\n   * Nudge throttle by delta\n   */\n  nudgeThrottle(delta: number): void {\n    const t = Math.max(0, Math.min(1, this.context.gameState.rocket.throttle + delta));\n    this.setThrottle(t);\n  }\n}\n","import { Vector2 } from '@/physics/Vector2';\nimport type { CanvasRenderer } from '@/rendering/CanvasRenderer';\n\n// Visual helpers for debris, smoke and explosions.\n// Idea: keep rendering/state here so GameEngine stays smaller.\nexport class StagingVisuals {\n  // debris from stage separation\n  private debris: Array<{\n    pos: Vector2;\n    vel: Vector2;\n    rotation: number;\n    rotSpeed: number;\n    life: number;\n  }> = [];\n  // simple smoke puffs\n  private smoke: Array<{\n    pos: Vector2;\n    vel: Vector2;\n    life: number;\n    maxLife: number;\n    size: number;\n  }> = [];\n  // cartoon explosions\n  private explosions: Array<{\n    pos: Vector2;\n    vel: Vector2;\n    life: number;\n    maxLife: number;\n    size: number;\n    particles: Array<{ pos: Vector2; vel: Vector2; color: string; size: number }>;\n  }> = [];\n\n  // spawn one debris piece\n  addDebris(pos: Vector2, vel: Vector2, rot: number, rotSpeed: number, life = 6): void {\n    this.debris.push({ pos: pos.clone(), vel: vel.clone(), rotation: rot, rotSpeed, life });\n    if (this.debris.length > 80) this.debris.shift(); // hard cap\n  }\n\n  // add a light smoke puff\n  addSmoke(pos: Vector2, vel: Vector2, size = 8, life = 1.8): void {\n    this.smoke.push({ pos: pos.clone(), vel: vel.clone(), life: 0, maxLife: life, size });\n    if (this.smoke.length > 120) this.smoke.splice(0, this.smoke.length - 120);\n  }\n\n  // create explosion at pos with small random particles\n  createExplosion(pos: Vector2, vel: Vector2): void {\n    const particles: Array<{ pos: Vector2; vel: Vector2; color: string; size: number }> = [];\n    for (let i = 0; i < 30; i++) {\n      const a = (Math.PI * 2 * i) / 30 + Math.random() * 0.2;\n      const sp = 40 + Math.random() * 60;\n      const pv = new Vector2(Math.cos(a) * sp + vel.x * 0.1, Math.sin(a) * sp + vel.y * 0.1);\n      const c = i % 2 === 0 ? '#ffcc66' : '#ff6633';\n      const sz = 2 + Math.random() * 3;\n      particles.push({ pos: pos.clone(), vel: pv, color: c, size: sz });\n    }\n    this.explosions.push({\n      pos: pos.clone(),\n      vel: vel.clone(),\n      life: 0,\n      maxLife: 2.0,\n      size: 16,\n      particles,\n    });\n    if (this.explosions.length > 8) this.explosions.shift();\n  }\n\n  // update all visuals\n  update(dt: number): void {\n    // debris update\n    for (let i = this.debris.length - 1; i >= 0; i--) {\n      const d = this.debris[i];\n      d.pos = d.pos.add(d.vel.multiply(dt));\n      d.rotation += d.rotSpeed * dt;\n      d.life -= dt;\n      if (d.life <= 0) this.debris.splice(i, 1);\n    }\n    // smoke update\n    for (let i = this.smoke.length - 1; i >= 0; i--) {\n      const s = this.smoke[i];\n      s.life += dt;\n      s.pos = s.pos.add(s.vel.multiply(dt));\n      if (s.life >= s.maxLife) this.smoke.splice(i, 1);\n    }\n    // explosions update\n    for (let i = this.explosions.length - 1; i >= 0; i--) {\n      const e = this.explosions[i];\n      e.life += dt;\n      e.pos = e.pos.add(e.vel.multiply(dt));\n      for (const p of e.particles) {\n        p.pos = p.pos.add(p.vel.multiply(dt));\n      }\n      if (e.life >= e.maxLife) this.explosions.splice(i, 1);\n    }\n  }\n\n  // draw elements meant to be behind the rocket (e.g., smoke)\n  drawBehind(renderer: CanvasRenderer): void {\n    // smoke (faded circles behind plume)\n    for (const s of this.smoke) {\n      const t = Math.max(0, Math.min(1, s.life / s.maxLife));\n      const alpha = 1 - t;\n      const size = s.size * (1 + t * 1.2);\n      renderer.drawCircle(s.pos, size, `rgba(200,200,200,${alpha * 0.6})`);\n    }\n  }\n\n  // draw elements meant to be in front of the rocket (debris/explosions)\n  drawFront(renderer: CanvasRenderer): void {\n    // debris (small rectangles)\n    for (const d of this.debris) {\n      renderer.drawRotated(d.pos, d.rotation, () => {\n        renderer.drawRectangle(new Vector2(-2, -1), 4, 2, 'rgba(180,180,180,0.8)');\n      });\n    }\n    // explosions\n    for (const e of this.explosions) {\n      const age = e.life / e.maxLife;\n      for (const p of e.particles) {\n        renderer.drawCircle(p.pos, p.size, p.color);\n      }\n      const flash = e.size * (1 + age * 2);\n      const a = 1 - age;\n      renderer.drawCircle(e.pos, flash, `rgba(255,220,160,${a})`);\n    }\n  }\n}\n","import { Vector2 } from '../physics/Vector2.js';\nimport type { WorldParameters } from '../physics/WorldParameters.js';\nimport type { CanvasRenderer } from '../rendering/CanvasRenderer.js';\nimport { StagingVisuals } from '../rendering/StagingVisuals.js';\nimport type { GameState } from './types.js';\n\ninterface VelocityStreak {\n  pos: Vector2;\n  vel: Vector2;\n  life: number;\n  intensity: number;\n}\n\n/**\n * Manages all visual effects: explosions, smoke, debris, speed streaks, atmospheric glow\n */\nexport class EffectsSystem {\n  private stagingVis: StagingVisuals;\n  private velocityStreaks: VelocityStreak[] = [];\n  private atmosphericGlow = 0;\n  private heatLevel = 0;\n  private hasBurnedUp = false;\n\n  constructor() {\n    this.stagingVis = new StagingVisuals();\n  }\n\n  /**\n   * Reset all effects\n   */\n  reset(): void {\n    this.stagingVis = new StagingVisuals();\n    this.velocityStreaks = [];\n    this.atmosphericGlow = 0;\n    this.heatLevel = 0;\n    this.hasBurnedUp = false;\n  }\n\n  /**\n   * Update all effects\n   */\n  update(deltaTime: number): void {\n    // Update staging visuals (smoke, debris, explosions)\n    this.stagingVis.update(deltaTime);\n\n    // Update velocity streaks\n    for (let i = this.velocityStreaks.length - 1; i >= 0; i--) {\n      const streak = this.velocityStreaks[i];\n      streak.life -= deltaTime * 2;\n      streak.pos = streak.pos.add(streak.vel.multiply(deltaTime));\n\n      if (streak.life <= 0) {\n        this.velocityStreaks.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * Render all effects\n   */\n  render(renderer: CanvasRenderer, rocket: GameState['rocket']): void {\n    // Draw effects behind rocket\n    this.stagingVis.drawBehind(renderer);\n\n    // Draw speed effects\n    this.drawSpeedEffects(renderer);\n\n    // Atmospheric heating glow removed - was causing unwanted ring effect\n\n    // Note: Front effects drawn after rocket in main render loop\n  }\n\n  /**\n   * Render effects that go in front of rocket\n   */\n  renderFront(renderer: CanvasRenderer): void {\n    this.stagingVis.drawFront(renderer);\n  }\n\n  /**\n   * Update speed-based effects\n   */\n  updateSpeedEffects(\n    deltaTime: number,\n    gameState: GameState,\n    world: WorldParameters,\n    rocketDown: Vector2,\n    bottomDistance: number\n  ): void {\n    const velocity = gameState.rocket.velocity;\n    const speed = velocity.magnitude();\n    const position = gameState.rocket.position;\n    const altitude = world.getAltitude(position.magnitude());\n    const rotation = gameState.rocket.rotation;\n    const engineBase = position.add(rocketDown.multiply(bottomDistance));\n\n    // Get atmospheric density\n    const atmosphericDensity = world.getAtmosphericDensity(altitude);\n\n    // Calculate effect intensity based on speed and atmospheric density\n    const speedThreshold = 50; // m/s\n    const maxSpeed = 1000; // m/s\n    const speedFactor = Math.min(\n      1,\n      Math.max(0, (speed - speedThreshold) / (maxSpeed - speedThreshold))\n    );\n\n    // Effect intensity scales with both speed and atmospheric density\n    const effectIntensity = speedFactor * atmosphericDensity;\n\n    // Update atmospheric glow for heating effects\n    this.atmosphericGlow = effectIntensity;\n\n    // Create velocity streaks when moving fast in atmosphere\n    if (effectIntensity > 0.1 && Math.random() < effectIntensity) {\n      const streakOffset = new Vector2((Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20);\n\n      this.velocityStreaks.push({\n        pos: engineBase.add(streakOffset),\n        vel: velocity\n          .multiply(-0.5)\n          .add(new Vector2((Math.random() - 0.5) * 10, (Math.random() - 0.5) * 10)),\n        life: 0.5 + Math.random() * 0.5,\n        intensity: effectIntensity,\n      });\n    }\n\n    // Limit velocity streaks\n    if (this.velocityStreaks.length > 30) {\n      this.velocityStreaks.splice(0, this.velocityStreaks.length - 30);\n    }\n  }\n\n  /**\n   * Create smoke effects from engine\n   */\n  createEngineSmoke(\n    gameState: GameState,\n    world: WorldParameters,\n    rocketDown: Vector2,\n    engineBase: Vector2\n  ): void {\n    const position = gameState.rocket.position;\n    const velocity = gameState.rocket.velocity;\n    const altitude = world.getAltitude(position.magnitude());\n\n    // Smoke only visible in atmosphere\n    if (altitude > 50000 || !gameState.rocket.isEngineIgnited) return;\n\n    const atmosphericDensity = world.getAtmosphericDensity(altitude);\n    const smokeIntensity = Math.min(1, atmosphericDensity * 2);\n\n    if (smokeIntensity > 0.01) {\n      // Create multiple smoke particles\n      const smokeCount = Math.floor(3 * smokeIntensity * gameState.rocket.throttle);\n\n      for (let i = 0; i < smokeCount; i++) {\n        const jitter = new Vector2((Math.random() - 0.5) * 6, (Math.random() - 0.5) * 6);\n        const down = rocketDown.multiply(5 + Math.random() * 3);\n        const smokePos = new Vector2(\n          engineBase.x + down.x + jitter.x,\n          engineBase.y + down.y + jitter.y\n        );\n\n        // Smoke velocity\n        const ejectSpeed = 90 + 140 * gameState.rocket.throttle;\n        const dir = rocketDown;\n        const smokeVel = new Vector2(\n          dir.x * ejectSpeed + velocity.x * 0.15 + (Math.random() - 0.5) * 12,\n          dir.y * ejectSpeed + velocity.y * 0.15 + (Math.random() - 0.5) * 12\n        );\n\n        this.stagingVis.addSmoke(\n          smokePos,\n          smokeVel,\n          (4 + Math.random() * 8) * smokeIntensity,\n          3.0 * smokeIntensity\n        );\n      }\n    }\n  }\n\n  /**\n   * Create an explosion effect\n   */\n  createExplosion(position: Vector2, velocity: Vector2): void {\n    this.stagingVis.createExplosion(position.clone(), velocity.multiply(0.1));\n  }\n\n  /**\n   * Create debris for rocket destruction\n   */\n  createDestructionDebris(position: Vector2, velocity: Vector2): void {\n    for (let i = 0; i < 20; i++) {\n      const pos = position.add(new Vector2((Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50));\n      const vel = velocity.add(\n        new Vector2((Math.random() - 0.5) * 100, (Math.random() - 0.5) * 100)\n      );\n      this.stagingVis.addDebris(\n        pos,\n        vel,\n        Math.random() * Math.PI * 2,\n        (Math.random() - 0.5) * 10,\n        3.0 + Math.random() * 2.0\n      );\n    }\n  }\n\n  /**\n   * Draw speed effects\n   */\n  private drawSpeedEffects(renderer: CanvasRenderer): void {\n    // Draw velocity streaks\n    for (const streak of this.velocityStreaks) {\n      const alpha = Math.max(0, streak.life) * streak.intensity;\n      const size = 2 + streak.intensity * 3;\n\n      renderer.drawCircle(streak.pos, size, `rgba(255, 200, 100, ${alpha * 0.5})`, undefined, 0);\n    }\n  }\n\n  // Getters and setters for atmospheric effects\n  getAtmosphericGlow(): number {\n    return this.atmosphericGlow;\n  }\n\n  setAtmosphericGlow(value: number): void {\n    this.atmosphericGlow = value;\n  }\n\n  getHeatLevel(): number {\n    return this.heatLevel;\n  }\n\n  setHeatLevel(value: number): void {\n    this.heatLevel = value;\n  }\n\n  hasBurnedUpStatus(): boolean {\n    return this.hasBurnedUp;\n  }\n\n  setHasBurnedUp(value: boolean): void {\n    this.hasBurnedUp = value;\n  }\n}\n","import { PhysicsIntegrator } from './PhysicsIntegrator.js';\nimport { Vector2 } from './Vector2.js';\n\n// RigidBody class for rocket physics simulation\n// Simple rigid body used for the rocket. Only what is needed for this game:\n// position, velocity, rotation, angular velocity, forces and torques.\nexport class RigidBody {\n  public position: Vector2;\n  public velocity: Vector2;\n  public rotation = 0; // radians\n  public angularVelocity = 0; // rad/s\n  public mass: number;\n\n  private forces: Vector2[] = [];\n  private torques: number[] = [];\n  private previousAcceleration: Vector2 = Vector2.zero();\n\n  constructor(position: Vector2, velocity: Vector2, mass: number) {\n    this.position = position.clone();\n    this.velocity = velocity.clone();\n    this.mass = mass;\n  }\n\n  /**\n   * Apply force at center of mass\n   * @param force Force vector (N)\n   */\n  applyForce(force: Vector2): void {\n    this.forces.push(force.clone());\n  }\n\n  /**\n   * Apply force at specific point (creates torque)\n   * @param force Force vector (N)\n   * @param applicationPoint Point relative to center of mass (m)\n   */\n  applyForceAtPoint(force: Vector2, applicationPoint: Vector2): void {\n    this.forces.push(force.clone());\n\n    // Calculate torque: τ = r × F (use right-hand rule)\n    const torque = -applicationPoint.cross(force); // Negate for correct sign convention\n    this.torques.push(torque);\n  }\n\n  /**\n   * Apply torque directly\n   * @param torque Torque magnitude (N⋅m)\n   */\n  applyTorque(torque: number): void {\n    this.torques.push(torque);\n  }\n\n  /**\n   * Get current acceleration from accumulated forces\n   * @returns Acceleration vector (m/s²)\n   */\n  getAcceleration(): Vector2 {\n    if (this.mass <= 0) return Vector2.zero();\n\n    // Sum all forces\n    const totalForce = this.forces.reduce((sum, force) => sum.add(force), Vector2.zero());\n\n    return totalForce.divide(this.mass);\n  }\n\n  /**\n   * Get current angular acceleration from accumulated torques\n   * @param momentOfInertia Moment of inertia (kg⋅m²)\n   * @returns Angular acceleration (rad/s²)\n   */\n  getAngularAcceleration(momentOfInertia: number): number {\n    if (momentOfInertia <= 0) return 0;\n\n    // Sum all torques\n    const totalTorque = this.torques.reduce((sum, torque) => sum + torque, 0);\n    return totalTorque / momentOfInertia;\n  }\n\n  /**\n   * Integrate physics for one timestep\n   * @param deltaTime Integration timestep (s)\n   * @param momentOfInertia Moment of inertia for rotation (kg⋅m²)\n   */\n  // Integrates linear and angular motion for one step\n  integrate(deltaTime: number, momentOfInertia = 1000): void {\n    const acceleration = this.getAcceleration();\n    const angularAcceleration = this.getAngularAcceleration(momentOfInertia);\n\n    // Check stability\n    if (!PhysicsIntegrator.isStable(this.velocity, acceleration, deltaTime)) {\n      console.warn('Physics integration unstable, clamping values');\n      return;\n    }\n\n    // Integrate linear motion using semi-implicit Euler\n    PhysicsIntegrator.integrateMotion(this.position, this.velocity, acceleration, deltaTime);\n\n    // Integrate rotational motion\n    this.angularVelocity += angularAcceleration * deltaTime;\n    this.rotation += this.angularVelocity * deltaTime;\n\n    // Keep rotation in [-π, π] to avoid visual jumps around 2π\n    if (this.rotation > Math.PI) this.rotation -= 2 * Math.PI;\n    if (this.rotation < -Math.PI) this.rotation += 2 * Math.PI;\n\n    // Store acceleration for next frame (for Verlet if needed)\n    this.previousAcceleration = acceleration;\n\n    // Clear forces and torques for next frame\n    this.clearForces();\n  }\n\n  /**\n   * Clear all accumulated forces and torques\n   */\n  clearForces(): void {\n    this.forces.length = 0;\n    this.torques.length = 0;\n  }\n\n  /**\n   * Get kinetic energy\n   * @param momentOfInertia Moment of inertia (kg⋅m²)\n   * @returns Kinetic energy (J)\n   */\n  getKineticEnergy(momentOfInertia: number): number {\n    const linearKE = 0.5 * this.mass * this.velocity.magnitudeSquared();\n    const rotationalKE = 0.5 * momentOfInertia * this.angularVelocity * this.angularVelocity;\n    return linearKE + rotationalKE;\n  }\n\n  /**\n   * Get momentum\n   * @returns Momentum vector (kg⋅m/s)\n   */\n  getMomentum(): Vector2 {\n    return this.velocity.multiply(this.mass);\n  }\n\n  /**\n   * Set mass and update physics accordingly\n   * @param newMass New mass (kg)\n   */\n  setMass(newMass: number): void {\n    if (newMass <= 0) {\n      console.warn('Invalid mass, keeping current mass');\n      return;\n    }\n    this.mass = newMass;\n  }\n\n  /**\n   * Get forward direction based on current rotation\n   * @returns Forward direction vector\n   */\n  getForwardDirection(): Vector2 {\n    return Vector2.fromAngle(this.rotation);\n  }\n\n  /**\n   * Clone this rigid body\n   * @returns New RigidBody with same properties\n   */\n  clone(): RigidBody {\n    const clone = new RigidBody(this.position, this.velocity, this.mass);\n    clone.rotation = this.rotation;\n    clone.angularVelocity = this.angularVelocity;\n    return clone;\n  }\n}\n","// World parameters configuration for toy-Earth physics\nexport class WorldParameters {\n  // Planetary constants (cartoon small Earth, same surface g)\n  public readonly planetRadius: number = 350_000; // 350 km radius (smaller planet)\n  public readonly surfaceGravity: number = 9.81; // m/s²\n  public readonly gravitationalParameter: number; // μ = g₀ · R²\n\n  // Atmospheric constants (keep original Earth-like feel)\n  public readonly atmosphereScaleHeight: number = 7_000; // 7 km scale height\n  public readonly surfaceDensity: number = 1.2; // kg/m³ at sea level\n  public readonly maxDynamicPressure: number = 50_000; // 50 kPa max-Q limit\n  // Planet rotation (rad/s); Earth ~7.2921159e-5\n  public readonly earthRotationRate: number = 7.2921159e-5;\n\n  // Rocket constants\n  public readonly defaultDragCoefficient: number = 0.3;\n  public readonly defaultCrossSectionalArea: number = 10; // m²\n\n  constructor() {\n    // Calculate gravitational parameter from surface gravity and radius\n    this.gravitationalParameter = this.surfaceGravity * this.planetRadius * this.planetRadius;\n    // Atmosphere parameters remain unscaled for familiar feel\n  }\n\n  /**\n   * Approximate speed of sound (m/s) vs altitude using a simple ISA-like profile.\n   * Keeps it constant above ~20 km for simplicity.\n   */\n  getSpeedOfSound(altitude: number): number {\n    if (altitude <= 0) return 340; // sea level ~340 m/s\n    if (altitude < 11_000) {\n      // Linear drop to ~295 m/s by 11 km (troposphere)\n      const t = altitude / 11_000;\n      return 340 - (340 - 295) * t;\n    }\n    // Roughly constant through lower stratosphere for our purposes\n    return 295;\n  }\n\n  /**\n   * Get altitude from position vector magnitude\n   * @param positionMagnitude Distance from planet center (m)\n   * @returns Altitude above surface (m)\n   */\n  getAltitude(positionMagnitude: number): number {\n    return positionMagnitude - this.planetRadius;\n  }\n\n  /**\n   * Get atmospheric density at given altitude\n   * @param altitude Altitude above surface (m)\n   * @returns Atmospheric density (kg/m³)\n   */\n  getAtmosphericDensity(altitude: number): number {\n    return this.surfaceDensity * Math.exp(-altitude / this.atmosphereScaleHeight);\n  }\n\n  /**\n   * Get gravitational acceleration at given distance from center\n   * @param distance Distance from planet center (m)\n   * @returns Gravitational acceleration (m/s²)\n   */\n  getGravitationalAcceleration(distance: number): number {\n    return this.gravitationalParameter / (distance * distance);\n  }\n\n  /**\n   * Check if position is below surface (crashed)\n   * @param positionMagnitude Distance from planet center (m)\n   * @returns True if below surface\n   */\n  isBelowSurface(positionMagnitude: number): boolean {\n    return positionMagnitude < this.planetRadius;\n  }\n\n  /**\n   * Check if altitude is in space (above atmosphere)\n   * @param altitude Altitude above surface (m)\n   * @returns True if in space (>100km altitude)\n   */\n  isInSpace(altitude: number): boolean {\n    return altitude > 100_000; // Kármán line equivalent\n  }\n\n  /**\n   * Check if altitude is in atmosphere\n   * @param altitude Altitude above surface (m)\n   * @returns True if in atmosphere (<70km altitude)\n   */\n  isInAtmosphere(altitude: number): boolean {\n    return altitude < 70_000; // Below 70km is considered atmosphere\n  }\n\n  /**\n   * Get orbital velocity for circular orbit at given altitude\n   * @param altitude Altitude above surface (m)\n   * @returns Orbital velocity (m/s)\n   */\n  getCircularOrbitVelocity(altitude: number): number {\n    const orbitalRadius = this.planetRadius + altitude;\n    return Math.sqrt(this.gravitationalParameter / orbitalRadius);\n  }\n\n  /**\n   * Get escape velocity from given altitude\n   * @param altitude Altitude above surface (m)\n   * @returns Escape velocity (m/s)\n   */\n  getEscapeVelocity(altitude: number): number {\n    const distance = this.planetRadius + altitude;\n    return Math.sqrt((2 * this.gravitationalParameter) / distance);\n  }\n}\n","import type { Vector2 } from './Vector2.js';\n\n// Small helpers for common orbit math. Uses standard two-body formulas\n// (specific energy, angular momentum, eccentricity) for clarity.\n/**\n * Calculate apoapsis altitude from position and velocity vectors\n * @param position Current position vector (m)\n * @param velocity Current velocity vector (m/s)\n * @param mu Gravitational parameter (m³/s²)\n * @returns Apoapsis altitude above surface (m)\n */\nexport function calculateApoapsis(\n  position: Vector2,\n  velocity: Vector2,\n  mu: number,\n  planetRadius: number\n): number {\n  const r = position.magnitude();\n  const v = velocity.magnitude();\n  // Specific orbital energy ε = v^2/2 − μ/r\n  const specificEnergy = (v * v) / 2 - mu / r;\n\n  if (specificEnergy >= 0) return Number.POSITIVE_INFINITY; // Escape trajectory\n\n  // a = −μ/(2ε), e = sqrt(1 + 2εh^2/μ^2)\n  const semiMajorAxis = -mu / (2 * specificEnergy);\n  const h = position.cross(velocity);\n  const eccentricity = Math.sqrt(1 + (2 * specificEnergy * h * h) / (mu * mu));\n\n  const apoapsisRadius = semiMajorAxis * (1 + eccentricity);\n  return Math.max(0, apoapsisRadius - planetRadius);\n}\n\n/**\n * Calculate periapsis altitude from orbital parameters\n * @param position Current position vector (m)\n * @param velocity Current velocity vector (m/s)\n * @param mu Gravitational parameter (m³/s²)\n * @returns Periapsis altitude above surface (m)\n */\nexport function calculatePeriapsis(\n  position: Vector2,\n  velocity: Vector2,\n  mu: number,\n  planetRadius: number\n): number {\n  const r = position.magnitude();\n  const v = velocity.magnitude();\n  // ε as above\n  const specificEnergy = (v * v) / 2 - mu / r;\n\n  if (specificEnergy >= 0) return Number.NEGATIVE_INFINITY; // Escape trajectory\n\n  const semiMajorAxis = -mu / (2 * specificEnergy);\n  const h = position.cross(velocity);\n  const eccentricity = Math.sqrt(1 + (2 * specificEnergy * h * h) / (mu * mu));\n\n  const periapsisRadius = semiMajorAxis * (1 - eccentricity);\n  return periapsisRadius - planetRadius;\n}\n\n/**\n * Calculate orbital eccentricity\n * @param position Current position vector (m)\n * @param velocity Current velocity vector (m/s)\n * @param mu Gravitational parameter (m³/s²)\n * @returns Orbital eccentricity (0 = circular, >1 = hyperbolic)\n */\nexport function calculateEccentricity(position: Vector2, velocity: Vector2, mu: number): number {\n  const r = position.magnitude();\n  const v = velocity.magnitude();\n  const specificEnergy = (v * v) / 2 - mu / r;\n  const h = position.cross(velocity);\n\n  return Math.sqrt(1 + (2 * specificEnergy * h * h) / (mu * mu));\n}\n\n/**\n * Check if orbit is stable (closed ellipse with safe parameters)\n * @param apoapsis Apoapsis altitude (m)\n * @param periapsis Periapsis altitude (m)\n * @param eccentricity Orbital eccentricity\n * @returns True if orbit is stable\n */\nexport function isStableOrbit(apoapsis: number, periapsis: number, eccentricity: number): boolean {\n  // Check for escape trajectory\n  if (apoapsis === Number.POSITIVE_INFINITY || eccentricity >= 1.0) return false;\n\n  // Check minimum safe altitude (70km)\n  if (periapsis < 70_000) return false;\n\n  // Simple quality-of-life rule for the game: keep orbits not too elongated\n  if (eccentricity > 0.1) return false;\n\n  return true;\n}\n\n/**\n * Calculate circular orbital velocity\n * @param radius Orbital radius (m)\n * @param mu Gravitational parameter (m³/s²)\n * @returns Circular orbital velocity (m/s)\n */\nexport function calculateCircularVelocity(radius: number, mu: number): number {\n  return Math.sqrt(mu / radius);\n}\n\n/**\n * Calculate escape velocity\n * @param radius Distance from center (m)\n * @param mu Gravitational parameter (m³/s²)\n * @returns Escape velocity (m/s)\n */\nexport function calculateEscapeVelocity(radius: number, mu: number): number {\n  return Math.sqrt((2 * mu) / radius);\n}\n\n/**\n * Calculate prograde direction (velocity normalized)\n * @param velocity Current velocity vector\n * @returns Normalized prograde direction vector\n */\nexport function getProgradeDirection(velocity: Vector2): Vector2 {\n  return velocity.normalized();\n}\n\n/**\n * Calculate retrograde direction (opposite of velocity)\n * @param velocity Current velocity vector\n * @returns Normalized retrograde direction vector\n */\nexport function getRetrogradeDirection(velocity: Vector2): Vector2 {\n  return velocity.normalized().multiply(-1);\n}\n","import { calculateApoapsis, calculatePeriapsis } from '@/physics/OrbitalMechanics';\nimport type { Vector2 } from '@/physics/Vector2';\n\n/**\n * Small helper for apoapsis/periapsis projection from state.\n * Pure calculation so HUD and Autopilot can share it.\n */\nexport function computeApoPeri(\n  position: Vector2,\n  velocity: Vector2,\n  mu: number,\n  planetRadius: number\n) {\n  const apoAlt = calculateApoapsis(position, velocity, mu, planetRadius);\n  const periAlt = calculatePeriapsis(position, velocity, mu, planetRadius);\n  return { apoAlt, periAlt };\n}\n","// Rocket configuration data models\nimport type { StageConfiguration } from './types.js';\n\n// Holds stage data and exposes simple helpers for mass, thrust and staging.\nexport class RocketConfiguration {\n  public stages: StageConfiguration[];\n  public payloadMass: number;\n  public dragCoefficient: number;\n  public crossSectionalArea: number;\n\n  constructor(\n    stages: StageConfiguration[],\n    payloadMass = 1000,\n    dragCoefficient = 0.3,\n    crossSectionalArea = 10\n  ) {\n    // Clone stages so incoming objects are not mutated by the game\n    this.stages = stages.map((stage) => ({\n      ...stage,\n      fuelRemaining: stage.propellantMass, // Initialize fuel to full\n    }));\n    this.payloadMass = payloadMass;\n    this.dragCoefficient = dragCoefficient;\n    this.crossSectionalArea = crossSectionalArea;\n  }\n\n  /**\n   * Get current total mass including all stages and payload\n   * @returns Total mass (kg)\n   */\n  getCurrentMass(): number {\n    const stagesMass = this.stages.reduce(\n      (total, stage) => total + stage.dryMass + stage.fuelRemaining,\n      0\n    );\n    return stagesMass + this.payloadMass;\n  }\n\n  /**\n   * Get current thrust-to-weight ratio\n   * @param gravity Current gravitational acceleration (m/s²)\n   * @returns TWR (dimensionless)\n   */\n  getThrustToWeightRatio(gravity: number): number {\n    const currentThrust = this.getCurrentThrust();\n    const currentWeight = this.getCurrentMass() * gravity;\n    return currentWeight > 0 ? currentThrust / currentWeight : 0;\n  }\n\n  /**\n   * Get current maximum thrust from active stages\n   * @returns Maximum thrust (N)\n   */\n  getCurrentThrust(): number {\n    return this.stages\n      .filter((stage) => stage.isActive && stage.fuelRemaining > 0)\n      .reduce((total, stage) => total + stage.thrust, 0);\n  }\n\n  /**\n   * Get current specific impulse (mass-weighted average of active stages)\n   * @returns Effective specific impulse (s)\n   */\n  getCurrentSpecificImpulse(): number {\n    const activeStages = this.stages.filter((stage) => stage.isActive && stage.fuelRemaining > 0);\n\n    if (activeStages.length === 0) return 0;\n\n    const totalThrust = activeStages.reduce((sum, stage) => sum + stage.thrust, 0);\n    if (totalThrust === 0) return 0;\n\n    // Thrust-weighted average of specific impulse\n    const weightedIsp = activeStages.reduce(\n      (sum, stage) => sum + (stage.specificImpulse * stage.thrust) / totalThrust,\n      0\n    );\n\n    return weightedIsp;\n  }\n\n  /**\n   * Calculate fuel consumption rate for current throttle setting\n   * @param throttle Throttle setting (0.0 to 1.0)\n   * @returns Fuel consumption rate (kg/s)\n   */\n  // Sum of (thrust / (Isp * g0)) for active stages, scaled by throttle\n  getFuelConsumptionRate(throttle: number): number {\n    const activeStages = this.stages.filter((stage) => stage.isActive && stage.fuelRemaining > 0);\n\n    return activeStages.reduce((total, stage) => {\n      const thrustUsed = stage.thrust * throttle;\n      const ispEff = this.getEffectiveIsp(stage, throttle);\n      const fuelRate = thrustUsed / (ispEff * 9.81); // g₀ = 9.81 m/s²\n      return total + fuelRate;\n    }, 0);\n  }\n\n  /**\n   * Consume fuel for given time and throttle setting\n   * @param deltaTime Time step (s)\n   * @param throttle Throttle setting (0.0 to 1.0)\n   * @returns True if fuel was consumed, false if no fuel available\n   */\n  // Reduces fuel for active stages. Returns true if any fuel was consumed.\n  consumeFuel(deltaTime: number, throttle: number): boolean {\n    const activeStages = this.stages.filter((stage) => stage.isActive && stage.fuelRemaining > 0);\n\n    if (activeStages.length === 0) return false;\n\n    let fuelConsumed = false;\n    for (const stage of activeStages) {\n      const thrustUsed = stage.thrust * throttle;\n      const ispEff = this.getEffectiveIsp(stage, throttle);\n      const fuelRate = thrustUsed / (ispEff * 9.81);\n      const fuelToConsume = fuelRate * deltaTime;\n\n      if (stage.fuelRemaining > 0) {\n        stage.fuelRemaining = Math.max(0, stage.fuelRemaining - fuelToConsume);\n        fuelConsumed = true;\n      }\n    }\n\n    return fuelConsumed;\n  }\n\n  /**\n   * Effective Isp vs throttle: reward lower TWR with slightly better ISP.\n   * At 100% throttle → 100% Isp. At 10% throttle → ~110% Isp (linear in between).\n   */\n  private getEffectiveIsp(stage: StageConfiguration, throttle: number): number {\n    const base = stage.specificImpulse;\n    const t = Math.max(0.1, Math.min(1, throttle));\n    const bonus = 0.1 * ((1 - t) / 0.9); // 0 at t=1, 0.1 at t=0.1\n    return base * (1 + Math.max(0, Math.min(0.1, bonus)));\n  }\n\n  /**\n   * Get the currently active stage\n   * @returns Active stage or null if none active\n   */\n  getActiveStage(): StageConfiguration | null {\n    return this.stages.find((stage) => stage.isActive) || null;\n  }\n\n  /**\n   * Check if current stage is depleted and ready for staging\n   * @returns True if staging is recommended\n   */\n  isReadyForStaging(): boolean {\n    const activeStage = this.getActiveStage();\n    return activeStage ? activeStage.fuelRemaining <= 0 : false;\n  }\n\n  /**\n   * Perform staging - deactivate current stage and activate next\n   * @param forceStaging Force staging even if conditions aren't met\n   * @returns True if staging was successful\n   */\n  performStaging(forceStaging = false): boolean {\n    const currentStageIndex = this.stages.findIndex((stage) => stage.isActive);\n\n    if (currentStageIndex === -1 || currentStageIndex >= this.stages.length - 1) {\n      return false; // No active stage or already on last stage\n    }\n\n    const currentStage = this.stages[currentStageIndex];\n    if (!currentStage) {\n      return false;\n    }\n\n    // Note: We allow staging with fuel remaining - safety is checked at GameEngine level\n    // This allows jettisoning stages with remaining fuel when engines are off\n\n    // Deactivate current stage\n    currentStage.isActive = false;\n\n    // Activate next stage if it exists\n    const nextStage = this.stages[currentStageIndex + 1];\n    if (nextStage) {\n      nextStage.isActive = true;\n    }\n\n    return true;\n  }\n\n  /**\n   * Check if staging is safe (no thrust - engines off)\n   * @param currentThrust Current thrust being applied\n   * @returns True if staging is safe\n   */\n  isStagingSafe(currentThrust: number): boolean {\n    const activeStage = this.getActiveStage();\n    if (!activeStage) return false;\n\n    // Safe to stage if thrust is zero (engines off)\n    // Staging with engines on is possible but dangerous\n    return currentThrust === 0;\n  }\n\n  /**\n   * Check if staging with engines on would cause explosion\n   * @param currentThrust Current thrust being applied\n   * @returns True if staging would cause explosion\n   */\n  isHotStaging(currentThrust: number): boolean {\n    return currentThrust > 0;\n  }\n\n  /**\n   * Check if hot staging would cause guaranteed explosion\n   * @param currentThrust Current thrust being applied\n   * @returns True if guaranteed explosion (any thrust > 0)\n   */\n  // Simple rule for now: any thrust during staging triggers an explosion.\n  wouldExplodeOnStaging(currentThrust: number): boolean {\n    // Any thrust during staging = guaranteed boom\n    return currentThrust > 0;\n  }\n\n  /**\n   * Get the next stage that would be activated\n   * @returns Next stage or null if none available\n   */\n  getNextStage(): StageConfiguration | null {\n    const currentStageIndex = this.stages.findIndex((stage) => stage.isActive);\n    if (currentStageIndex === -1 || currentStageIndex >= this.stages.length - 1) {\n      return null;\n    }\n    return this.stages[currentStageIndex + 1] || null;\n  }\n\n  /**\n   * Get current stage index\n   * @returns Current stage index or -1 if none active\n   */\n  getCurrentStageIndex(): number {\n    return this.stages.findIndex((stage) => stage.isActive);\n  }\n\n  /**\n   * Check for automatic staging conditions\n   * @returns True if automatic staging should occur\n   */\n  shouldAutoStage(): boolean {\n    const activeStage = this.getActiveStage();\n    if (!activeStage) return false;\n\n    // Auto-stage when fuel is completely depleted\n    return activeStage.fuelRemaining <= 0 && this.getNextStage() !== null;\n  }\n\n  /**\n   * Get total delta-v remaining\n   * @returns Remaining delta-v (m/s)\n   */\n  getRemainingDeltaV(): number {\n    let totalDeltaV = 0;\n    let currentMass = this.getCurrentMass();\n    // Start from current active stage and above\n    const startIndex = this.getCurrentStageIndex() >= 0 ? this.getCurrentStageIndex() : 0;\n    for (let i = startIndex; i < this.stages.length; i++) {\n      const stage = this.stages[i];\n      const fuel = Math.max(0, stage.fuelRemaining);\n      if (fuel > 0) {\n        const massAfterBurn = Math.max(1e-6, currentMass - fuel);\n        if (massAfterBurn > 0 && massAfterBurn < currentMass) {\n          const deltaV = stage.specificImpulse * 9.81 * Math.log(currentMass / massAfterBurn);\n          totalDeltaV += Math.max(0, deltaV);\n          currentMass = massAfterBurn;\n        }\n      }\n      // If there are later stages, jettison dry mass of this stage (staging)\n      const hasLater = i < this.stages.length - 1;\n      if (hasLater) {\n        currentMass = Math.max(1e-6, currentMass - stage.dryMass);\n      }\n    }\n    return totalDeltaV;\n  }\n\n  /**\n   * Create default tutorial rocket configuration\n   * @returns Default rocket configuration\n   */\n  static createTutorialRocket(): RocketConfiguration {\n    const stages: StageConfiguration[] = [\n      {\n        name: 'First Stage',\n        thrust: 480_000, // 480 kN (boosted for TWR ~2.0)\n        specificImpulse: 265, // seconds (sea-level realistic)\n        seaLevelIsp: 265,\n        vacuumIsp: 300,\n        propellantMass: 20_000, // 20 tons (reduced)\n        dryMass: 3_000, // 3 tons (a bit heavier)\n        isActive: true,\n        fuelRemaining: 20_000,\n      },\n      {\n        name: 'Second Stage',\n        thrust: 120_000, // 120 kN (doubled for better TWR)\n        specificImpulse: 335, // seconds (reduced slightly)\n        seaLevelIsp: 300,\n        vacuumIsp: 335,\n        propellantMass: 5_000, // 5 tons\n        dryMass: 1_200, // 1.2 tons (a bit heavier)\n        isActive: false,\n        fuelRemaining: 5_000,\n      },\n    ];\n\n    return new RocketConfiguration(stages, 1000); // 1 ton payload\n  }\n}\n","import { RigidBody } from '../physics/RigidBody.js';\nimport { Vector2 } from '../physics/Vector2.js';\nimport { WorldParameters } from '../physics/WorldParameters.js';\nimport type { RocketRenderer } from '../rendering/RocketRenderer.js';\nimport { computeApoPeri } from './Navigator.js';\nimport { RocketConfiguration } from './RocketConfiguration.js';\nimport type { SimpleSoundSystem } from './SimpleSoundSystem.js';\nimport type { GameState } from './types.js';\n\ninterface StateContext {\n  canvas: HTMLCanvasElement;\n  rocketRenderer: RocketRenderer;\n  soundSystem: SimpleSoundSystem;\n  debugLog: (...args: unknown[]) => void;\n}\n\n/**\n * Manages game state initialization, updates, and transitions\n */\nexport class GameStateManager {\n  private context: StateContext;\n  private successSpacePlayed = false;\n  private successOrbitPlayed = false;\n  private isGameOver = false;\n  private gameOverTimer = 0;\n  private explosionPhase = false;\n  private explosionTimer = 0;\n  private gameOverReason = '';\n  public menuButtonBounds?: { x: number; y: number; width: number; height: number };\n\n  constructor(context: StateContext) {\n    this.context = context;\n  }\n\n  /**\n   * Initialize game state with default values\n   */\n  initializeGameState(): {\n    gameState: GameState;\n    rocketBody: RigidBody;\n    rocketConfig: RocketConfiguration;\n    padBaseAngle: number;\n  } {\n    const rocketConfig = RocketConfiguration.createTutorialRocket();\n    const world = new WorldParameters();\n\n    // Start rocket on launch pad at the top of the planet\n    const launchPosition = new Vector2(0, world.planetRadius);\n    const launchVelocity = Vector2.zero();\n\n    const rocketBody = new RigidBody(launchPosition, launchVelocity, rocketConfig.getCurrentMass());\n\n    // Set rocket rotation to point up\n    rocketBody.rotation = 0;\n\n    const gameState: GameState = {\n      isRunning: false,\n      isPaused: false,\n      timeWarp: 1.0,\n      currentTime: 0,\n      world: world,\n      rocket: {\n        position: launchPosition.clone(),\n        velocity: launchVelocity.clone(),\n        rotation: 0,\n        mass: rocketConfig.getCurrentMass(),\n        fuel: rocketConfig.stages.reduce((sum, stage) => sum + stage.fuelRemaining, 0),\n        throttle: 0,\n        isEngineIgnited: false,\n        hasEverLaunched: false,\n        isClamped: true,\n        isOnGround: true,\n        currentStage: 0,\n        stages: rocketConfig.stages,\n      },\n      autopilotEnabled: true,\n    };\n\n    // Adjust initial position for visual alignment\n    const dims = this.context.rocketRenderer.getRocketBounds(gameState.rocket);\n    const halfHeight = dims.height / 2;\n    const nozzleDrop = 6;\n    const padClearance = 0;\n    rocketBody.position = launchPosition.add(\n      new Vector2(0, halfHeight + nozzleDrop + padClearance)\n    );\n    gameState.rocket.position = rocketBody.position.clone();\n\n    // Base angle for pad alignment\n    const padBaseAngle = Math.atan2(rocketBody.position.y, rocketBody.position.x);\n\n    return { gameState, rocketBody, rocketConfig, padBaseAngle };\n  }\n\n  /**\n   * Reset state for restart\n   */\n  resetState(): void {\n    this.successSpacePlayed = false;\n    this.successOrbitPlayed = false;\n    this.isGameOver = false;\n    this.gameOverTimer = 0;\n    this.explosionPhase = false;\n    this.explosionTimer = 0;\n    this.gameOverReason = '';\n  }\n\n  /**\n   * Update rocket state from physics body\n   */\n  updateRocketState(\n    gameState: GameState,\n    rocketBody: RigidBody,\n    rocketConfig: RocketConfiguration,\n    visualRotation: number,\n    autopilotRunning: boolean,\n    aeroCdEff: number,\n    aeroAreaEff: number\n  ): void {\n    gameState.rocket.position = rocketBody.position.clone();\n    gameState.rocket.velocity = rocketBody.velocity.clone();\n    gameState.rocket.rotation = rocketBody.rotation;\n    gameState.rocket.visualRotation = visualRotation;\n    gameState.rocket.mass = rocketBody.mass;\n    gameState.rocket.stages = rocketConfig.stages;\n    gameState.autopilotRunning = autopilotRunning;\n    gameState.rocket.dragCoefficient = aeroCdEff;\n    gameState.rocket.crossSectionalArea = aeroAreaEff;\n    gameState.rocket.fuel = rocketConfig.stages.reduce(\n      (sum, stage) => sum + stage.fuelRemaining,\n      0\n    );\n  }\n\n  /**\n   * Check and play success sounds\n   */\n  checkSuccessSounds(gameState: GameState): void {\n    const world = gameState.world;\n    const pos = gameState.rocket.position;\n    const vel = gameState.rocket.velocity;\n    const alt = world.getAltitude(pos.magnitude());\n\n    // Reached space (Kármán line)\n    if (!this.successSpacePlayed && alt >= 100_000) {\n      this.successSpacePlayed = true;\n      this.context.soundSystem.playSuccess();\n    }\n\n    // Stable orbit: closed ellipse with perigee above 80 km\n    if (!this.successOrbitPlayed) {\n      const mu = world.gravitationalParameter;\n      const res = computeApoPeri(pos, vel, mu, world.planetRadius);\n\n      if (Number.isFinite(res.periAlt) && res.periAlt > 80_000) {\n        this.successOrbitPlayed = true;\n        this.context.soundSystem.playSuccess();\n      }\n    }\n  }\n\n  /**\n   * Start explosion phase\n   */\n  startExplosion(reason: string): void {\n    this.explosionPhase = true;\n    this.explosionTimer = 0;\n    this.gameOverReason = reason;\n    this.context.debugLog(`🚀💥 ROCKET DESTROYED! ${reason}`);\n  }\n\n  /**\n   * Update explosion phase\n   */\n  updateExplosion(deltaTime: number): boolean {\n    if (!this.explosionPhase) return false;\n\n    this.explosionTimer += deltaTime;\n    if (this.explosionTimer >= 2.0) {\n      this.explosionPhase = false;\n      this.isGameOver = true;\n      this.gameOverTimer = 0;\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Update game over state\n   */\n  updateGameOver(deltaTime: number): { shouldRestart: boolean; autopilot?: boolean } {\n    if (!this.isGameOver) return { shouldRestart: false };\n\n    this.gameOverTimer += deltaTime;\n    // No auto-restart anymore - user must click Menu button\n    return { shouldRestart: false };\n  }\n\n  /**\n   * Render game over screen\n   */\n  renderGameOverScreen(): void {\n    if (!this.isGameOver) return;\n\n    const ctx = this.context.canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Semi-transparent overlay\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.fillRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n\n    // Game over text\n    ctx.fillStyle = '#ff4444';\n    ctx.font = 'bold 48px monospace';\n    ctx.textAlign = 'center';\n    ctx.fillText(\n      'MISSION FAILED',\n      this.context.canvas.width / 2,\n      this.context.canvas.height / 2 - 40\n    );\n\n    ctx.fillStyle = '#ffffff';\n    ctx.font = '24px monospace';\n    const reason = this.gameOverReason || 'Vehicle destroyed';\n    ctx.fillText(reason, this.context.canvas.width / 2, this.context.canvas.height / 2 + 20);\n\n    // Menu button\n    const buttonWidth = 80;\n    const buttonHeight = 30;\n    const buttonX = this.context.canvas.width / 2 - buttonWidth / 2;\n    const buttonY = this.context.canvas.height / 2 + 60;\n\n    // Store button bounds for click detection\n    this.menuButtonBounds = {\n      x: buttonX,\n      y: buttonY,\n      width: buttonWidth,\n      height: buttonHeight,\n    };\n\n    // Draw button (red)\n    ctx.fillStyle = '#aa2222';\n    ctx.fillRect(buttonX, buttonY, buttonWidth, buttonHeight);\n    ctx.strokeStyle = '#ff6666';\n    ctx.lineWidth = 2;\n    ctx.strokeRect(buttonX, buttonY, buttonWidth, buttonHeight);\n\n    // Button text\n    ctx.fillStyle = '#ffffff';\n    ctx.font = 'bold 16px monospace';\n    ctx.textAlign = 'center';\n    ctx.fillText('MENU', this.context.canvas.width / 2, buttonY + buttonHeight / 2 + 5);\n\n    ctx.textAlign = 'left';\n  }\n\n  // Getters\n  isExplosionPhase(): boolean {\n    return this.explosionPhase;\n  }\n\n  isGameOverState(): boolean {\n    return this.isGameOver;\n  }\n\n  getGameOverReason(): string {\n    return this.gameOverReason;\n  }\n}\n","import type { Vector2 } from '@/physics/Vector2.js';\n\nexport type GuidanceInputs = {\n  // inputs\n  turnLeft: boolean;\n  turnRight: boolean;\n  apHold: 'none' | 'prograde' | 'retrograde' | 'up' | 'target';\n  apTargetRot: number | null;\n  angularVelocity: number;\n  angularAccel: number;\n  maxTurnRate: number;\n  debugEnabled: boolean;\n  lastDebugLogTime: number;\n  currentTime: number;\n  // rocket state\n  rotation: number;\n  velocity: Vector2;\n  position: Vector2;\n  // world helpers\n  getAltitude: (radius: number) => number;\n};\n\nexport type GuidanceResult = {\n  rotation: number;\n  angularVelocity: number;\n  apTargetRot: number | null;\n  lastDebugLogTime: number;\n  debugMessages?: string[];\n};\n\nexport function updateGuidance(input: GuidanceInputs, deltaTime: number): GuidanceResult {\n  let inputTurn = (input.turnLeft ? 1 : 0) - (input.turnRight ? 1 : 0);\n  let apTargetRot = input.apTargetRot;\n  const debug: string[] = [];\n\n  if (input.apHold !== 'none') {\n    if (input.apHold === 'up') {\n      apTargetRot = 0;\n    } else if (input.apHold === 'prograde' || input.apHold === 'retrograde') {\n      const v = input.velocity;\n      const speed = v.magnitude();\n      let velAngle = input.rotation;\n      if (speed > 0.5) velAngle = Math.atan2(-v.x, v.y);\n      const alt = input.getAltitude(input.position.magnitude());\n      const a0 = 2000;\n      const a1 = 15000;\n      const tRaw = (alt - a0) / Math.max(1, a1 - a0);\n      const t = Math.max(0, Math.min(1, tRaw));\n      const s = t * t * (3 - 2 * t);\n      const upAngle = 0;\n      const targetPro = input.apHold === 'prograde' ? velAngle : velAngle + Math.PI;\n      let d = targetPro - upAngle;\n      while (d > Math.PI) d -= 2 * Math.PI;\n      while (d < -Math.PI) d += 2 * Math.PI;\n      apTargetRot = upAngle + d * s;\n    }\n    if (apTargetRot !== null) {\n      let d = (apTargetRot as number) - input.rotation;\n      while (d > Math.PI) d -= 2 * Math.PI;\n      while (d < -Math.PI) d += 2 * Math.PI;\n      inputTurn = d > 0.02 ? 1 : d < -0.02 ? -1 : 0;\n    }\n  }\n\n  // Integrate angular velocity and clamp\n  let angularVelocity = input.angularVelocity + inputTurn * input.angularAccel * deltaTime;\n  const maxRate = input.maxTurnRate;\n  if (angularVelocity > maxRate) angularVelocity = maxRate;\n  if (angularVelocity < -maxRate) angularVelocity = -maxRate;\n  const rotation = input.rotation + angularVelocity * deltaTime;\n\n  // Gentle damping when no input\n  if (inputTurn === 0) {\n    const damping = 0.98;\n    angularVelocity *= damping;\n    if (Math.abs(angularVelocity) < 1e-4) angularVelocity = 0;\n  }\n\n  // Debug logs (throttled)\n  let lastDebugLogTime = input.lastDebugLogTime;\n  if (input.debugEnabled) {\n    const now = input.currentTime;\n    if (now - lastDebugLogTime > 0.1) {\n      const deg = ((rotation * 180) / Math.PI).toFixed(2);\n      const avDeg = ((angularVelocity * 180) / Math.PI).toFixed(2);\n      debug.push(`ATT dt=${deltaTime.toFixed(3)} in=${inputTurn} rot=${deg}° av=${avDeg}°/s`);\n      lastDebugLogTime = now;\n    }\n  }\n\n  return { rotation, angularVelocity, apTargetRot, lastDebugLogTime, debugMessages: debug };\n}\n\nexport function updateVisualGuidance(\n  visualRotation: number,\n  targetRotation: number,\n  deltaTime: number\n): number {\n  const a = visualRotation;\n  const b = targetRotation;\n  let d = b - a;\n  while (d > Math.PI) d -= 2 * Math.PI;\n  while (d < -Math.PI) d += 2 * Math.PI;\n  const k = 10;\n  const t = 1 - Math.exp(-k * Math.max(0, deltaTime));\n  return a + d * t;\n}\n","import type { GameEngine } from '@/core/GameEngine';\nimport type { GameState } from '@/core/types';\nimport type { Camera } from '@/rendering/CanvasRenderer';\nimport type { HUDSystem } from '@/ui/HUDSystem';\n\n/**\n * Simple input controller for the canvas and page.\n *\n * Goal: keep GameEngine lighter. This file listens DOM events\n * and translates them into engine actions. The style stays very\n * direct so it is easy to read later.\n */\nexport class InputController {\n  constructor(\n    private engine: GameEngine,\n    private canvas: HTMLCanvasElement,\n    private camera: Camera,\n    private hud: HUDSystem,\n    private state: GameState\n  ) {}\n\n  init(): void {\n    // keyboard + mouse + html buttons\n    document.addEventListener('keydown', this.onKeyDown);\n    document.addEventListener('keyup', this.onKeyUp);\n    window.addEventListener('resize', this.onResize);\n    // passive must be false to prevent default scrolling on wheel\n    this.canvas.addEventListener('wheel', this.onWheel, { passive: false });\n    this.canvas.addEventListener('click', this.onClick);\n    this.setupSpeedControls();\n  }\n\n  private onResize = () => {\n    this.engine.handleResize();\n    this.hud.handleResize();\n  };\n\n  private onWheel = (event: WheelEvent) => {\n    // zoom in/out around current center, keep limits small on purpose\n    event.preventDefault();\n    const zoomFactor = event.deltaY > 0 ? 0.9 : 1.1;\n    const currentZoom = this.camera.zoom;\n    const newZoom = Math.max(0.00005, Math.min(3.0, currentZoom * zoomFactor));\n    this.camera.setZoom(newZoom);\n    this.state.manualZoomControl = true;\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    // Don't process game controls if user is typing in an input field\n    const activeElement = document.activeElement;\n    if (\n      activeElement &&\n      (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA')\n    ) {\n      return;\n    }\n\n    if (this.engine.isAutopilotRunning()) {\n      // when script runs, keep controls quiet\n      return;\n    }\n    switch (event.code) {\n      case 'Space':\n        event.preventDefault();\n        if (!this.state.rocket.isEngineIgnited) this.engine.igniteEngines();\n        break;\n      case 'ArrowUp':\n        event.preventDefault();\n        this.engine.nudgeThrottle?.(+0.1);\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        this.engine.nudgeThrottle?.(-0.1);\n        break;\n      case 'KeyT':\n        this.engine.setThrottle(1.0);\n        break;\n      case 'KeyG':\n        this.engine.setThrottle(0.0);\n        break;\n      case 'KeyB':\n        this.engine.cutEngines();\n        break;\n      case 'ArrowLeft':\n        this.engine.setTurnLeft(true);\n        break; // smooth turn left\n      case 'ArrowRight':\n        this.engine.setTurnRight(true);\n        break; // smooth turn right\n      case 'KeyS':\n        this.engine.performStaging();\n        break;\n      case 'KeyP':\n        this.engine.togglePause();\n        break;\n    }\n  };\n\n  private onKeyUp = (event: KeyboardEvent) => {\n    // Don't process game controls if user is typing in an input field\n    const activeElement = document.activeElement;\n    if (\n      activeElement &&\n      (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA')\n    ) {\n      return;\n    }\n\n    if (this.engine.isAutopilotRunning()) return;\n    switch (event.code) {\n      case 'ArrowLeft':\n        this.engine.setTurnLeft(false);\n        break;\n      case 'ArrowRight':\n        this.engine.setTurnRight(false);\n        break;\n    }\n  };\n\n  private onClick = (event: MouseEvent) => {\n    const rect = this.canvas.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1; // HUD bounds use device px\n    const x = (event.clientX - rect.left) * dpr;\n    const y = (event.clientY - rect.top) * dpr;\n    const hud = this.hud;\n\n    // Check for game over Menu button click\n    const menuButtonBounds = this.engine.getMenuButtonBounds?.();\n    if (menuButtonBounds) {\n      const b = menuButtonBounds;\n      if (x >= b.x && x <= b.x + b.width && y >= b.y && y <= b.y + b.height) {\n        this.engine.goToMenu(this.engine.isAutopilotOn?.() ?? false);\n        return;\n      }\n    }\n\n    if (hud.restartButtonBounds) {\n      const b = hud.restartButtonBounds;\n      if (x >= b.x && x <= b.x + b.width && y >= b.y && y <= b.y + b.height) {\n        this.engine.goToMenu(this.engine.isAutopilotOn?.() ?? false);\n        return;\n      }\n    }\n    // Autopilot HUD button removed; handled in HTML toolbar\n  };\n\n  private setupSpeedControls(): void {\n    // attach to small buttons under the canvas\n    const speedButtons = document.querySelectorAll('.speed-btn');\n    for (const button of speedButtons as unknown as NodeListOf<HTMLButtonElement>) {\n      button.addEventListener('click', (event) => {\n        const target = event.target as HTMLButtonElement;\n        const speed = Number.parseInt(target.dataset.speed || '1');\n        const altitude = this.state.world.getAltitude(this.state.rocket.position.magnitude());\n        let minAlt = 0;\n        if (speed >= 3 && speed < 10) minAlt = 500;\n        if (speed >= 10 && speed < 50) minAlt = 1000;\n        if (speed >= 50) minAlt = 30000;\n        if (altitude < minAlt) {\n          const minAltLabel =\n            minAlt >= 1000\n              ? `${(minAlt / 1000).toFixed(minAlt % 1000 === 0 ? 0 : 1)} km`\n              : `${minAlt} m`;\n          this.engine.showInfo(`Wait for >${minAltLabel} for x${speed}`, 2.5);\n          return;\n        }\n        this.engine.setGameSpeed(speed);\n      });\n    }\n  }\n}\n","import { calculateDragForce } from '../physics/AtmosphericPhysics.js';\nimport type { RigidBody } from '../physics/RigidBody.js';\nimport { Vector2 } from '../physics/Vector2.js';\nimport type { WorldParameters } from '../physics/WorldParameters.js';\nimport type { EffectsSystem } from './EffectsSystem.js';\nimport type { RocketConfiguration } from './RocketConfiguration.js';\nimport type { SimpleSoundSystem } from './SimpleSoundSystem.js';\nimport type { GameState } from './types.js';\n\ninterface PhysicsContext {\n  world: WorldParameters;\n  rocketConfig: RocketConfiguration;\n  rocketBody: RigidBody;\n  gameState: GameState;\n  effectsSystem: EffectsSystem;\n  soundSystem: SimpleSoundSystem;\n  padBaseAngle: number;\n  aeroCdEff: number;\n  aeroAreaEff: number;\n  lastMach: number;\n  lastAoADeg: number;\n  debugLog: (...args: unknown[]) => void;\n  getRocketBounds: () => { height: number };\n  destroyRocket: (reason: string) => void;\n}\n\n/**\n * Handles all physics simulation for the rocket\n */\nexport class PhysicsSimulation {\n  private context: PhysicsContext;\n\n  constructor(context: PhysicsContext) {\n    this.context = context;\n  }\n\n  updateContext(updates: Partial<PhysicsContext>): void {\n    Object.assign(this.context, updates);\n  }\n\n  /**\n   * Update physics simulation\n   */\n  updatePhysics(deltaTime: number): {\n    aeroCdEff: number;\n    aeroAreaEff: number;\n    lastMach: number;\n    lastAoADeg: number;\n  } {\n    const { gameState, rocketBody, rocketConfig, world, padBaseAngle, soundSystem } = this.context;\n\n    // If rocket has never been launched, keep it fixed to launch pad\n    if (!gameState.rocket.hasEverLaunched || gameState.rocket.isClamped) {\n      this.keepRocketOnPad();\n      return {\n        aeroCdEff: this.context.aeroCdEff,\n        aeroAreaEff: this.context.aeroAreaEff,\n        lastMach: this.context.lastMach,\n        lastAoADeg: this.context.lastAoADeg,\n      };\n    }\n\n    // Ground support: if at ground contact and thrust insufficient, keep resting\n    if (this.shouldStayGrounded()) {\n      this.keepRocketGrounded();\n      return {\n        aeroCdEff: this.context.aeroCdEff,\n        aeroAreaEff: this.context.aeroAreaEff,\n        lastMach: this.context.lastMach,\n        lastAoADeg: this.context.lastAoADeg,\n      };\n    }\n\n    // Clear forces\n    rocketBody.clearForces();\n\n    // Apply gravity\n    const gravityForce = this.calculateGravityForce();\n    rocketBody.applyForce(gravityForce);\n\n    // Apply thrust\n    if (gameState.rocket.isEngineIgnited && gameState.rocket.throttle > 0) {\n      const thrustForce = this.calculateThrustForce();\n      rocketBody.applyForce(thrustForce);\n\n      // Consume fuel\n      const fuelConsumed = rocketConfig.consumeFuel(deltaTime, gameState.rocket.throttle);\n\n      // Auto-shutdown engines if fuel depleted\n      if (!fuelConsumed || rocketConfig.getCurrentThrust() === 0) {\n        gameState.rocket.isEngineIgnited = false;\n        gameState.rocket.throttle = 0;\n        console.log('🔥 Fuel depleted! Engines automatically shut down.');\n        soundSystem.stopEngine();\n      }\n    }\n\n    // Apply atmospheric drag\n    const altitude = world.getAltitude(rocketBody.position.magnitude());\n    if (altitude < 80_000) {\n      const dragResult = this.calculateDragForce();\n      rocketBody.applyForce(dragResult.force);\n      this.context.aeroCdEff = dragResult.cdEff;\n      this.context.aeroAreaEff = dragResult.areaEff;\n      this.context.lastMach = dragResult.mach;\n      this.context.lastAoADeg = dragResult.aoaDeg;\n    }\n\n    // Update rocket mass\n    rocketBody.setMass(rocketConfig.getCurrentMass());\n\n    // Integrate physics\n    rocketBody.integrate(deltaTime);\n\n    // Check for ground collision\n    if (world.isBelowSurface(rocketBody.position.magnitude())) {\n      this.handleGroundCollision();\n    }\n\n    return {\n      aeroCdEff: this.context.aeroCdEff,\n      aeroAreaEff: this.context.aeroAreaEff,\n      lastMach: this.context.lastMach,\n      lastAoADeg: this.context.lastAoADeg,\n    };\n  }\n\n  private keepRocketOnPad(): void {\n    const { gameState, rocketBody, world, padBaseAngle } = this.context;\n    const dims = this.context.getRocketBounds();\n    const halfHeight = dims.height / 2;\n    const nozzleDrop = 6;\n    const centerRadius = world.planetRadius + halfHeight + nozzleDrop;\n\n    const omega = world.earthRotationRate || 0;\n    const angle = padBaseAngle + gameState.currentTime * omega;\n    const newX = Math.cos(angle) * centerRadius;\n    const newY = Math.sin(angle) * centerRadius;\n    const newPos = new Vector2(newX, newY);\n    const tan = new Vector2(-Math.sin(angle), Math.cos(angle)).multiply(omega * centerRadius);\n\n    rocketBody.position = newPos;\n    rocketBody.velocity = tan;\n  }\n\n  private shouldStayGrounded(): boolean {\n    const { rocketBody, world, rocketConfig, gameState } = this.context;\n    const dims = this.context.getRocketBounds();\n    const halfHeight = dims.height / 2;\n    const nozzleDrop = 6;\n    const r = rocketBody.position.magnitude();\n    const bottomAlt = r - (world.planetRadius + halfHeight + nozzleDrop);\n\n    if (bottomAlt <= 1.5) {\n      const g = world.getGravitationalAcceleration(r);\n      const weight = rocketBody.mass * g;\n      const thrust = rocketConfig.getCurrentThrust() * gameState.rocket.throttle;\n      const twr = weight > 0 ? thrust / weight : 0;\n      return twr <= 1.01;\n    }\n    return false;\n  }\n\n  private keepRocketGrounded(): void {\n    const { gameState, rocketBody, world, padBaseAngle } = this.context;\n    const dims = this.context.getRocketBounds();\n    const halfHeight = dims.height / 2;\n    const nozzleDrop = 6;\n    const desiredCenter = world.planetRadius + halfHeight + nozzleDrop + 1;\n    const omega = world.earthRotationRate || 0;\n    const angle = padBaseAngle + gameState.currentTime * omega;\n\n    const newPos = new Vector2(Math.cos(angle) * desiredCenter, Math.sin(angle) * desiredCenter);\n    const groundVel = new Vector2(-Math.sin(angle), Math.cos(angle)).multiply(\n      omega * desiredCenter\n    );\n\n    rocketBody.position = newPos;\n    rocketBody.velocity = groundVel;\n    gameState.rocket.isOnGround = true;\n  }\n\n  /**\n   * Calculate gravitational force\n   */\n  calculateGravityForce(): Vector2 {\n    const { rocketBody, world } = this.context;\n    const position = rocketBody.position;\n    const distance = position.magnitude();\n    const gravity = world.getGravitationalAcceleration(distance);\n    const direction = this.safeNormalize(position).multiply(-1);\n\n    return direction.multiply(gravity * rocketBody.mass);\n  }\n\n  /**\n   * Calculate thrust force\n   */\n  calculateThrustForce(): Vector2 {\n    const { rocketBody, rocketConfig, gameState } = this.context;\n    const thrust = rocketConfig.getCurrentThrust() * gameState.rocket.throttle;\n    const direction = new Vector2(-Math.sin(rocketBody.rotation), Math.cos(rocketBody.rotation));\n\n    return direction.multiply(thrust);\n  }\n\n  /**\n   * Calculate atmospheric drag force with aerodynamic parameters\n   */\n  calculateDragForce(): {\n    force: Vector2;\n    cdEff: number;\n    areaEff: number;\n    mach: number;\n    aoaDeg: number;\n  } {\n    const { rocketBody, world, rocketConfig } = this.context;\n    const altitude = world.getAltitude(rocketBody.position.magnitude());\n\n    // Strictly no aerodynamic effect at/above 80 km\n    if (altitude >= 80_000) {\n      return {\n        force: Vector2.zero(),\n        cdEff: rocketConfig.dragCoefficient,\n        areaEff: rocketConfig.crossSectionalArea,\n        mach: 0,\n        aoaDeg: 0,\n      };\n    }\n\n    const density = world.getAtmosphericDensity(altitude);\n\n    // Air-relative velocity (subtract ground rotation)\n    const airVel = rocketBody.velocity.subtract(this.getGroundVelocityAt(rocketBody.position));\n    const speed = airVel.magnitude();\n\n    if (speed < 0.01 || density <= 0) {\n      return {\n        force: Vector2.zero(),\n        cdEff: rocketConfig.dragCoefficient,\n        areaEff: rocketConfig.crossSectionalArea,\n        mach: 0,\n        aoaDeg: 0,\n      };\n    }\n\n    // Angle of attack calculation\n    const fwd = new Vector2(-Math.sin(rocketBody.rotation), Math.cos(rocketBody.rotation));\n    const flow = airVel.multiply(-1 / speed);\n    const dot = Math.max(-1, Math.min(1, fwd.x * flow.x + fwd.y * flow.y));\n    const aoa = Math.acos(dot);\n\n    // Mach number\n    const a = world.getSpeedOfSound(altitude);\n    const mach = speed / Math.max(1, a);\n\n    // Effective area varies with attitude\n    const aFront = rocketConfig.crossSectionalArea;\n    const sideMul = 6;\n    const sin2 = Math.sin(aoa) * Math.sin(aoa);\n    const cos2 = 1 - sin2;\n    const areaEff = aFront * (cos2 + sideMul * sin2);\n\n    // Drag coefficient with AoA and Mach effects\n    const cdBase = rocketConfig.dragCoefficient;\n    const cdAoA = 1 + 4 * sin2;\n\n    let cdMach = 1;\n    if (mach >= 0.8 && mach <= 1.2) {\n      const t = 1 - Math.abs(mach - 1) / 0.4;\n      cdMach = 1 + 1.5 * Math.max(0, t);\n    } else if (mach > 1.2) {\n      cdMach = 1.1 + 0.1 * Math.min(1, (mach - 1.2) / 1.8);\n    }\n\n    const cdEff = cdBase * cdAoA * cdMach;\n\n    return {\n      force: calculateDragForce(airVel, density, cdEff, areaEff),\n      cdEff,\n      areaEff,\n      mach,\n      aoaDeg: (aoa * 180) / Math.PI,\n    };\n  }\n\n  /**\n   * Handle ground collision\n   */\n  handleGroundCollision(): void {\n    const { rocketBody, world, effectsSystem, soundSystem, debugLog } = this.context;\n    debugLog('Ground collision detected!');\n\n    // Check relative impact speed\n    const groundVel = this.getGroundVelocityAt(rocketBody.position);\n    const impactSpeed = rocketBody.velocity.subtract(groundVel).magnitude();\n\n    if (impactSpeed > 15.0) {\n      debugLog(`💥 HIGH-SPEED GROUND IMPACT! Speed: ${impactSpeed.toFixed(1)} m/s - EXPLOSION!`);\n\n      // Create explosion\n      effectsSystem.createExplosion(\n        this.context.gameState.rocket.position,\n        this.context.gameState.rocket.velocity\n      );\n      soundSystem.playExplosion();\n\n      // Destroy rocket\n      this.context.destroyRocket('High-speed ground impact');\n      return;\n    }\n\n    // Soft landing\n    debugLog(`Soft landing! Impact speed: ${impactSpeed.toFixed(1)} m/s`);\n    rocketBody.velocity = Vector2.zero();\n\n    // Place rocket at ground contact\n    const currentDistance = rocketBody.position.magnitude();\n    const surfaceDistance = world.planetRadius;\n    const dims = this.context.getRocketBounds();\n    const halfHeight = dims.height / 2;\n    const desiredCenter = surfaceDistance + halfHeight + 1;\n\n    if (currentDistance < desiredCenter) {\n      const normalizedPos = this.safeNormalize(rocketBody.position);\n      rocketBody.position = normalizedPos.multiply(desiredCenter);\n    }\n  }\n\n  /**\n   * Get ground tangential velocity at position due to planet rotation\n   */\n  getGroundVelocityAt(pos: Vector2): Vector2 {\n    const { world } = this.context;\n    const omega = world.earthRotationRate || 0;\n    const r = pos.magnitude();\n    if (r < 1e-6 || omega === 0) return Vector2.zero();\n    const u = this.safeNormalize(pos);\n    const t = new Vector2(-u.y, u.x);\n    return t.multiply(omega * r);\n  }\n\n  private safeNormalize(vector: Vector2): Vector2 {\n    const magnitude = vector.magnitude();\n    if (magnitude < 0.001) {\n      return new Vector2(0, -1);\n    }\n    try {\n      return vector.normalized();\n    } catch {\n      return new Vector2(vector.x / magnitude, vector.y / magnitude);\n    }\n  }\n}\n","/**\n * Simple sound system for the game - handles 5 basic sounds:\n * 1. Game start\n * 2. Engine ignite/start\n * 3. Engine loop\n * 4. Explosion\n * 5. Success\n */\nexport class SimpleSoundSystem {\n  private audioContext: AudioContext | null = null;\n  private engineSource: AudioBufferSourceNode | null = null;\n  private engineGain: GainNode | null = null;\n  private engineLoopBuffer: AudioBuffer | null = null;\n  private engineStartBuffer: AudioBuffer | null = null;\n  private isEngineRunning = false;\n  private enabled = true;\n\n  constructor(enabled = true) {\n    this.enabled = enabled;\n    // Don't initialize audio until first user interaction\n  }\n\n  private async initAudio() {\n    if (this.audioContext) return; // Already initialized\n\n    try {\n      const AudioContextClass =\n        (window as unknown as { AudioContext?: typeof AudioContext }).AudioContext ||\n        (window as unknown as { webkitAudioContext?: typeof AudioContext }).webkitAudioContext;\n      if (!AudioContextClass) {\n        console.warn('Web Audio API not supported');\n        this.enabled = false;\n        return;\n      }\n      this.audioContext = new AudioContextClass();\n\n      // Pre-load engine sounds for smoother gameplay\n      this.engineStartBuffer = await this.loadSound('sounds/rocket-launch-306441.mp3');\n      this.engineLoopBuffer = await this.loadSound(\n        'sounds/fx-looking-straight-into-a-burning-rocket-engine-283448.mp3'\n      );\n    } catch (e) {\n      console.warn('Failed to initialize audio:', e);\n      this.enabled = false;\n    }\n  }\n\n  private async loadSound(url: string): Promise<AudioBuffer | null> {\n    if (!this.audioContext || !this.enabled) return null;\n\n    try {\n      const response = await fetch(url);\n      const arrayBuffer = await response.arrayBuffer();\n      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n      return audioBuffer;\n    } catch (e) {\n      console.warn(`Failed to load sound ${url}:`, e);\n      return null;\n    }\n  }\n\n  private async ensureContext() {\n    if (!this.audioContext || !this.enabled) return false;\n\n    if (this.audioContext.state === 'suspended') {\n      try {\n        await this.audioContext.resume();\n      } catch (e) {\n        console.warn('Failed to resume audio context:', e);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  async playGameStart() {\n    await this.initAudio(); // Ensure audio is initialized\n    if (!(await this.ensureContext())) return;\n\n    try {\n      const buffer = await this.loadSound('sounds/game-start-6104.mp3');\n      if (!buffer || !this.audioContext) return;\n\n      const source = this.audioContext.createBufferSource();\n      const gain = this.audioContext.createGain();\n\n      source.buffer = buffer;\n      gain.gain.value = 0.5;\n\n      source.connect(gain);\n      gain.connect(this.audioContext.destination);\n      source.start();\n    } catch (e) {\n      console.warn('Failed to play game start sound:', e);\n    }\n  }\n\n  async playEngineIgnite() {\n    await this.initAudio(); // Ensure audio is initialized\n    if (!(await this.ensureContext())) return;\n\n    try {\n      if (!this.engineStartBuffer || !this.audioContext) return;\n\n      const source = this.audioContext.createBufferSource();\n      const gain = this.audioContext.createGain();\n\n      source.buffer = this.engineStartBuffer;\n      gain.gain.value = 0.6;\n\n      source.connect(gain);\n      gain.connect(this.audioContext.destination);\n      source.start();\n\n      // Start the engine loop after a short delay\n      setTimeout(() => this.startEngineLoop(0.5), 500);\n    } catch (e) {\n      console.warn('Failed to play engine ignite sound:', e);\n    }\n  }\n\n  private async startEngineLoop(throttle = 0.5) {\n    if (!(await this.ensureContext())) return;\n    if (this.isEngineRunning || !this.engineLoopBuffer || !this.audioContext) return;\n\n    try {\n      this.engineSource = this.audioContext.createBufferSource();\n      this.engineGain = this.audioContext.createGain();\n\n      this.engineSource.buffer = this.engineLoopBuffer;\n      this.engineSource.loop = true;\n      this.engineGain.gain.value = throttle * 0.7;\n\n      this.engineSource.connect(this.engineGain);\n      this.engineGain.connect(this.audioContext.destination);\n      this.engineSource.start();\n\n      this.isEngineRunning = true;\n    } catch (e) {\n      console.warn('Failed to start engine loop sound:', e);\n    }\n  }\n\n  setEngineThrottle(throttle: number) {\n    if (!this.engineGain || !this.isEngineRunning || !this.audioContext) return;\n\n    try {\n      const targetGain = Math.max(0, Math.min(1, throttle)) * 0.7;\n      this.engineGain.gain.linearRampToValueAtTime(targetGain, this.audioContext.currentTime + 0.1);\n    } catch (e) {\n      console.warn('Failed to set engine throttle:', e);\n    }\n  }\n\n  stopEngine() {\n    if (!this.isEngineRunning || !this.engineSource) return;\n\n    try {\n      this.engineSource.stop();\n      this.engineSource.disconnect();\n      if (this.engineGain) {\n        this.engineGain.disconnect();\n      }\n    } catch (e) {\n      console.warn('Failed to stop engine:', e);\n    } finally {\n      this.engineSource = null;\n      this.engineGain = null;\n      this.isEngineRunning = false;\n    }\n  }\n\n  async playExplosion() {\n    if (!(await this.ensureContext())) return;\n\n    try {\n      const buffer = await this.loadSound('sounds/nuclear-explosion-386181.mp3');\n      if (!buffer || !this.audioContext) return;\n\n      const source = this.audioContext.createBufferSource();\n      const gain = this.audioContext.createGain();\n\n      source.buffer = buffer;\n      gain.gain.value = 0.6;\n\n      source.connect(gain);\n      gain.connect(this.audioContext.destination);\n      source.start();\n\n      // Stop engine if it's running\n      this.stopEngine();\n    } catch (e) {\n      console.warn('Failed to play explosion sound:', e);\n    }\n  }\n\n  async playSuccess() {\n    if (!(await this.ensureContext())) return;\n\n    try {\n      const buffer = await this.loadSound('sounds/success-340660.mp3');\n      if (!buffer || !this.audioContext) return;\n\n      const source = this.audioContext.createBufferSource();\n      const gain = this.audioContext.createGain();\n\n      source.buffer = buffer;\n      gain.gain.value = 0.6;\n\n      source.connect(gain);\n      gain.connect(this.audioContext.destination);\n      source.start();\n    } catch (e) {\n      console.warn('Failed to play success sound:', e);\n    }\n  }\n\n  setEnabled(enabled: boolean) {\n    this.enabled = enabled;\n    if (!enabled) {\n      this.stopEngine();\n    }\n  }\n\n  dispose() {\n    this.stopEngine();\n    if (this.audioContext) {\n      try {\n        this.audioContext.close();\n      } catch (e) {\n        console.warn('Failed to close audio context:', e);\n      }\n      this.audioContext = null;\n    }\n  }\n}\n","import { Vector2 } from '../physics/Vector2.js';\nimport type { WorldParameters } from '../physics/WorldParameters.js';\nimport type { CanvasRenderer } from '../rendering/CanvasRenderer.js';\nimport { StagingVisuals } from '../rendering/StagingVisuals.js';\nimport type { GameState } from './types.js';\n\ninterface SeparatedStage {\n  pos: Vector2;\n  vel: Vector2;\n  rotation: number;\n  rotSpeed: number;\n  life: number;\n  stageIndex: number;\n  bornTime: number;\n  age: number;\n  landed?: boolean;\n}\n\n/**\n * Manages rocket staging animations and separated stage physics\n */\nexport class StageManager {\n  private separatedStages: SeparatedStage[] = [];\n  private stagingVis: StagingVisuals;\n  private lastStagingTime = 0;\n\n  constructor() {\n    this.stagingVis = new StagingVisuals();\n  }\n\n  /**\n   * Reset all staging animations\n   */\n  reset(): void {\n    this.separatedStages = [];\n    this.stagingVis = new StagingVisuals();\n    this.lastStagingTime = 0;\n  }\n\n  /**\n   * Create staging animation when a stage separates\n   */\n  createStagingAnimation(\n    gameState: GameState,\n    rocketDown: Vector2,\n    exhaustLocalY: number | undefined,\n    rocketHeight: number\n  ): void {\n    this.lastStagingTime = gameState.currentTime;\n\n    const position = gameState.rocket.position;\n    const velocity = gameState.rocket.velocity;\n    const currentStageIndex = gameState.rocket.currentStage - 1;\n\n    // Separation: drift gently down along rocket orientation\n    const separationVel = velocity.add(rocketDown.multiply(5));\n\n    // Spawn 20-25px below the current stage bottom\n    let bottomDistance: number;\n    if (typeof exhaustLocalY === 'number') {\n      bottomDistance = Math.max(10, -exhaustLocalY);\n    } else {\n      bottomDistance = Math.max(10, rocketHeight / 2);\n    }\n\n    const baseBottom = position.add(rocketDown.multiply(bottomDistance));\n    const offset = 20 + Math.random() * 5;\n    const separatedStagePos = baseBottom.add(rocketDown.multiply(offset));\n\n    this.separatedStages.push({\n      pos: separatedStagePos,\n      vel: separationVel,\n      rotation: gameState.rocket.rotation,\n      rotSpeed: 0,\n      life: 30.0, // Visible for 30 seconds\n      stageIndex: Math.max(0, currentStageIndex),\n      bornTime: gameState.currentTime,\n      age: 0,\n      landed: false,\n    });\n\n    // Create debris pieces\n    for (let i = 0; i < 4; i++) {\n      const angle = (i / 4) * Math.PI * 2;\n      const speed = 10 + Math.random() * 20;\n      const dv = new Vector2(\n        velocity.x + Math.cos(angle) * speed,\n        velocity.y + Math.sin(angle) * speed\n      );\n      this.stagingVis.addDebris(\n        position,\n        dv,\n        Math.random() * Math.PI * 2,\n        (Math.random() - 0.5) * 10,\n        2.0\n      );\n    }\n  }\n\n  /**\n   * Update physics for separated stages\n   */\n  update(\n    deltaTime: number,\n    world: WorldParameters,\n    renderer: CanvasRenderer,\n    createExplosion: (pos: Vector2, vel: Vector2) => void\n  ): void {\n    // Update separated stages\n    for (let i = this.separatedStages.length - 1; i >= 0; i--) {\n      const stage = this.separatedStages[i];\n\n      if (stage.landed) {\n        // Keep landed stages in place\n        stage.life -= deltaTime * 0.0; // Keep indefinitely\n        if (stage.life <= 0) {\n          this.separatedStages.splice(i, 1);\n        }\n        continue;\n      }\n\n      stage.age += deltaTime;\n\n      // Apply gravity\n      const gravityMagnitude = world.getGravitationalAcceleration(stage.pos.magnitude());\n      const positionMagnitude = stage.pos.magnitude();\n      let gravityDirection: Vector2;\n\n      if (positionMagnitude < 0.001) {\n        gravityDirection = new Vector2(0, -1);\n      } else {\n        gravityDirection = stage.pos.multiply(-1 / positionMagnitude);\n      }\n\n      const gravityAccel = gravityDirection.multiply(gravityMagnitude);\n      stage.vel = stage.vel.add(gravityAccel.multiply(deltaTime));\n\n      // Check ground collision\n      const stageAltitude = world.getAltitude(stage.pos.magnitude());\n      if (stageAltitude <= 0) {\n        const impactSpeed = stage.vel.magnitude();\n        if (impactSpeed > 15) {\n          // Hard impact - explode\n          createExplosion(stage.pos, stage.vel);\n          this.separatedStages.splice(i, 1);\n          continue;\n        }\n        // Soft landing\n        const surfaceNorm =\n          positionMagnitude > 0.001 ? stage.pos.multiply(1 / positionMagnitude) : new Vector2(0, 1);\n        stage.pos = surfaceNorm.multiply(world.planetRadius + 1);\n        stage.vel = Vector2.zero();\n        stage.landed = true;\n      }\n\n      if (!stage.landed) {\n        stage.pos = stage.pos.add(stage.vel.multiply(deltaTime));\n      }\n\n      stage.life -= deltaTime;\n\n      // Cull if far off screen\n      const screenPos = renderer.worldToScreen(stage.pos);\n      const viewSize = renderer.getSize();\n      if (!stage.landed && screenPos.y > viewSize.y + 120) {\n        stage.life = 0;\n      }\n\n      if (stage.life <= 0) {\n        this.separatedStages.splice(i, 1);\n      }\n    }\n\n    // Update staging visuals\n    this.stagingVis.update(deltaTime);\n  }\n\n  /**\n   * Render separated stages and debris\n   */\n  render(renderer: CanvasRenderer): void {\n    // Draw separated stages\n    for (const stage of this.separatedStages) {\n      const alpha = Math.max(0, Math.min(1, stage.life / 30.0));\n\n      renderer.drawRotated(stage.pos, stage.rotation, () => {\n        if (stage.stageIndex === 0) {\n          // First stage - larger\n          renderer.drawRectangle(\n            new Vector2(-8, -25),\n            16,\n            50,\n            `rgba(240, 240, 240, ${alpha})`,\n            `rgba(44, 90, 160, ${alpha})`,\n            2\n          );\n        } else {\n          // Upper stages - smaller\n          renderer.drawRectangle(\n            new Vector2(-6, -18),\n            12,\n            36,\n            `rgba(255, 255, 255, ${alpha})`,\n            `rgba(192, 57, 43, ${alpha})`,\n            2\n          );\n        }\n      });\n    }\n\n    // Debris drawing handled separately by StagingVisuals\n  }\n\n  /**\n   * Get staging animation time for smoke effects\n   */\n  getStagingAnimationTime(currentTime: number): number {\n    return currentTime - this.lastStagingTime;\n  }\n}\n","import { calculateDragForce } from '../physics/AtmosphericPhysics.js';\nimport { PhysicsIntegrator } from '../physics/PhysicsIntegrator.js';\nimport type { RigidBody } from '../physics/RigidBody.js';\nimport { Vector2 } from '../physics/Vector2.js';\nimport { WorldParameters } from '../physics/WorldParameters.js';\nimport { BackgroundSystem } from '../rendering/BackgroundSystem.js';\nimport { Camera, CanvasRenderer } from '../rendering/CanvasRenderer.js';\nimport { PlanetRenderer } from '../rendering/PlanetRenderer.js';\nimport { RocketRenderer } from '../rendering/RocketRenderer.js';\nimport { AtmosphereUI } from '../ui/AtmosphereUI.js';\nimport { FactBubblesSystem } from '../ui/FactBubbles.js';\nimport { HUDSystem } from '../ui/HUDSystem.js';\nimport { enforceAtmosphericLimits } from './AtmosphereLimiter.js';\nimport { Autopilot } from './Autopilot.js';\nimport { CommandExecutor } from './CommandExecutor.js';\nimport { EffectsSystem } from './EffectsSystem.js';\nimport { GameStateManager } from './GameStateManager.js';\nimport { updateGuidance, updateVisualGuidance } from './GuidanceSystem.js';\nimport { InputController } from './InputController.js';\nimport { computeApoPeri } from './Navigator.js';\nimport { PhysicsSimulation } from './PhysicsSimulation.js';\nimport type { RocketConfiguration } from './RocketConfiguration.js';\nimport { SimpleSoundSystem } from './SimpleSoundSystem.js';\nimport { StageManager } from './StageManager.js';\nimport type { GameState } from './types.js';\n\n// Main game engine class\nexport class GameEngine {\n  private canvas: HTMLCanvasElement;\n  private renderer: CanvasRenderer;\n  private camera: Camera;\n  private hudSystem: HUDSystem;\n  private rocketRenderer: RocketRenderer;\n  private background: BackgroundSystem;\n  private planetRenderer: PlanetRenderer;\n  private physicsIntegrator: PhysicsIntegrator;\n  private stageManager: StageManager;\n  private effectsSystem: EffectsSystem;\n  private soundSystem: SimpleSoundSystem;\n  private physicsSimulation: PhysicsSimulation;\n  private stateManager: GameStateManager;\n  private commandExecutor: CommandExecutor;\n\n  private gameState!: GameState;\n  private rocketBody!: RigidBody;\n  private rocketConfig!: RocketConfiguration;\n\n  private isRunning = false;\n  private lastTime = 0;\n  private animationFrameId = 0;\n\n  // Atmosphere notifications\n  private atmosphereUI!: AtmosphereUI;\n  private gameStartTime = 0;\n  private missionTimer = 0;\n\n  // Game over system - now managed by stateManager\n\n  // Game speed controls\n  private gameSpeed = 2; // Base game speed is 2x (displayed as 1x)\n\n  // HUD visibility (debug helper). Handy to isolate rendering issues.\n  private showHUD = true;\n\n  private padBaseAngle: number = Math.PI / 2; // base ground angle for pad/site (π/2 = top)\n  private autopilot?: Autopilot;\n  private autopilotEnabled = false;\n  private pendingAutopilotMode: boolean | null = null;\n  private apHold: 'none' | 'prograde' | 'retrograde' | 'up' | 'target' = 'none';\n  private apTargetRot: number | null = null;\n  private apLogger: ((msg: string) => void) | null = null; // small log hook for console\n  private factSystem?: FactBubblesSystem;\n  // simple logger for dev: prints only when debugEnabled\n  private debugLog(...args: unknown[]): void {\n    if (this.debugEnabled) console.log(...args);\n  }\n\n  // Helper: safe normalization with fallback values\n  private safeNormalize(vector: Vector2): Vector2 {\n    const magnitude = vector.magnitude();\n    if (magnitude < 0.001) {\n      return new Vector2(0, -1);\n    }\n    try {\n      return vector.normalized();\n    } catch {\n      return new Vector2(vector.x / magnitude, vector.y / magnitude);\n    }\n  }\n\n  // Aerodynamics (effective values for HUD/limits)\n  // Computed each frame from attitude and Mach to reflect current airflow.\n  private aeroCdEff = 0.3;\n  private aeroAreaEff = 10;\n  private lastMach = 0;\n  private lastAoADeg = 0;\n  private overspeedTime = 0; // Track overspeed duration for grace period\n\n  // Attitude control (slow turning)\n  private turnLeft = false;\n  private turnRight = false;\n  private angularVelocity = 0; // rad/s\n  private readonly maxTurnRate: number = 0.12; // rad/s (~6.9°/s)\n  private readonly angularAccel: number = 0.5; // rad/s^2\n  private visualRotation = 0; // smoothed rotation for rendering\n  // Debug controls\n  private debugEnabled = false;\n  private lastDebugLogTime = 0;\n  private lastSoundDensity = -1; // Track last sound density to avoid constant updates\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.renderer = new CanvasRenderer(canvas);\n    // Initialize camera - will be set properly in initializeGameState\n    this.camera = new Camera(Vector2.zero(), 0.1);\n    this.hudSystem = new HUDSystem(canvas);\n    this.rocketRenderer = new RocketRenderer();\n    this.physicsIntegrator = new PhysicsIntegrator();\n    this.autopilot = new Autopilot(this);\n    this.background = new BackgroundSystem();\n    this.planetRenderer = new PlanetRenderer();\n    this.stageManager = new StageManager();\n    this.effectsSystem = new EffectsSystem();\n    this.soundSystem = new SimpleSoundSystem(true);\n\n    // Initialize state manager\n    this.stateManager = new GameStateManager({\n      canvas: this.canvas,\n      rocketRenderer: this.rocketRenderer,\n      soundSystem: this.soundSystem,\n      debugLog: (...args) => this.debugLog(...args),\n    });\n\n    // Physics and commands will be initialized after game state\n\n    this.renderer.setCamera(this.camera);\n\n    // Initialize game state first\n    this.initializeGameState();\n\n    // Setup camera to proper initial position and zoom\n    this.camera.setTarget(this.gameState.rocket.position);\n    this.camera.position = this.gameState.rocket.position.clone();\n    this.camera.setZoom(0.8); // Start more zoomed in for detailed rocket view\n\n    // Initialize timer and show welcome message\n    this.gameStartTime = Date.now();\n    this.missionTimer = 0;\n    this.atmosphereUI = new AtmosphereUI(this.canvas);\n    this.atmosphereUI.addMessage('Good luck!', 0, 3.0);\n\n    // Setup event listeners\n    this.setupEventListeners();\n    // Facts system\n    this.factSystem = new FactBubblesSystem(this.canvas);\n    // Single mode (manual) — scripts can run any time\n    this.gameState.autopilotEnabled = false;\n  }\n\n  toggleAutopilot(): void {\n    this.autopilotEnabled = !this.autopilotEnabled;\n    this.gameState.autopilotEnabled = this.autopilotEnabled;\n    // Notify UI outside canvas to show/hide the console\n    document.dispatchEvent(\n      new CustomEvent('autopilot-toggle', { detail: { enabled: this.autopilotEnabled } })\n    );\n  }\n\n  // UI helper: show a small on-screen info message\n  showInfo(text: string, duration = 2.5): void {\n    this.atmosphereUI.addMessage(text, this.gameState.currentTime, duration);\n  }\n\n  isAutopilotOn(): boolean {\n    return this.autopilotEnabled;\n  }\n\n  /** Get apoapsis altitude estimate (m) using navigator helper. */\n  getApoapsisAltitude(): number {\n    const mu = this.gameState.world.gravitationalParameter;\n    const R = this.gameState.world.planetRadius;\n    const res = computeApoPeri(\n      this.gameState.rocket.position,\n      this.gameState.rocket.velocity,\n      mu,\n      R\n    );\n    return Number.isFinite(res.apoAlt) ? res.apoAlt : Number.POSITIVE_INFINITY;\n  }\n\n  /** Get periapsis altitude estimate (m) using navigator helper. */\n  getPeriapsisAltitude(): number {\n    const mu = this.gameState.world.gravitationalParameter;\n    const R = this.gameState.world.planetRadius;\n    const res = computeApoPeri(\n      this.gameState.rocket.position,\n      this.gameState.rocket.velocity,\n      mu,\n      R\n    );\n    return res.periAlt;\n  }\n\n  /** Radial velocity (m/s): positive when moving away from planet center. */\n  getRadialVelocity(): number {\n    const p = this.gameState.rocket.position;\n    const v = this.gameState.rocket.velocity;\n    const r = Math.hypot(p.x, p.y);\n    if (r < 1e-6) return 0;\n    const ux = p.x / r;\n    const uy = p.y / r;\n    return v.x * ux + v.y * uy;\n  }\n\n  /** Current altitude above surface (m). */\n  getAltitude(): number {\n    return this.gameState.world.getAltitude(this.gameState.rocket.position.magnitude());\n  }\n\n  /** Fuel remaining (kg) in the active stage, or NaN if not available. */\n  getActiveStageFuel(): number {\n    try {\n      const idx = this.rocketConfig.getCurrentStageIndex();\n      const st = this.rocketConfig.stages[idx];\n      return typeof st?.fuelRemaining === 'number' ? st.fuelRemaining : Number.NaN;\n    } catch {\n      return Number.NaN;\n    }\n  }\n\n  /**\n   * Check and play success sounds for reaching space and stable orbit.\n   */\n  private checkSuccessSounds(): void {\n    this.stateManager.checkSuccessSounds(this.gameState);\n  }\n\n  /**\n   * Initialize the game state with default values\n   */\n  private initializeGameState(): void {\n    // Use state manager to initialize\n    const result = this.stateManager.initializeGameState();\n    this.gameState = result.gameState;\n    this.rocketBody = result.rocketBody;\n    this.rocketConfig = result.rocketConfig;\n    this.padBaseAngle = result.padBaseAngle;\n\n    // Initialize physics simulation\n    this.physicsSimulation = new PhysicsSimulation({\n      world: this.gameState.world,\n      rocketConfig: this.rocketConfig,\n      rocketBody: this.rocketBody,\n      gameState: this.gameState,\n      effectsSystem: this.effectsSystem,\n      soundSystem: this.soundSystem,\n      padBaseAngle: this.padBaseAngle,\n      aeroCdEff: this.aeroCdEff,\n      aeroAreaEff: this.aeroAreaEff,\n      lastMach: this.lastMach,\n      lastAoADeg: this.lastAoADeg,\n      debugLog: (...args) => this.debugLog(...args),\n      getRocketBounds: () => this.rocketRenderer.getRocketBounds(this.gameState.rocket),\n      destroyRocket: (reason) => this.destroyRocket(reason),\n    });\n\n    // Initialize command executor\n    this.commandExecutor = new CommandExecutor({\n      gameState: this.gameState,\n      rocketBody: this.rocketBody,\n      rocketConfig: this.rocketConfig,\n      soundSystem: this.soundSystem,\n      effectsSystem: this.effectsSystem,\n      stageManager: this.stageManager,\n      rocketRenderer: this.rocketRenderer,\n      debugLog: (...args) => this.debugLog(...args),\n      destroyRocket: (reason) => this.destroyRocket(reason),\n    });\n  }\n\n  /**\n   * Setup event listeners for input\n   */\n  private setupEventListeners(): void {\n    new InputController(this, this.canvas, this.camera, this.hudSystem, this.gameState).init();\n  }\n\n  /**\n   * Handle key down events\n   * @param event Keyboard event\n   */\n\n  /**\n   * Initialize the game engine\n   */\n  async initialize(): Promise<void> {\n    this.debugLog('Game engine initialized');\n  }\n\n  /**\n   * Start the game loop\n   */\n  start(): void {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n    this.gameState.isRunning = true;\n    this.lastTime = performance.now();\n    // Play game start sound\n    this.soundSystem.playGameStart();\n    this.gameLoop();\n    this.debugLog('Game started');\n  }\n\n  /**\n   * Increment/decrement throttle by delta (clamped 0..1)\n   */\n  nudgeThrottle(delta: number): void {\n    this.commandExecutor.nudgeThrottle(delta);\n  }\n\n  // Helpers for input controller\n  setTurnLeft(state: boolean): void {\n    this.turnLeft = state;\n  }\n  setTurnRight(state: boolean): void {\n    this.turnRight = state;\n  }\n  isAutopilotRunning(): boolean {\n    return !!this.autopilot?.isRunning();\n  }\n  handleResize(): void {\n    this.renderer.handleResize();\n  }\n\n  /**\n   * Pause the game\n   */\n  pause(): void {\n    this.gameState.isPaused = true;\n    this.debugLog('Game paused');\n  }\n\n  /**\n   * Stop the game and clean up resources\n   */\n  stop(): void {\n    this.isRunning = false;\n    this.gameState.isPaused = true;\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n      this.animationFrameId = 0;\n    }\n  }\n\n  /**\n   * Resume the game\n   */\n  resume(): void {\n    this.gameState.isPaused = false;\n    this.debugLog('Game resumed');\n  }\n\n  /**\n   * Restart the game\n   */\n  restart(): void {\n    this.debugLog('🔄 Restarting game...');\n    this.stop();\n\n    // Reset states\n    this.stateManager.resetState();\n    this.overspeedTime = 0;\n\n    // Clear all effects\n    this.stageManager.reset();\n    this.effectsSystem.reset();\n    this.atmosphereUI.reset();\n\n    // Reinitialize game state\n    this.initializeGameState();\n    // Apply pending autopilot mode if requested\n    if (this.pendingAutopilotMode !== null) {\n      this.autopilotEnabled = this.pendingAutopilotMode;\n      this.gameState.autopilotEnabled = this.pendingAutopilotMode;\n      document.dispatchEvent(\n        new CustomEvent('autopilot-toggle', { detail: { enabled: this.autopilotEnabled } })\n      );\n      this.pendingAutopilotMode = null;\n    }\n    this.gameStartTime = Date.now();\n    this.missionTimer = 0;\n\n    // Start the game\n    this.start();\n    this.debugLog('✅ Game restarted successfully!');\n  }\n\n  // Reload the page like F5 and optionally persist autopilot mode for next launch\n  goToMenu(autopilot?: boolean): void {\n    try {\n      if (typeof autopilot === 'boolean') {\n        localStorage.setItem('startAutoPilot', autopilot ? '1' : '0');\n      }\n    } catch {}\n    window.location.reload();\n  }\n\n  /**\n   * Toggle pause state\n   */\n  togglePause(): void {\n    if (this.gameState.isPaused) {\n      this.resume();\n    } else {\n      this.pause();\n    }\n  }\n\n  /**\n   * Reset the game to initial state\n   */\n  reset(): void {\n    this.isRunning = false;\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n    }\n\n    this.initializeGameState();\n    this.debugLog('Game reset');\n  }\n\n  /**\n   * Main game loop\n   */\n  private gameLoop(): void {\n    if (!this.isRunning) return;\n\n    const currentTime = performance.now();\n    const deltaTime = Math.min((currentTime - this.lastTime) / 1000, 0.1); // Cap at 100ms\n    this.lastTime = currentTime;\n\n    if (!this.gameState.isPaused) {\n      this.update(deltaTime * this.gameState.timeWarp * this.gameSpeed);\n    }\n\n    this.render();\n\n    this.animationFrameId = requestAnimationFrame(() => this.gameLoop());\n  }\n\n  /**\n   * Update game logic\n   * @param deltaTime Frame time in seconds\n   */\n  private update(deltaTime: number): void {\n    // Handle explosion phase using stateManager\n    if (this.stateManager.isExplosionPhase()) {\n      const stillExploding = this.stateManager.updateExplosion(deltaTime);\n\n      // Update visuals during explosion phase\n      this.effectsSystem.update(deltaTime);\n      this.stageManager.update(deltaTime, this.gameState.world, this.renderer, (pos, vel) =>\n        this.effectsSystem.createExplosion(pos, vel)\n      );\n\n      if (!stillExploding) {\n        // Explosion ended, now in game over state\n      }\n      return;\n    }\n\n    // Check if game is over using stateManager\n    if (this.stateManager.isGameOverState()) {\n      const result = this.stateManager.updateGameOver(deltaTime);\n\n      if (result.shouldRestart) {\n        this.goToMenu(this.autopilotEnabled);\n      }\n\n      // Keep visuals alive while game over screen shows\n      this.effectsSystem.update(deltaTime);\n      this.stageManager.update(deltaTime, this.gameState.world, this.renderer, (pos, vel) =>\n        this.effectsSystem.createExplosion(pos, vel)\n      );\n      return;\n    }\n\n    // Advance simulated clocks by the simulated delta time (respects speed/warp)\n    this.gameState.currentTime += deltaTime;\n    this.missionTimer += deltaTime;\n\n    // Update attitude before physics so thrust aligns with rotation\n    {\n      const g = updateGuidance(\n        {\n          turnLeft: this.turnLeft,\n          turnRight: this.turnRight,\n          apHold: this.apHold,\n          apTargetRot: this.apTargetRot,\n          angularVelocity: this.angularVelocity,\n          angularAccel: this.angularAccel,\n          maxTurnRate: this.maxTurnRate,\n          debugEnabled: this.debugEnabled,\n          lastDebugLogTime: this.lastDebugLogTime,\n          currentTime: this.gameState.currentTime,\n          rotation: this.rocketBody.rotation,\n          velocity: this.rocketBody.velocity,\n          position: this.rocketBody.position,\n          getAltitude: (r: number) => this.gameState.world.getAltitude(r),\n        },\n        deltaTime\n      );\n      this.rocketBody.rotation = g.rotation;\n      this.angularVelocity = g.angularVelocity;\n      this.apTargetRot = g.apTargetRot;\n      this.lastDebugLogTime = g.lastDebugLogTime;\n      if (g.debugMessages?.length) {\n        for (const m of g.debugMessages) this.debugLog(m);\n      }\n    }\n\n    // Update physics\n    this.physicsIntegrator.update(deltaTime, (dt) => {\n      this.updatePhysics(dt);\n    });\n    // Script engine tick (runs only when a queue exists)\n    this.autopilot?.update(deltaTime);\n\n    // Update background system\n    this.background.update(this.gameState, deltaTime);\n\n    // Update staging animation\n    this.stageManager.update(deltaTime, this.gameState.world, this.renderer, (pos, vel) =>\n      this.effectsSystem.createExplosion(pos, vel)\n    );\n\n    // Update effects system\n    this.effectsSystem.update(deltaTime);\n\n    // Atmosphere UI messages\n    this.atmosphereUI.checkLayers(\n      this.gameState.world,\n      this.gameState.rocket.position.magnitude(),\n      this.gameState.currentTime\n    );\n    this.atmosphereUI.update(this.gameState.currentTime);\n\n    // Update speed effects\n    const rotation = this.gameState.rocket.rotation;\n    const rocketDown = new Vector2(Math.sin(rotation), -Math.cos(rotation));\n    const exhaustLocalY = this.gameState.rocket.exhaustY;\n    let bottomDistance: number;\n    if (typeof exhaustLocalY === 'number') {\n      bottomDistance = Math.max(10, -exhaustLocalY);\n    } else {\n      const dims = this.rocketRenderer.getRocketBounds(this.gameState.rocket);\n      bottomDistance = Math.max(10, dims.height / 2);\n    }\n\n    this.effectsSystem.updateSpeedEffects(\n      deltaTime,\n      this.gameState,\n      this.gameState.world,\n      rocketDown,\n      bottomDistance\n    );\n\n    // Create engine smoke effects\n    const engineBase = this.gameState.rocket.position.add(rocketDown.multiply(bottomDistance));\n    this.effectsSystem.createEngineSmoke(\n      this.gameState,\n      this.gameState.world,\n      rocketDown,\n      engineBase\n    );\n\n    // Apply atmospheric speed cap and heating\n    this.enforceAtmosphericLimits(deltaTime);\n\n    // Update engine sound environment (muffle in space)\n    const altForSound = this.gameState.world.getAltitude(\n      this.gameState.rocket.position.magnitude()\n    );\n    const dens = this.gameState.world.getAtmosphericDensity(Math.max(0, altForSound));\n    const densNorm = Math.max(0, Math.min(1, dens / this.gameState.world.surfaceDensity));\n\n    // Update rocket state from physics\n    this.updateRocketState();\n    // Smooth visual rotation toward physics rotation to avoid snaps\n    this.visualRotation = updateVisualGuidance(\n      this.visualRotation,\n      this.rocketBody.rotation,\n      deltaTime\n    );\n\n    // Update camera - instant follow, no smooth animation\n    this.camera.position = this.gameState.rocket.position.clone();\n\n    // Only auto-adjust zoom if user hasn't manually controlled it and not in orbit yet\n    const altitude = this.gameState.world.getAltitude(this.gameState.rocket.position.magnitude());\n    const isInOrbit = altitude > 200_000; // Consider orbit at 200km+\n\n    if (!this.gameState.manualZoomControl && !isInOrbit) {\n      // Keep current zoom for surface operations - no auto zoom out\n      // This maintains the detailed view until orbit is achieved\n      if (altitude < 50_000) {\n        // Keep good zoom level until well into atmosphere\n        const targetZoom = 0.75; // Maintain closer, detailed view near surface\n        this.camera.setZoom(targetZoom);\n      }\n    }\n\n    // Update facts system\n    this.factSystem?.update(\n      Date.now(),\n      this.gameState.world.getAltitude(this.gameState.rocket.position.magnitude())\n    );\n\n    // Big success cues (audio)\n    this.checkSuccessSounds();\n  }\n\n  /**\n   * Smoothly update rocket attitude based on input (slow turn)\n   */\n  // guidance logic moved to GuidanceSystem.ts\n\n  // small API for Autopilot to control the ship\n  setAutopilotHold(mode: 'none' | 'prograde' | 'retrograde' | 'up'): void {\n    this.apHold = mode;\n  }\n  setAutopilotTargetAngle(deg: number): void {\n    // Positive degrees rotate left; east is to the right, so negative degrees for east.\n    const rad = (deg * Math.PI) / 180;\n    this.apTargetRot = rad;\n    this.apHold = 'target';\n  }\n  isEngineOn(): boolean {\n    return this.gameState.rocket.isEngineIgnited;\n  }\n  // Public helper: detect if rocket is on pad/ground (for UI gating)\n  isOnGround(): boolean {\n    try {\n      const dims = this.rocketRenderer.getRocketBounds(this.gameState.rocket);\n      const halfHeight = dims.height / 2;\n      const nozzleDrop = 6;\n      const r = this.rocketBody.position.magnitude();\n      const bottomAlt = r - (this.gameState.world.planetRadius + halfHeight + nozzleDrop);\n      if (bottomAlt <= 1.5) return true;\n    } catch {}\n    return (\n      this.gameState.rocket.isClamped === true ||\n      this.gameState.rocket.isOnGround === true ||\n      this.gameState.rocket.hasEverLaunched === false\n    );\n  }\n  getCurrentTWR(): number {\n    const g = this.gameState.world.getGravitationalAcceleration(\n      this.rocketBody.position.magnitude()\n    );\n    const thrust = this.rocketConfig.getCurrentThrust() * this.gameState.rocket.throttle;\n    const w = this.rocketBody.mass * g;\n    return w > 0 ? thrust / w : 0;\n  }\n\n  // Small helpers for the external console UI\n  setAutopilotLogger(fn: (msg: string) => void): void {\n    // simple log forwarder used by the console UI\n    this.apLogger = fn;\n    this.autopilot?.setLogger((m) => {\n      if (this.apLogger) this.apLogger(m);\n    });\n  }\n  runAutopilotScript(text: string): void {\n    if (!this.autopilot) return;\n    this.autopilot.runScript(text);\n  }\n  runAutopilotCommand(cmd: string): void {\n    if (!this.autopilot) return;\n    this.autopilot.runCommand(cmd);\n  }\n  stopAutopilot(): void {\n    this.autopilot?.stop();\n  }\n\n  /** Set game speed. Display values: 1x (actually 2x), 2x (actually 4x), 10x, 50x */\n  setGameSpeed(displaySpeed: number): void {\n    const speedMap: { [key: number]: number } = {\n      1: 2, // Display 1x, actually 2x\n      3: 4, // Display 2x (was 3x), actually 4x\n      10: 10, // Display 10x, actually 10x\n      50: 50, // Display 50x, actually 50x\n    };\n    const actualSpeed = speedMap[displaySpeed] || 2;\n    this.gameSpeed = actualSpeed;\n    try {\n      document.dispatchEvent(\n        new CustomEvent('game-speed-change', { detail: { speed: displaySpeed } })\n      );\n    } catch {}\n  }\n\n  /**\n   * Clamp rocket speed in atmosphere to a density-based limit and apply heating if exceeded\n   */\n  private enforceAtmosphericLimits(deltaTime: number): void {\n    const res = enforceAtmosphericLimits(\n      {\n        world: this.gameState.world,\n        position: this.rocketBody.position,\n        velocity: this.rocketBody.velocity,\n        mass: this.rocketBody.mass,\n        aeroCdEff: this.aeroCdEff,\n        aeroAreaEff: this.aeroAreaEff,\n        heatLevel: this.effectsSystem.getHeatLevel(),\n        atmosphericGlow: this.effectsSystem.getAtmosphericGlow(),\n        hasBurnedUp: this.effectsSystem.hasBurnedUpStatus(),\n        isGameOver: this.stateManager.isGameOverState(),\n        currentTime: this.gameState.currentTime,\n        overspeedTime: this.overspeedTime,\n      },\n      deltaTime\n    );\n    this.rocketBody.velocity = res.velocity;\n    this.gameState.rocket.velocity = res.velocity.clone();\n    this.effectsSystem.setHeatLevel(res.heatLevel);\n    this.effectsSystem.setAtmosphericGlow(res.atmosphericGlow);\n    this.effectsSystem.setHasBurnedUp(res.hasBurnedUp);\n    this.overspeedTime = res.overspeedTime || 0;\n    if (res.explode) {\n      this.effectsSystem.createExplosion(\n        this.gameState.rocket.position,\n        this.gameState.rocket.velocity\n      );\n      this.soundSystem.playExplosion();\n    }\n    if (res.destroy) {\n      this.destroyRocket(res.gameOverReason || 'Vehicle destroyed');\n    }\n  }\n\n  /**\n   * Update physics simulation\n   * @param deltaTime Physics timestep\n   */\n  private updatePhysics(deltaTime: number): void {\n    // Update context for physics simulation\n    this.physicsSimulation.updateContext({\n      gameState: this.gameState,\n      rocketBody: this.rocketBody,\n      rocketConfig: this.rocketConfig,\n      padBaseAngle: this.padBaseAngle,\n    });\n\n    // Run physics simulation\n    const result = this.physicsSimulation.updatePhysics(deltaTime);\n\n    // Update aerodynamic values\n    this.aeroCdEff = result.aeroCdEff;\n    this.aeroAreaEff = result.aeroAreaEff;\n    this.lastMach = result.lastMach;\n    this.lastAoADeg = result.lastAoADeg;\n  }\n\n  /**\n   * Update rocket state from physics body\n   */\n  private updateRocketState(): void {\n    this.stateManager.updateRocketState(\n      this.gameState,\n      this.rocketBody,\n      this.rocketConfig,\n      this.visualRotation,\n      this.isAutopilotRunning(),\n      this.aeroCdEff,\n      this.aeroAreaEff\n    );\n  }\n\n  /**\n   * Render the game\n   */\n  private render(): void {\n    // Orient camera so planet \"down\" points to screen bottom: align local radial outward with screen up.\n    try {\n      const ang = Math.atan2(this.gameState.rocket.position.y, this.gameState.rocket.position.x);\n      // Align local radial outward with screen up (renderer uses -rotation)\n      this.camera.setRotation(ang - Math.PI / 2);\n    } catch {}\n    this.renderer.clear();\n    this.renderer.beginFrame();\n\n    // Draw planet surface using PlanetRenderer\n    this.planetRenderer.render(\n      this.renderer,\n      this.gameState.world,\n      this.gameState.currentTime,\n      this.gameState.rocket.position,\n      this.padBaseAngle\n    );\n\n    // Draw background elements via BackgroundSystem (behind rocket/effects)\n    this.background.render(this.renderer, this.gameState);\n\n    // Draw effects behind rocket (smoke, streaks)\n    this.effectsSystem.render(this.renderer, this.gameState.rocket);\n\n    // Draw staging elements and debris\n    this.stageManager.render(this.renderer);\n\n    // Draw rocket (only if not exploding or game over)\n    if (!this.stateManager.isExplosionPhase() && !this.stateManager.isGameOverState()) {\n      this.rocketRenderer.render(this.renderer, this.gameState.rocket);\n    }\n\n    // Draw effects in front of rocket (explosions, debris)\n    this.effectsSystem.renderFront(this.renderer);\n\n    // Far-out locator: blink a small red dot at rocket position when zoomed out\n    if (this.camera.zoom < 0.01) {\n      const t = this.gameState.currentTime;\n      const pulse = 0.5 + 0.5 * Math.sin(2 * Math.PI * 1.2 * t);\n      const alpha = 0.25 + 0.45 * pulse;\n      const pxRadius = 3;\n      const worldR = pxRadius / Math.max(1e-6, this.camera.zoom);\n      const color = `rgba(255, 40, 40, ${alpha.toFixed(3)})`;\n      this.renderer.drawCircle(this.gameState.rocket.position, worldR, color);\n    }\n\n    this.renderer.endFrame();\n\n    // Draw HUD\n    if (this.showHUD) {\n      this.hudSystem.render(this.renderer, this.gameState, this.missionTimer);\n      // Draw facts overlay\n      this.factSystem?.render();\n      // Draw atmosphere messages on top of HUD\n      this.atmosphereUI.render(this.gameState.currentTime);\n    }\n\n    // Draw game over screen if needed\n    if (this.stateManager.isGameOverState()) {\n      this.renderGameOverScreen();\n    }\n  }\n\n  // Command API methods\n  igniteEngines(): boolean {\n    return this.commandExecutor.igniteEngines();\n  }\n\n  setThrottle(value: number): void {\n    this.commandExecutor.setThrottle(value);\n  }\n\n  cutEngines(): void {\n    this.commandExecutor.cutEngines();\n  }\n\n  performStaging(): boolean {\n    return this.commandExecutor.performStaging();\n  }\n\n  /**\n   * Destroy rocket completely - triggers explosion phase first\n   */\n  private destroyRocket(reason?: string): void {\n    // Start explosion in stateManager\n    this.stateManager.startExplosion(reason || 'Vehicle destroyed');\n\n    // Cut engines and stop physics\n    this.gameState.rocket.isEngineIgnited = false;\n    this.gameState.rocket.throttle = 0;\n    this.soundSystem.stopEngine();\n\n    // Create debris particles from rocket destruction\n    this.effectsSystem.createDestructionDebris(\n      this.gameState.rocket.position,\n      this.gameState.rocket.velocity\n    );\n  }\n\n  /**\n   * Render game over screen\n   */\n  private renderGameOverScreen(): void {\n    // Use stateManager's implementation\n    this.stateManager.renderGameOverScreen();\n  }\n\n  /**\n   * Get menu button bounds for click detection\n   */\n  getMenuButtonBounds(): { x: number; y: number; width: number; height: number } | undefined {\n    return this.stateManager.menuButtonBounds;\n  }\n}\n","import type { GameEngine } from '@/core/GameEngine.js';\n\nexport function setupAutopilotConsole(engine: GameEngine): void {\n  const panel = document.createElement('div');\n  panel.id = 'ap-panel';\n  panel.style.marginTop = '8px';\n  panel.style.padding = '8px 10px';\n  panel.style.background = 'rgba(15,15,22,0.9)';\n  panel.style.border = '1px solid #445';\n  panel.style.borderRadius = '6px';\n  panel.style.color = '#ddd';\n  panel.style.display = 'none';\n\n  // Header row with title (left) and centered Auto Pilot button\n  const header = document.createElement('div');\n  header.style.display = 'grid';\n  header.style.gridTemplateColumns = '1fr auto 1fr';\n  header.style.alignItems = 'center';\n  header.style.minHeight = '26px';\n  header.style.marginBottom = '6px';\n\n  const title = document.createElement('div');\n  title.textContent = 'Command Console - Run your own scripts or try the Auto Pilot!';\n  title.style.fontSize = '13px';\n  title.style.color = '#9ecbff';\n  title.style.justifySelf = 'start';\n  header.appendChild(title);\n\n  const apBtn = document.createElement('button');\n  apBtn.textContent = 'AUTO PILOT';\n  apBtn.style.justifySelf = 'center';\n  apBtn.style.marginTop = '3px';\n  apBtn.style.background = 'linear-gradient(145deg, #255a8a, #1d3f63)';\n  apBtn.style.border = '1px solid #3e77a8';\n  apBtn.style.color = '#e3f2fd';\n  apBtn.style.fontSize = '12px';\n  apBtn.style.padding = '5px 12px';\n  apBtn.style.borderRadius = '5px';\n  apBtn.style.cursor = 'pointer';\n  apBtn.style.opacity = '0.95';\n  header.appendChild(apBtn);\n\n  const setApBtnStyle = (enabled: boolean, running: boolean) => {\n    if (enabled && !running) {\n      apBtn.style.background = 'linear-gradient(145deg, #255a8a, #1d3f63)';\n      apBtn.style.border = '1px solid #3e77a8';\n      apBtn.style.color = '#e3f2fd';\n      apBtn.style.cursor = 'pointer';\n      apBtn.style.opacity = '0.95';\n    } else {\n      apBtn.style.background = '#3a3a3a';\n      apBtn.style.border = '1px solid #555';\n      apBtn.style.color = '#aaaaaa';\n      apBtn.style.cursor = 'not-allowed';\n      apBtn.style.opacity = '0.6';\n    }\n  };\n\n  const updateApBtn = () => {\n    try {\n      const onGround = engine.isOnGround();\n      const running = engine.isAutopilotRunning();\n      apBtn.disabled = running || !onGround;\n      apBtn.textContent = running ? 'RUNNING' : 'AUTO PILOT';\n      apBtn.title = running\n        ? 'Autopilot running'\n        : onGround\n          ? 'Click to auto-run the launch script'\n          : 'Available only while on the ground';\n      setApBtnStyle(!apBtn.disabled, running);\n    } catch {}\n  };\n  apBtn.addEventListener('click', () => {\n    if (apBtn.disabled) return;\n    const script = [\n      'ignite',\n      'hold up',\n      'throttle 1',\n      'wait until altitude 800',\n      'pitch east 5',\n      'wait until altitude 6000',\n      'pitch east 15',\n      'wait until altitude 15000',\n      'pitch east 35',\n      'wait until altitude 40000',\n      'pitch east 55',\n      'wait until stage empty',\n      'throttle 0',\n      'cut',\n      'stage',\n      'hold prograde',\n      'wait until apoapsis',\n      'ignite',\n      'throttle 1',\n      'until periapsis = 110000',\n      'cut',\n    ].join('\\n');\n    engine.runAutopilotScript(script);\n  });\n  // Keep state fresh\n  updateApBtn();\n  const apInt = window.setInterval(updateApBtn, 400);\n  window.addEventListener('beforeunload', () => window.clearInterval(apInt));\n\n  panel.appendChild(header);\n\n  const log = document.createElement('div');\n  log.id = 'ap-log';\n  log.style.height = '100px';\n  log.style.overflowY = 'auto';\n  log.style.background = 'rgba(0,0,0,0.35)';\n  log.style.border = '1px solid #334';\n  log.style.padding = '6px';\n  log.style.marginBottom = '6px';\n  panel.appendChild(log);\n\n  const addLog = (msg: string) => {\n    const line = document.createElement('div');\n    line.textContent = msg;\n    line.style.whiteSpace = 'pre-wrap';\n    if (/^ERR:/i.test(msg)) line.style.color = '#ff6666';\n    log.appendChild(line);\n    log.scrollTop = log.scrollHeight;\n  };\n  engine.setAutopilotLogger(addLog);\n\n  const row = document.createElement('div');\n  row.style.display = 'flex';\n  row.style.gap = '6px';\n\n  const input = document.createElement('textarea');\n  input.id = 'ap-input';\n  input.placeholder = [\n    'Type commands then Run. Examples:',\n    'ignite //// hold prograde',\n    'throttle 0.6 //// wait 10',\n    'until apoapsis 120000 then throttle 0.3',\n    'cut',\n  ].join('\\n');\n  input.style.flex = '1';\n  input.style.height = '80px';\n  input.style.resize = 'none';\n  input.style.fontFamily = 'Courier New, monospace';\n  input.style.fontSize = '12px';\n  input.style.color = '#eee';\n  input.style.background = 'rgba(0,0,0,0.5)';\n  input.style.border = '1px solid #334';\n  input.style.padding = '6px';\n  row.appendChild(input);\n\n  const runBtn = document.createElement('button');\n  runBtn.textContent = 'Run';\n  runBtn.style.minWidth = '80px';\n  runBtn.style.background = '#1b5e20';\n  runBtn.style.color = '#e8ffe8';\n  runBtn.style.border = '1px solid #2e7d32';\n  runBtn.style.borderRadius = '4px';\n  runBtn.style.padding = '6px 10px';\n  runBtn.onclick = () => {\n    const text = input.value;\n    if (text.trim()) {\n      addLog('> run');\n      engine.runAutopilotScript(text);\n      input.value = '';\n      input.focus();\n    }\n  };\n  row.appendChild(runBtn);\n\n  const stopBtn = document.createElement('button');\n  stopBtn.textContent = 'Stop';\n  stopBtn.style.minWidth = '80px';\n  stopBtn.style.background = '#7a1f1f';\n  stopBtn.style.color = '#ffeaea';\n  stopBtn.style.border = '1px solid #c62828';\n  stopBtn.style.borderRadius = '4px';\n  stopBtn.style.padding = '6px 10px';\n  stopBtn.onclick = () => {\n    engine.stopAutopilot();\n    engine.cutEngines();\n    addLog('> stopped (engines cut)');\n  };\n  row.appendChild(stopBtn);\n\n  // Remove clear button to keep UI focused on Run/Stop\n\n  panel.appendChild(row);\n\n  document.addEventListener('prefill-autopilot-script', () => {\n    const script = [\n      'ignite',\n      'hold up',\n      'throttle 1',\n      'wait until altitude 1000',\n      'pitch east 5',\n      'wait until altitude 6000',\n      'pitch east 15',\n      'wait until altitude 15000',\n      'pitch east 35',\n      'wait until altitude 40000',\n      'pitch east 55',\n      'wait until stage empty',\n      'throttle 0',\n      'cut',\n      'stage',\n      'hold prograde',\n      'wait until apoapsis',\n      'ignite',\n      'throttle 1',\n      'until periapsis = 110000',\n      'cut',\n    ].join('\\n');\n    input.value = script;\n    input.focus();\n  });\n\n  const ctrlPanel = document.querySelector('.control-panel');\n  ctrlPanel?.appendChild(panel);\n  panel.style.display = 'block';\n}\n","// Simple settings backed by localStorage\nconst KEY_SOUND = 'settings.soundEnabled';\n\nexport function isSoundEnabled(): boolean {\n  try {\n    const v = localStorage.getItem(KEY_SOUND);\n    return v === null ? true : v === '1';\n  } catch {\n    return true;\n  }\n}\n\nexport function setSoundEnabled(on: boolean): void {\n  try {\n    localStorage.setItem(KEY_SOUND, on ? '1' : '0');\n  } catch {}\n}\n","import type { GameEngine } from '@/core/GameEngine.js';\n\nexport function showHowToPlay(\n  canvas: HTMLCanvasElement,\n  _startGame: () => Promise<GameEngine | null>\n): void {\n  const bezel = canvas.parentElement as HTMLElement | null;\n  if (!bezel) return;\n\n  const overlay = document.createElement('div');\n  overlay.id = 'howto-overlay';\n  overlay.setAttribute('role', 'dialog');\n  overlay.setAttribute('aria-modal', 'true');\n  overlay.style.position = 'absolute';\n  overlay.style.inset = '0';\n  overlay.style.display = 'flex';\n  overlay.style.alignItems = 'center';\n  overlay.style.justifyContent = 'center';\n  overlay.style.background = 'rgba(0,0,0,0.82)';\n  overlay.style.zIndex = '12';\n\n  const panel = document.createElement('div');\n  panel.style.width = 'min(880px, 92vw)';\n  panel.style.maxHeight = '86vh';\n  panel.style.overflow = 'auto';\n  panel.style.padding = '18px 22px';\n  panel.style.border = '1px solid #3b4a66';\n  panel.style.borderRadius = '10px';\n  panel.style.background = 'linear-gradient(145deg, #141a26, #0f1520)';\n  panel.style.boxShadow = '0 12px 40px rgba(0,0,0,0.6)';\n  panel.style.color = '#e6eef8';\n  panel.style.fontFamily = 'Courier New, monospace';\n\n  const header = document.createElement('div');\n  header.style.display = 'grid';\n  header.style.gridTemplateColumns = '1fr';\n  header.style.alignItems = 'center';\n  header.style.marginBottom = '10px';\n\n  const title = document.createElement('div');\n  title.textContent = 'How to Play';\n  title.style.fontSize = '18px';\n  title.style.fontWeight = 'bold';\n  title.style.color = '#9ecbff';\n  title.style.justifySelf = 'start';\n  header.appendChild(title);\n\n  // No close button in header; a Back button sits at the bottom\n\n  const section = (label: string) => {\n    const sec = document.createElement('div');\n    const h = document.createElement('div');\n    h.textContent = label;\n    h.style.marginTop = '10px';\n    h.style.marginBottom = '6px';\n    h.style.fontSize = '14px';\n    h.style.color = '#a9c7ff';\n    sec.appendChild(h);\n    return { root: sec, head: h };\n  };\n\n  const keycap = (text: string) => {\n    const k = document.createElement('span');\n    k.textContent = text;\n    k.style.display = 'inline-block';\n    k.style.minWidth = '18px';\n    k.style.padding = '3px 7px';\n    k.style.margin = '2px 6px 2px 0';\n    k.style.textAlign = 'center';\n    k.style.border = '1px solid #3e77a8';\n    k.style.borderRadius = '5px';\n    k.style.background = 'linear-gradient(145deg,#1d2a3a,#162233)';\n    k.style.color = '#d7e9ff';\n    k.style.fontSize = '12px';\n    return k;\n  };\n\n  // Manual controls\n  const controls = section('Manual Controls');\n  const ctrlList = document.createElement('div');\n  ctrlList.style.display = 'grid';\n  ctrlList.style.gridTemplateColumns = 'repeat(auto-fit, minmax(220px, 1fr))';\n  ctrlList.style.gap = '6px 14px';\n  const row = (k: string, d: string) => {\n    const r = document.createElement('div');\n    r.appendChild(keycap(k));\n    const t = document.createElement('span');\n    t.textContent = ` ${d}`;\n    r.appendChild(t);\n    return r;\n  };\n  ctrlList.append(\n    row('Space', 'Ignite engine'),\n    row('B', 'Cut engine'),\n    row('T', 'Full throttle'),\n    row('G', 'Zero throttle'),\n    row('↑ / ↓', 'Throttle ±10%'),\n    row('← / →', 'Turn left/right'),\n    row('S', 'Stage'),\n    row('Scroll', 'Zoom camera'),\n    row('P', 'Pause')\n  );\n  controls.root.appendChild(ctrlList);\n\n  // Game speed\n  const speeds = section('Game Speed');\n  const speedRow = document.createElement('div');\n  speedRow.style.display = 'flex';\n  speedRow.style.alignItems = 'center';\n  speedRow.style.gap = '10px';\n  const lbl = document.createElement('span');\n  lbl.textContent = 'Adjust with:';\n  const b = (text: string) => {\n    const e = document.createElement('span');\n    e.textContent = text;\n    e.style.padding = '3px 8px';\n    e.style.border = '1px solid #555';\n    e.style.borderRadius = '4px';\n    e.style.background = 'linear-gradient(145deg,#2d2d2d,#202020)';\n    e.style.color = '#ddd';\n    e.style.fontSize = '11px';\n    return e;\n  };\n  speedRow.append(lbl, b('1x'), b('3x'), b('10x'), b('50x'));\n  const hint = document.createElement('div');\n  hint.textContent = 'Higher speeds unlock with altitude; a message will guide you.';\n  hint.style.opacity = '0.9';\n  hint.style.fontSize = '12px';\n  hint.style.marginTop = '4px';\n  speeds.root.append(speedRow, hint);\n\n  // Autopilot\n  const ap = section('Auto Pilot');\n  const apText = document.createElement('div');\n  apText.textContent = 'Run small scripts to automate launch. Example:';\n  apText.style.marginBottom = '6px';\n  const code = document.createElement('pre');\n  code.textContent = [\n    'ignite',\n    'hold up',\n    'throttle 1',\n    'wait until altitude 6000',\n    'pitch east 15',\n    'wait until stage empty',\n    'cut',\n  ].join('\\n');\n  code.style.background = '#0e1724';\n  code.style.border = '1px solid #24314a';\n  code.style.borderRadius = '6px';\n  code.style.padding = '10px 12px';\n  code.style.color = '#c8e1ff';\n  code.style.fontSize = '12px';\n  code.style.overflowX = 'auto';\n  ap.root.append(apText, code);\n\n  // Footer with a small red Back button centered at the bottom\n  const footer = document.createElement('div');\n  footer.style.display = 'flex';\n  footer.style.justifyContent = 'center';\n  footer.style.marginTop = '12px';\n  const backBtn = document.createElement('button');\n  backBtn.textContent = 'Back';\n  backBtn.style.background = '#7a1f1f';\n  backBtn.style.border = '1px solid #c62828';\n  backBtn.style.color = '#ffeaea';\n  backBtn.style.padding = '6px 10px';\n  backBtn.style.borderRadius = '6px';\n  backBtn.style.cursor = 'pointer';\n  backBtn.onclick = () => overlay.remove();\n  footer.appendChild(backBtn);\n\n  panel.append(header, controls.root, speeds.root, ap.root, footer);\n  overlay.appendChild(panel);\n  bezel.appendChild(overlay);\n\n  const onKey = (e: KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation();\n      const evt = e as KeyboardEvent & { stopImmediatePropagation?: () => void };\n      evt.stopImmediatePropagation?.();\n      overlay.remove();\n    }\n  };\n  document.addEventListener('keydown', onKey, { capture: true });\n}\n","import type { GameEngine } from '@/core/GameEngine.js';\nimport { isSoundEnabled, setSoundEnabled } from '@/core/Settings.js';\nimport { showHowToPlay } from './HowToPlay.js';\n\nexport function buildIntroMenu(\n  canvas: HTMLCanvasElement,\n  startGame: () => Promise<GameEngine | null>\n): void {\n  const bezel = canvas.parentElement as HTMLElement | null;\n  if (!bezel) return;\n  const overlay = document.createElement('div');\n  overlay.id = 'intro-overlay';\n  overlay.setAttribute('role', 'dialog');\n  overlay.setAttribute('aria-modal', 'true');\n  overlay.style.position = 'absolute';\n  overlay.style.inset = '0';\n  overlay.style.display = 'flex';\n  overlay.style.flexDirection = 'column';\n  overlay.style.alignItems = 'center';\n  overlay.style.justifyContent = 'center';\n  overlay.style.background = 'rgba(0,0,0,0.8)';\n  overlay.style.color = '#e8e8e8';\n  overlay.style.zIndex = '10';\n\n  const panel = document.createElement('div');\n  panel.style.minWidth = '320px';\n  panel.style.padding = '20px 24px';\n  panel.style.border = '1px solid #444';\n  panel.style.borderRadius = '8px';\n  panel.style.background = 'rgba(20,20,30,0.9)';\n  panel.style.boxShadow = '0 6px 24px rgba(0,0,0,0.5)';\n\n  const title = document.createElement('div');\n  title.textContent = 'Mini Orbital Launch';\n  title.style.fontSize = '20px';\n  title.style.fontWeight = 'bold';\n  title.style.marginBottom = '12px';\n  title.style.textAlign = 'center';\n  panel.appendChild(title);\n\n  const btn = (label: string) => {\n    const b = document.createElement('button');\n    b.textContent = label;\n    b.style.display = 'block';\n    b.style.width = '100%';\n    b.style.margin = '8px 0';\n    b.style.padding = '10px 12px';\n    b.style.fontFamily = 'Courier New, monospace';\n    b.style.fontSize = '14px';\n    b.style.background = 'linear-gradient(145deg,#404040,#303030)';\n    b.style.color = '#ddd';\n    b.style.border = '1px solid #555';\n    b.style.borderRadius = '6px';\n    b.style.cursor = 'pointer';\n    b.onmouseenter = () => {\n      b.style.background = 'linear-gradient(145deg,#505050,#404040)';\n    };\n    b.onmouseleave = () => {\n      b.style.background = 'linear-gradient(145deg,#404040,#303030)';\n    };\n    return b;\n  };\n\n  const newGame = btn('New Game');\n  newGame.setAttribute('aria-label', 'Start a new game');\n  newGame.onclick = async () => {\n    overlay.remove();\n    await startGame();\n    try {\n      localStorage.setItem('hasSave', '1');\n    } catch {}\n  };\n\n  const howto = btn('How to Play');\n  howto.setAttribute('aria-label', 'How to play');\n  howto.onclick = () => {\n    showHowToPlay(canvas, startGame);\n  };\n\n  const opts = document.createElement('div');\n  opts.style.marginTop = '6px';\n  const soundRow = document.createElement('label');\n  soundRow.style.display = 'flex';\n  soundRow.style.alignItems = 'center';\n  soundRow.style.gap = '8px';\n  soundRow.style.fontSize = '13px';\n  const chk = document.createElement('input');\n  chk.type = 'checkbox';\n  chk.checked = isSoundEnabled();\n  chk.onchange = () => setSoundEnabled(chk.checked);\n  const span = document.createElement('span');\n  span.textContent = 'Sound enabled';\n  soundRow.appendChild(chk);\n  soundRow.appendChild(span);\n  const optsTitle = document.createElement('div');\n  optsTitle.textContent = 'Options';\n  optsTitle.style.marginTop = '12px';\n  optsTitle.style.marginBottom = '4px';\n  optsTitle.style.color = '#9ecbff';\n  optsTitle.style.fontSize = '13px';\n  opts.appendChild(optsTitle);\n  opts.appendChild(soundRow);\n\n  panel.appendChild(newGame);\n  panel.appendChild(howto);\n  panel.appendChild(opts);\n  overlay.appendChild(panel);\n  bezel.appendChild(overlay);\n\n  // Accessibility: ESC closes the overlay if focused\n  const onKey = (e: KeyboardEvent) => {\n    if (e.key !== 'Escape') return;\n    // If any top overlays are open, ignore ESC for the intro menu\n    const readme = document.getElementById('readme-overlay');\n    const lex = document.getElementById('lexicon-overlay');\n    const howto = document.getElementById('howto-overlay');\n    const visible = (el: HTMLElement | null) => !!el && el.style.display === 'flex';\n    if (visible(readme as HTMLElement) || visible(lex as HTMLElement) || howto) return;\n    overlay.remove();\n  };\n  document.addEventListener('keydown', onKey);\n}\n","export function setupReadmeOverlay(): void {\n  const monitor = document.querySelector('.monitor-container') as HTMLElement | null;\n  if (!monitor) return;\n\n  const btn = document.createElement('button');\n  btn.textContent = 'READ ME';\n  btn.setAttribute('aria-label', 'Open readme overlay');\n  btn.style.position = 'absolute';\n  btn.style.left = '60px';\n  btn.style.bottom = '6px';\n  btn.style.transform = 'translateY(100%)';\n  btn.style.padding = '6px 10px';\n  btn.style.fontFamily = 'Courier New, monospace';\n  btn.style.fontSize = '12px';\n  btn.style.borderRadius = '12px';\n  btn.style.border = '1px solid #555';\n  btn.style.background = 'linear-gradient(145deg, #404040, #303030)';\n  btn.style.color = '#ddd';\n  btn.style.cursor = 'pointer';\n  btn.style.zIndex = '5';\n  btn.onmouseenter = () => {\n    btn.style.background = 'linear-gradient(145deg,#505050,#404040)';\n  };\n  btn.onmouseleave = () => {\n    btn.style.background = 'linear-gradient(145deg,#404040,#303030)';\n  };\n  monitor.appendChild(btn);\n\n  const overlay = document.createElement('div');\n  overlay.id = 'readme-overlay';\n  overlay.style.position = 'absolute';\n  overlay.setAttribute('role', 'dialog');\n  overlay.setAttribute('aria-modal', 'true');\n  overlay.style.inset = '0';\n  overlay.style.background = 'rgba(0,0,0,0.55)';\n  overlay.style.display = 'none';\n  overlay.style.alignItems = 'center';\n  overlay.style.justifyContent = 'center';\n  overlay.style.zIndex = '30';\n\n  const card = document.createElement('div');\n  card.style.width = 'min(820px, 92%)';\n  card.style.maxHeight = '80%';\n  card.style.overflowY = 'auto';\n  card.style.background = 'linear-gradient(180deg, #131722 0%, #0f1220 100%)';\n  card.style.border = '1px solid #556';\n  card.style.borderRadius = '14px';\n  card.style.boxShadow = '0 10px 30px rgba(0,0,0,0.6)';\n  card.style.color = '#e6e9f2';\n  card.style.padding = '18px 20px 14px';\n  card.style.position = 'relative';\n\n  const closeX = document.createElement('button');\n  closeX.textContent = '×';\n  closeX.setAttribute('aria-label', 'Close overlay');\n  closeX.title = 'Close';\n  closeX.style.position = 'absolute';\n  closeX.style.top = '10px';\n  closeX.style.right = '10px';\n  closeX.style.width = '26px';\n  closeX.style.height = '26px';\n  closeX.style.borderRadius = '50%';\n  closeX.style.border = 'none';\n  closeX.style.background = '#ff3b30';\n  closeX.style.color = '#fff';\n  closeX.style.fontSize = '18px';\n  closeX.style.cursor = 'pointer';\n  closeX.onclick = () => {\n    overlay.style.display = 'none';\n  };\n  card.appendChild(closeX);\n\n  const content = document.createElement('div');\n  content.style.fontSize = '14px';\n  content.style.lineHeight = '1.55';\n  content.style.marginBottom = '10px';\n  content.style.whiteSpace = 'pre-wrap';\n  content.textContent = `Welcome to Mini Orbital Launch 🚀\nThis is a tiny 2D rocket sandbox. \nCommand Console :\nType simple lines and press Run. Use “then”, new lines, or spaces between steps.\nExamples:\nignite throttle 1 until apoapsis = 100000 throttle 0 wait until apoapsis hold prograde ignite throttle 1 until periapsis = 110000 cut\nYou can also use:\npitch east 10 (aim nose a bit east), wait 5,\nwait until altitude 15000, wait until stage empty,\nhold prograde or hold retrograde, throttle 0.6, cut.\nTips:\n• Pitch gently east (5°–15°), then let gravity + thrust bend the path.\n• Coast to apoapsis, then circularize to raise periapsis. Aim ≈ 110 km.\n• Keep an eye on staging !`;\n  card.appendChild(content);\n\n  const closeBottom = document.createElement('button');\n  closeBottom.textContent = 'Close';\n  closeBottom.style.marginTop = '6px';\n  closeBottom.style.padding = '8px 12px';\n  closeBottom.style.border = '1px solid #556';\n  closeBottom.style.background = '#1a2236';\n  closeBottom.style.color = '#e6e9f2';\n  closeBottom.style.borderRadius = '8px';\n  closeBottom.style.cursor = 'pointer';\n  closeBottom.onclick = () => {\n    overlay.style.display = 'none';\n  };\n  card.appendChild(closeBottom);\n\n  overlay.appendChild(card);\n  monitor.appendChild(overlay);\n\n  btn.onclick = () => {\n    overlay.style.display = 'flex';\n  };\n\n  // Lexicon button under READ ME\n  const lexBtn = document.createElement('button');\n  lexBtn.textContent = 'LEXICON';\n  lexBtn.setAttribute('aria-label', 'Open lexicon overlay');\n  lexBtn.style.position = 'absolute';\n  lexBtn.style.left = '160px';\n  lexBtn.style.bottom = '6px';\n  lexBtn.style.transform = 'translateY(100%)';\n  lexBtn.style.padding = '6px 10px';\n  lexBtn.style.fontFamily = 'Courier New, monospace';\n  lexBtn.style.fontSize = '12px';\n  lexBtn.style.borderRadius = '12px';\n  lexBtn.style.border = '1px solid #555';\n  lexBtn.style.background = 'linear-gradient(145deg, #404040, #303030)';\n  lexBtn.style.color = '#ddd';\n  lexBtn.style.cursor = 'pointer';\n  lexBtn.style.zIndex = '5';\n  lexBtn.onmouseenter = () => {\n    lexBtn.style.background = 'linear-gradient(145deg,#505050,#404040)';\n  };\n  lexBtn.onmouseleave = () => {\n    lexBtn.style.background = 'linear-gradient(145deg,#404040,#303030)';\n  };\n  monitor.appendChild(lexBtn);\n\n  const lexOverlay = document.createElement('div');\n  lexOverlay.id = 'lexicon-overlay';\n  lexOverlay.style.position = 'absolute';\n  lexOverlay.style.inset = '0';\n  lexOverlay.style.background = 'rgba(0,0,0,0.5)';\n  lexOverlay.style.display = 'none';\n  lexOverlay.style.alignItems = 'center';\n  lexOverlay.style.justifyContent = 'center';\n  lexOverlay.style.zIndex = '31';\n\n  const lexCard = document.createElement('div');\n  lexCard.style.width = 'min(700px, 92%)';\n  lexCard.style.maxHeight = '78%';\n  lexCard.style.overflowY = 'auto';\n  lexCard.style.background = 'linear-gradient(180deg, #131722 0%, #0f1220 100%)';\n  lexCard.style.border = '1px solid #556';\n  lexCard.style.borderRadius = '14px';\n  lexCard.style.boxShadow = '0 10px 30px rgba(0,0,0,0.6)';\n  lexCard.style.color = '#e6e9f2';\n  lexCard.style.padding = '18px 20px 14px';\n  lexCard.style.position = 'relative';\n\n  const lexClose = document.createElement('button');\n  lexClose.textContent = '×';\n  lexClose.setAttribute('aria-label', 'Close lexicon');\n  lexClose.title = 'Close';\n  lexClose.style.position = 'absolute';\n  lexClose.style.top = '10px';\n  lexClose.style.right = '10px';\n  lexClose.style.width = '26px';\n  lexClose.style.height = '26px';\n  lexClose.style.borderRadius = '50%';\n  lexClose.style.border = 'none';\n  lexClose.style.background = '#ff3b30';\n  lexClose.style.color = '#fff';\n  lexClose.style.fontSize = '18px';\n  lexClose.style.cursor = 'pointer';\n  lexClose.onclick = () => {\n    lexOverlay.style.display = 'none';\n  };\n  lexCard.appendChild(lexClose);\n\n  const lexTitle = document.createElement('div');\n  lexTitle.textContent = 'Lexicon — Simple words';\n  lexTitle.style.fontSize = '18px';\n  lexTitle.style.fontWeight = 'bold';\n  lexTitle.style.marginBottom = '8px';\n  lexCard.appendChild(lexTitle);\n\n  const lexText = document.createElement('div');\n  lexText.style.whiteSpace = 'pre-wrap';\n  lexText.style.lineHeight = '1.6';\n  lexText.textContent = `TWR (Thrust‑to‑Weight Ratio):\\nHow strong your engines push compared to your weight. TWR > 1 means you can lift off.\\n\\nApoapsis (Ap):\\nThe highest point of your orbit. If you coast to Ap and burn prograde, the other side rises.\\n\\nPeriapsis (Pe):\\nThe lowest point of your orbit. If you burn prograde at Pe, the opposite side rises.\\n\\nPrograde / Retrograde:\\nPrograde = the direction you are moving. Retrograde = the opposite direction.\\nHolding prograde during ascent creates a gravity turn; holding retrograde slows you down.\\n\\nCircularize:\\nBurn at Ap (or Pe) to raise the opposite side until both match — that makes a circle.\\n\\nDelta‑V (Δv):\\nYour \"fuel budget\" in m/s — how much you can change your speed. Fighting gravity or air resistance costs you extra.\\n\\nISP (Specific Impulse):\\nHow efficient an engine is. Higher ISP means more push per unit of fuel (better efficiency).\\n\\nThrottle:\\nHow hard the engine pushes right now (0% to 100%). Lower throttle saves fuel but burns longer.`;\n  lexCard.appendChild(lexText);\n\n  const lexCloseBottom = document.createElement('button');\n  lexCloseBottom.textContent = 'Close';\n  lexCloseBottom.style.marginTop = '6px';\n  lexCloseBottom.style.padding = '8px 12px';\n  lexCloseBottom.style.border = '1px solid #556';\n  lexCloseBottom.style.background = '#1a2236';\n  lexCloseBottom.style.color = '#e6e9f2';\n  lexCloseBottom.style.borderRadius = '8px';\n  lexCloseBottom.style.cursor = 'pointer';\n  lexCloseBottom.onclick = () => {\n    lexOverlay.style.display = 'none';\n  };\n  lexCard.appendChild(lexCloseBottom);\n\n  lexOverlay.appendChild(lexCard);\n  monitor.appendChild(lexOverlay);\n  lexBtn.onclick = () => {\n    lexOverlay.style.display = 'flex';\n  };\n\n  // ESC closes only these overlays; stop propagation so Intro menu stays open\n  const onEsc = (e: KeyboardEvent) => {\n    const readmeOpen = overlay.style.display === 'flex';\n    const lexOpen = lexOverlay.style.display === 'flex';\n    if (e.key === 'Escape' && (readmeOpen || lexOpen)) {\n      e.preventDefault();\n      e.stopPropagation();\n      // Narrow cast to extend Event with stopImmediatePropagation if present\n      const evt = e as KeyboardEvent & { stopImmediatePropagation?: () => void };\n      evt.stopImmediatePropagation?.();\n      overlay.style.display = 'none';\n      lexOverlay.style.display = 'none';\n    }\n  };\n  document.addEventListener('keydown', onEsc, { capture: true });\n}\n","export function setupSpeedControlsReflector(): void {\n  document.addEventListener('game-speed-change', (ev: Event) => {\n    const s = (ev as CustomEvent).detail?.speed as number | undefined;\n    if (!s) return;\n    const btns = document.querySelectorAll('.speed-btn');\n    for (const el of Array.from(btns)) {\n      const b = el as HTMLButtonElement;\n      const val = Number.parseInt(b.dataset.speed || '1');\n      if (val === s) b.classList.add('active');\n      else b.classList.remove('active');\n    }\n  });\n}\n","// Main entry point for Mini Orbital Launch Game\nimport { GameEngine } from './core/GameEngine.js';\nimport { setupAutopilotConsole } from './ui/AutopilotConsole.js';\nimport { buildIntroMenu } from './ui/IntroMenu.js';\nimport { setupReadmeOverlay } from './ui/ReadmeOverlay.js';\nimport { setupSpeedControlsReflector } from './ui/SpeedControls.js';\n\nconsole.log('Mini Orbital Launch Game - Initializing...');\n\nconst canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\nif (!canvas) throw new Error('Canvas element not found');\n\nasync function startGame(): Promise<GameEngine | null> {\n  try {\n    const engine = new GameEngine(canvas);\n    await engine.initialize();\n    engine.start();\n    setupAutopilotConsole(engine);\n\n    const bezel = canvas.parentElement as HTMLElement | null;\n    if (bezel && 'ResizeObserver' in window) {\n      const ro = new ResizeObserver(() => window.dispatchEvent(new Event('resize')));\n      ro.observe(bezel);\n    }\n    return engine;\n  } catch (e) {\n    console.error('Failed to start game:', e);\n    return null;\n  }\n}\n\nbuildIntroMenu(canvas, startGame);\nsetupReadmeOverlay();\nsetupSpeedControlsReflector();\n"],"names":["PhysicsIntegrator","deltaTime","updateCallback","clampedDeltaTime","substeps","position","velocity","acceleration","initialVelocity","avgVelocity","previousAcceleration","dt2","baseTimestep","velocityMag","accelMag","Vector2","x","y","angle","magnitude","other","scalar","mag","dot","mag1","mag2","cosAngle","tolerance","BackgroundSystem","gameState","angleNow","omega","def","img","scale","ctx","rng","bands","band","count","i","side","jitter","offset","type","height","width","t","w","h","c","toPx","stripeW","leftX","rightX","cols","rows","winW","winH","gapX","gapY","baseX","baseY","r","wx","wy","vents","vw","vh","gap","total","add","color","renderer","R","ang","u","base","sprite","center","topLeft","b","tre","p1","p2","p3","building","pos","pale","top","CanvasRenderer","canvas","rect","dpr","camera","centerX","centerY","rot","radius","fillColor","strokeColor","lineWidth","start","end","text","font","align","rotation","drawFunction","image","scaleX","scaleY","drawWidth","drawHeight","worldPos","relativePos","screenX","screenY","centerWorld","innerRadiusWorld","outerRadiusWorld","innerColor","outerColor","centerScreen","zoom","r0","r1","grad","screenPos","relativeX","relativeY","Camera","direction","distance","moveAmount","movement","target","radians","CloudSystem","size","numClouds","j","puffX","puffY","puffRadius","puffGrad","numLayers","wave","numWisps","startX","startY","length","segments","coverage","clouds","launchAngle","exclusionZone","baseAngle","angleVariation","planetCenter","planetRadius","currentTime","planetRotation","layer","layerRadius","cloud","cloudAngle","texture","drawCartoonLand","fill","fn","islands","ix","iy","sx","sy","cache","getPlanetTexture","key","found","rightY","capR","wobble","blobR","blobX","blobY","edgeWidth","atmGrad","PlanetRenderer","e","world","rocketPosition","padBaseAngle","rocketAltitude","altitude","wDev","hDev","cssW","cssH","g","topColor","bottomColor","worldAng","atmosphereIntensity","layers","gradient","RocketRenderer","config","tryLoad","candidates","set","attempt","idx","meta","withBase","p","rocketState","isEngineOn","throttle","yOffset","spriteFull","spriteUpper","currentStage","exLift","totalDims","fullW","fullH","upperW","upperH","drawW","drawH","spriteYOffset","exY","nozzleDrop","engineLocalY","enginePos","baseYOffset","currentY","stages","currentStageIndex","activeStageBottomY","isActiveStage","stagePos","nosePos","tipHeight","tipPos","exhaustIntensity","exhaustScale","exhaustLength","exhaustWidth","exhaustY","xShift","exhaustPos","coreWidth","coreLength","corePos","particleCount","offsetX","offsetY","particleSize","particlePos","alpha","stageIndex","clampAlpha","withAlpha","hex","bigint","bodyColor","bodyPos","tip","baseWidth","leftBase","rightBase","totalHeight","maxWidth","useSprites","fullHScale","fullWScale","upperHScale","upperWScale","stripe1Pos","stripe2Pos","nozzleWidth","nozzleHeight","nozzle1Pos","nozzle2Pos","bandPos","windowSize","window1Pos","window2Pos","nozzlePos","leftFinPos","rightFinPos","newConfig","AtmosphereUI","time","duration","rocketRadius","currentLayer","msg","m","age","fadeIn","fadeOut","maxTextWidth","lines","lineHeight","textW","line","padX","padY","panelW","panelH","panelX","panelY","ty","words","test","FactBubblesSystem","nowMs","spaceFacts","pad","maxW","ln","barW","barX","barY","factsArr","available","s","calculateDragForce","density","dragCoefficient","crossSectionalArea","speed","dragMagnitude","calculateTerminalVelocity","mass","gravity","HUDSystem","missionTimer","rmag","bottomDistance","tVec","groundVel","rawVel","relVel","fuel","rocket","currentTWR","currentISP","minDim","isCoarse","hasTouch","isMobile","uiScale","gaugeH","contentBottom","gaugeTopGap","bottomPad","velText","cd","area","vTerm","vMax","label","safetyColor","ratio","mix","a","k","velW","labelX","maxX","oldAlign","engineStatus","statusColor","g0","dvTotal","mCurrent","densityNow","sea","vacBlend","st","isp","ispSea","ispVac","mAfter","dvText","desiredGW","gaugeX","earthAngle","lineH","helpW","helpH","helpX","helpY0","helpY","metrics","margin","cx","cy","planetRadiusWorld","planetRadiusMini","panelEdgeRadius","texSize","info","pathPreview","maxR","rA","maxDisplayR","aMaxDynamic","worldToMini","rWorld","ux","uy","alt","aRef","tRadial","rMini","dx","dy","pathPts","step","dotR","ap","pp","apoY","periY","apoLabel","periLabel","noticeY","rpos","steps","dtSeconds","mu","out","rx","ry","vx","vy","dt","r2","invr3","ax","ay","now","thrusting","vel","stage","inVacuumCoast","needRecalc","dvx","dvy","v1","m1","m2","minInterval","res","path","simSeconds","_dtSeconds","v2_0","rv","eVecX","eVecY","eMag","rp","ra","apoAlt","periAlt","apoPos","periPos","stableThreshold","stableOrbit","pickDt","tSim","lastAngle","rotAccum","escapeRenderRadius","dAng","value","decimals","rocketPos","rocketRotation","horizonY","rotationDeg","velMag","velAngleDeg","distanceFromCenter","engineOn","velAngle","arrowLength","endX","endY","totalFuel","forcedWidth","maxFuel","currentFuel","fuelRatio","gaugeWidth","gaugeHeight","fuelBarWidth","fuelColor","percentText","textWidth","missionTime","wallClockTime","minutes","seconds","timeText","timerW","timerH","miniMargin","miniSize","fine","timerX","buttonH","timerY","buttonW","buttonX","buttonY","pending","targetAuto","toAuto","btnW","btnH","yesX","noX","btnY","enforceAtmosphericLimits","input","heatLevel","atmosphericGlow","hasBurnedUp","gameOverReason","explode","destroy","overRatio","densityNorm","over","decelRate","vUnit","deltaV","newSpeed","heatGlow","overspeedTime","pps","Autopilot","engine","normalized","keywords","kw","re","l","ok","cmd","parts","raw","lower","val","muApo","muPeri","muAlt","muStage","targ","mode","dir","deg","signed","mv","mt","thr","op","prev","_dt","apo","remaining","cmp","twr","boosted","f","CommandExecutor","context","updates","rocketConfig","soundSystem","debugLog","activeStage","thrust","rocketBody","effectsSystem","stageManager","rocketRenderer","destroyRocket","currentThrust","currentPosition","currentVelocity","rocketDown","dims","delta","StagingVisuals","rotSpeed","life","particles","sp","pv","sz","d","flash","EffectsSystem","streak","engineBase","atmosphericDensity","speedThreshold","effectIntensity","streakOffset","smokeIntensity","smokeCount","down","smokePos","ejectSpeed","smokeVel","RigidBody","force","applicationPoint","torque","sum","momentOfInertia","angularAcceleration","linearKE","rotationalKE","newMass","clone","WorldParameters","positionMagnitude","orbitalRadius","calculateApoapsis","v","specificEnergy","semiMajorAxis","eccentricity","apoapsisRadius","calculatePeriapsis","computeApoPeri","RocketConfiguration","payloadMass","currentWeight","activeStages","totalThrust","thrustUsed","ispEff","fuelRate","fuelConsumed","fuelToConsume","bonus","forceStaging","nextStage","totalDeltaV","currentMass","startIndex","massAfterBurn","GameStateManager","launchPosition","launchVelocity","halfHeight","padClearance","visualRotation","autopilotRunning","aeroCdEff","aeroAreaEff","reason","buttonWidth","buttonHeight","updateGuidance","inputTurn","apTargetRot","debug","a0","tRaw","upAngle","angularVelocity","maxRate","lastDebugLogTime","avDeg","updateVisualGuidance","targetRotation","InputController","hud","state","event","zoomFactor","currentZoom","newZoom","activeElement","menuButtonBounds","speedButtons","button","minAlt","minAltLabel","PhysicsSimulation","gravityForce","thrustForce","dragResult","centerRadius","newX","newY","newPos","tan","weight","desiredCenter","airVel","fwd","flow","aoa","mach","aFront","sideMul","sin2","cos2","areaEff","cdBase","cdAoA","cdMach","cdEff","impactSpeed","currentDistance","surfaceDistance","normalizedPos","vector","SimpleSoundSystem","enabled","AudioContextClass","url","arrayBuffer","buffer","source","gain","targetGain","StageManager","exhaustLocalY","rocketHeight","separationVel","baseBottom","separatedStagePos","dv","createExplosion","gravityMagnitude","gravityDirection","gravityAccel","surfaceNorm","viewSize","GameEngine","args","result","autopilot","altForSound","dens","isInOrbit","rad","displaySpeed","actualSpeed","worldR","setupAutopilotConsole","panel","header","title","apBtn","setApBtnStyle","running","updateApBtn","onGround","script","apInt","log","addLog","row","runBtn","stopBtn","KEY_SOUND","isSoundEnabled","setSoundEnabled","on","showHowToPlay","_startGame","bezel","overlay","section","sec","keycap","controls","ctrlList","speeds","speedRow","lbl","hint","apText","code","footer","backBtn","onKey","buildIntroMenu","startGame","btn","newGame","howto","opts","soundRow","chk","span","optsTitle","readme","lex","visible","el","setupReadmeOverlay","monitor","card","closeX","content","closeBottom","lexBtn","lexOverlay","lexCard","lexClose","lexTitle","lexText","lexCloseBottom","onEsc","readmeOpen","lexOpen","setupSpeedControlsReflector","ev","btns"],"mappings":"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"}